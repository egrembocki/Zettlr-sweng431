{"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-editor\\table-editor\\build-grid.ts":{"path":"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-editor\\table-editor\\build-grid.ts","statementMap":{"0":{"start":{"line":16,"column":22},"end":{"line":18,"column":1}},"1":{"start":{"line":17,"column":4},"end":{"line":17,"column":62}},"2":{"start":{"line":19,"column":0},"end":{"line":19,"column":62}},"3":{"start":{"line":20,"column":0},"end":{"line":20,"column":33}},"4":{"start":{"line":21,"column":30},"end":{"line":21,"column":79}},"5":{"start":{"line":31,"column":4},"end":{"line":31,"column":67}},"6":{"start":{"line":31,"column":42},"end":{"line":31,"column":64}},"7":{"start":{"line":45,"column":20},"end":{"line":45,"column":23}},"8":{"start":{"line":46,"column":4},"end":{"line":59,"column":5}},"9":{"start":{"line":46,"column":19},"end":{"line":46,"column":20}},"10":{"start":{"line":48,"column":8},"end":{"line":58,"column":9}},"11":{"start":{"line":50,"column":16},"end":{"line":50,"column":68}},"12":{"start":{"line":51,"column":16},"end":{"line":51,"column":22}},"13":{"start":{"line":53,"column":16},"end":{"line":53,"column":71}},"14":{"start":{"line":54,"column":16},"end":{"line":54,"column":22}},"15":{"start":{"line":56,"column":16},"end":{"line":56,"column":69}},"16":{"start":{"line":57,"column":16},"end":{"line":57,"column":22}},"17":{"start":{"line":60,"column":4},"end":{"line":60,"column":21}},"18":{"start":{"line":64,"column":21},"end":{"line":64,"column":60}},"19":{"start":{"line":65,"column":20},"end":{"line":65,"column":30}},"20":{"start":{"line":66,"column":20},"end":{"line":66,"column":35}},"21":{"start":{"line":68,"column":16},"end":{"line":68,"column":80}},"22":{"start":{"line":68,"column":43},"end":{"line":68,"column":63}},"23":{"start":{"line":69,"column":19},"end":{"line":69,"column":84}},"24":{"start":{"line":71,"column":17},"end":{"line":71,"column":19}},"25":{"start":{"line":72,"column":4},"end":{"line":78,"column":5}},"26":{"start":{"line":73,"column":8},"end":{"line":73,"column":23}},"27":{"start":{"line":77,"column":8},"end":{"line":77,"column":26}},"28":{"start":{"line":80,"column":4},"end":{"line":123,"column":5}},"29":{"start":{"line":80,"column":19},"end":{"line":80,"column":20}},"30":{"start":{"line":82,"column":27},"end":{"line":82,"column":52}},"31":{"start":{"line":86,"column":25},"end":{"line":86,"column":27}},"32":{"start":{"line":87,"column":8},"end":{"line":93,"column":9}},"33":{"start":{"line":87,"column":21},"end":{"line":87,"column":22}},"34":{"start":{"line":88,"column":29},"end":{"line":88,"column":31}},"35":{"start":{"line":89,"column":12},"end":{"line":91,"column":13}},"36":{"start":{"line":89,"column":25},"end":{"line":89,"column":26}},"37":{"start":{"line":90,"column":16},"end":{"line":90,"column":34}},"38":{"start":{"line":92,"column":12},"end":{"line":92,"column":36}},"39":{"start":{"line":95,"column":8},"end":{"line":109,"column":9}},"40":{"start":{"line":95,"column":23},"end":{"line":95,"column":24}},"41":{"start":{"line":98,"column":28},"end":{"line":98,"column":53}},"42":{"start":{"line":99,"column":12},"end":{"line":101,"column":13}},"43":{"start":{"line":100,"column":16},"end":{"line":100,"column":35}},"44":{"start":{"line":103,"column":12},"end":{"line":103,"column":80}},"45":{"start":{"line":103,"column":43},"end":{"line":103,"column":78}},"46":{"start":{"line":106,"column":12},"end":{"line":108,"column":13}},"47":{"start":{"line":106,"column":25},"end":{"line":106,"column":26}},"48":{"start":{"line":107,"column":16},"end":{"line":107,"column":48}},"49":{"start":{"line":112,"column":8},"end":{"line":114,"column":9}},"50":{"start":{"line":113,"column":12},"end":{"line":113,"column":52}},"51":{"start":{"line":116,"column":8},"end":{"line":122,"column":9}},"52":{"start":{"line":117,"column":12},"end":{"line":117,"column":30}},"53":{"start":{"line":121,"column":12},"end":{"line":121,"column":27}},"54":{"start":{"line":124,"column":4},"end":{"line":124,"column":27}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":16,"column":56},"end":{"line":16,"column":57}},"loc":{"start":{"line":16,"column":71},"end":{"line":18,"column":1}},"line":16},"1":{"name":"calcRawCellRows","decl":{"start":{"line":30,"column":9},"end":{"line":30,"column":24}},"loc":{"start":{"line":30,"column":34},"end":{"line":32,"column":1}},"line":30},"2":{"name":"(anonymous_2)","decl":{"start":{"line":31,"column":35},"end":{"line":31,"column":36}},"loc":{"start":{"line":31,"column":42},"end":{"line":31,"column":64}},"line":31},"3":{"name":"buildGridHeaderRow","decl":{"start":{"line":44,"column":9},"end":{"line":44,"column":27}},"loc":{"start":{"line":44,"column":60},"end":{"line":61,"column":1}},"line":44},"4":{"name":"buildGridTable","decl":{"start":{"line":62,"column":9},"end":{"line":62,"column":23}},"loc":{"start":{"line":62,"column":61},"end":{"line":125,"column":1}},"line":62},"5":{"name":"(anonymous_5)","decl":{"start":{"line":68,"column":35},"end":{"line":68,"column":36}},"loc":{"start":{"line":68,"column":43},"end":{"line":68,"column":63}},"line":68},"6":{"name":"(anonymous_6)","decl":{"start":{"line":103,"column":38},"end":{"line":103,"column":39}},"loc":{"start":{"line":103,"column":43},"end":{"line":103,"column":78}},"line":103}},"branchMap":{"0":{"loc":{"start":{"line":16,"column":22},"end":{"line":18,"column":1}},"type":"binary-expr","locations":[{"start":{"line":16,"column":23},"end":{"line":16,"column":27}},{"start":{"line":16,"column":31},"end":{"line":16,"column":51}},{"start":{"line":16,"column":56},"end":{"line":18,"column":1}}],"line":16},"1":{"loc":{"start":{"line":17,"column":11},"end":{"line":17,"column":61}},"type":"cond-expr","locations":[{"start":{"line":17,"column":37},"end":{"line":17,"column":40}},{"start":{"line":17,"column":43},"end":{"line":17,"column":61}}],"line":17},"2":{"loc":{"start":{"line":17,"column":12},"end":{"line":17,"column":33}},"type":"binary-expr","locations":[{"start":{"line":17,"column":12},"end":{"line":17,"column":15}},{"start":{"line":17,"column":19},"end":{"line":17,"column":33}}],"line":17},"3":{"loc":{"start":{"line":48,"column":8},"end":{"line":58,"column":9}},"type":"switch","locations":[{"start":{"line":49,"column":12},"end":{"line":51,"column":22}},{"start":{"line":52,"column":12},"end":{"line":54,"column":22}},{"start":{"line":55,"column":12},"end":{"line":57,"column":22}}],"line":48},"4":{"loc":{"start":{"line":62,"column":43},"end":{"line":62,"column":59}},"type":"default-arg","locations":[{"start":{"line":62,"column":55},"end":{"line":62,"column":59}}],"line":62},"5":{"loc":{"start":{"line":69,"column":62},"end":{"line":69,"column":83}},"type":"cond-expr","locations":[{"start":{"line":69,"column":74},"end":{"line":69,"column":77}},{"start":{"line":69,"column":80},"end":{"line":69,"column":83}}],"line":69},"6":{"loc":{"start":{"line":72,"column":4},"end":{"line":78,"column":5}},"type":"if","locations":[{"start":{"line":72,"column":4},"end":{"line":78,"column":5}},{"start":{"line":75,"column":9},"end":{"line":78,"column":5}}],"line":72},"7":{"loc":{"start":{"line":116,"column":8},"end":{"line":122,"column":9}},"type":"if","locations":[{"start":{"line":116,"column":8},"end":{"line":122,"column":9}},{"start":{"line":119,"column":13},"end":{"line":122,"column":9}}],"line":116},"8":{"loc":{"start":{"line":116,"column":12},"end":{"line":116,"column":34}},"type":"binary-expr","locations":[{"start":{"line":116,"column":12},"end":{"line":116,"column":21}},{"start":{"line":116,"column":25},"end":{"line":116,"column":34}}],"line":116}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0},"f":{"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"b":{"0":[1,1,1],"1":[1,0],"2":[1,1],"3":[0,0,0],"4":[0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-editor/table-editor/build-grid.ts","sources":["C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-editor/table-editor/build-grid.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @ignore\n * BEGIN HEADER\n *\n * Contains:        TableHelper utility function\n * CVM-Role:        Utility\n * Maintainer:      Hendrik Erz\n * License:         GNU GPL v3\n *\n * Description:     Transforms an AST to a grid table.\n *                  Cf. https://pandoc.org/MANUAL.html#tables\n *\n * END HEADER\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = buildGridTable;\nconst calculate_col_sizes_1 = __importDefault(require(\"./calculate-col-sizes\"));\n/**\n * Takes a set of AST columns and returns the number of lines they will span if\n * built as a string table\n *\n * @param   {string[]}  columns  The column contents\n *\n * @return  {number}             The amount of raw Markdown lines required to render\n */\nfunction calcRawCellRows(columns) {\n    return Math.max(...columns.map(col => col.split('\\n').length));\n}\n/**\n * Builds a header row for a grid table, based on the column sizes and the\n * alignment. As a symbol, pass in '=' if the grid table has a header row, or\n * '-' if it does not, and place this row accordingly.\n *\n * @param   {number[]}        colSizes      The column sizes of the table\n * @param   {ColAlignment[]}  colAlignment  The alignment specs\n * @param   {'='|'-'}         symbol        The symbol (depends on header row)\n *\n * @return  {string}                        The built grid header row\n */\nfunction buildGridHeaderRow(colSizes, colAlignment, symbol) {\n    let headerRow = '+';\n    for (let col = 0; col < colSizes.length; col++) {\n        // Respect the spaces left and right and account for alignment\n        switch (colAlignment[col]) {\n            case 'left':\n                headerRow += symbol.repeat(colSizes[col] + 2) + '+';\n                break;\n            case 'center':\n                headerRow += ':' + symbol.repeat(colSizes[col]) + ':+';\n                break;\n            case 'right':\n                headerRow += symbol.repeat(colSizes[col] + 1) + ':+';\n                break;\n        }\n    }\n    return headerRow;\n}\nfunction buildGridTable(ast, colAlignment, hasHeader = true) {\n    // Setup: colSizes is the maximum length of any cell inside the given column\n    const colSizes = (0, calculate_col_sizes_1.default)(ast);\n    const numRows = ast.length;\n    const numCols = colSizes.length;\n    // This is a template separator row, added in between each row\n    const sep = '+' + colSizes.map(elem => '-'.repeat(elem + 2)).join('+') + '+';\n    const header = buildGridHeaderRow(colSizes, colAlignment, hasHeader ? '=' : '-');\n    // Begin the table with a separator row\n    const rows = [];\n    if (hasHeader) {\n        rows.push(sep);\n    }\n    else {\n        // Custom header row (similar to below, but with '-' instead of '=')\n        rows.push(header);\n    }\n    // Now iterate over every row in the table\n    for (let row = 0; row < numRows; row++) {\n        // A single row in the AST can span multiple actual rows, delimited by \\n\n        const actualRows = calcRawCellRows(ast[row]);\n        // This is an inner table used to prepare the columns inside this row for\n        // stringification. We need to pre-fill it as we have to pivot the cells\n        // from col/row to row/col ordering.\n        const innerAST = [];\n        for (let i = 0; i < actualRows; i++) {\n            const innerRow = [];\n            for (let j = 0; j < numCols; j++) {\n                innerRow.push(''); // Arbitrary, will be overwritten below\n            }\n            innerAST.push(innerRow);\n        }\n        // After the preparation, iterate over the columns inside the row\n        for (let col = 0; col < numCols; col++) {\n            // Split into the individual \"actual\" rows of the cell, and pad to the\n            // full length\n            let splitCell = ast[row][col].split('\\n');\n            while (splitCell.length < actualRows) {\n                splitCell.push('');\n            }\n            // Now, pad each \"split\" cell accordingly\n            splitCell = splitCell.map(c => ' ' + c.padEnd(colSizes[col]) + ' ');\n            // Now add all parts of the given cell to the inner table. Here, we pivot\n            // the data from [col][row] to [row][col]\n            for (let i = 0; i < actualRows; i++) {\n                innerAST[i][col] = splitCell[i];\n            }\n        }\n        // At this point we have one or more actual rows we have to build. The\n        // contents are already correctly padded and stored as [row][col] arrays\n        for (const rawRow of innerAST) {\n            rows.push('|' + rawRow.join('|') + '|');\n        }\n        // After the first (logical) row we need a header row, which we build here.\n        if (row === 0 && hasHeader) {\n            rows.push(header);\n        }\n        else {\n            // All other lines are followed by a separator.\n            rows.push(sep);\n        }\n    }\n    return rows.join('\\n');\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"34395e50453d7b2db62e6b0382763f0fcc8af134","contentHash":"01d3bb62141a51d4c3f378b61d283e896392d753d1612c345df6bfafb19d3627"},"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-editor\\table-editor\\calculate-col-sizes.ts":{"path":"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-editor\\table-editor\\calculate-col-sizes.ts","statementMap":{"0":{"start":{"line":16,"column":0},"end":{"line":16,"column":62}},"1":{"start":{"line":17,"column":0},"end":{"line":17,"column":36}},"2":{"start":{"line":26,"column":18},"end":{"line":26,"column":20}},"3":{"start":{"line":27,"column":4},"end":{"line":41,"column":5}},"4":{"start":{"line":27,"column":19},"end":{"line":27,"column":20}},"5":{"start":{"line":28,"column":22},"end":{"line":28,"column":23}},"6":{"start":{"line":29,"column":8},"end":{"line":39,"column":9}},"7":{"start":{"line":29,"column":23},"end":{"line":29,"column":24}},"8":{"start":{"line":30,"column":25},"end":{"line":30,"column":38}},"9":{"start":{"line":31,"column":29},"end":{"line":31,"column":40}},"10":{"start":{"line":32,"column":12},"end":{"line":35,"column":13}},"11":{"start":{"line":34,"column":16},"end":{"line":34,"column":78}},"12":{"start":{"line":34,"column":67},"end":{"line":34,"column":75}},"13":{"start":{"line":36,"column":12},"end":{"line":38,"column":13}},"14":{"start":{"line":37,"column":16},"end":{"line":37,"column":37}},"15":{"start":{"line":40,"column":8},"end":{"line":40,"column":28}},"16":{"start":{"line":42,"column":4},"end":{"line":42,"column":17}}},"fnMap":{"0":{"name":"calculateColSizes","decl":{"start":{"line":25,"column":9},"end":{"line":25,"column":26}},"loc":{"start":{"line":25,"column":32},"end":{"line":43,"column":1}},"line":25},"1":{"name":"(anonymous_1)","decl":{"start":{"line":34,"column":62},"end":{"line":34,"column":63}},"loc":{"start":{"line":34,"column":67},"end":{"line":34,"column":75}},"line":34}},"branchMap":{"0":{"loc":{"start":{"line":32,"column":12},"end":{"line":35,"column":13}},"type":"if","locations":[{"start":{"line":32,"column":12},"end":{"line":35,"column":13}},{"start":{},"end":{}}],"line":32},"1":{"loc":{"start":{"line":36,"column":12},"end":{"line":38,"column":13}},"type":"if","locations":[{"start":{"line":36,"column":12},"end":{"line":38,"column":13}},{"start":{},"end":{}}],"line":36}},"s":{"0":1,"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"f":{"0":0,"1":0},"b":{"0":[0,0],"1":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-editor/table-editor/calculate-col-sizes.ts","sources":["C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-editor/table-editor/calculate-col-sizes.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb;;;;;;;;;;;;;EAaE;AACF,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9D,OAAO,CAAC,OAAO,GAAG,iBAAiB,CAAC;AACpC;;;;;;GAMG;AACH,SAAS,iBAAiB,CAAC,GAAG;IAC1B,MAAM,KAAK,GAAG,EAAE,CAAC;IACjB,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC;QAC3C,IAAI,OAAO,GAAG,CAAC,CAAC;QAChB,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC;YACxC,MAAM,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;YAC3B,IAAI,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC;YAC7B,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;gBACtB,6DAA6D;gBAC7D,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YAClE,CAAC;YACD,IAAI,UAAU,GAAG,OAAO,EAAE,CAAC;gBACvB,OAAO,GAAG,UAAU,CAAC;YACzB,CAAC;QACL,CAAC;QACD,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACxB,CAAC;IACD,OAAO,KAAK,CAAC;AACjB,CAAC","sourcesContent":["\"use strict\";\n/**\n* @ignore\n* BEGIN HEADER\n*\n* Contains:        Utility function\n* CVM-Role:        Utility\n* Maintainer:      Hendrik Erz\n* License:         GNU GPL v3\n*\n* Description:     This function takes a table AST and calculates, for each\n*                  column, the maximum amount of characters.\n*\n* END HEADER\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = calculateColSizes;\n/**\n * Calculates the maximum size (characters) of each column of a table AST\n *\n * @param   {string[][]}  ast  The AST\n *\n * @return  {number[]}       The maximum sizes for all columns\n */\nfunction calculateColSizes(ast) {\n    const sizes = [];\n    for (let col = 0; col < ast[0].length; col++) {\n        let colSize = 0;\n        for (let row = 0; row < ast.length; row++) {\n            const cell = ast[row][col];\n            let cellLength = cell.length;\n            if (cell.includes('\\n')) {\n                // Multi-line cell -> take the longest of the containing rows\n                cellLength = Math.max(...cell.split('\\n').map(x => x.length));\n            }\n            if (cellLength > colSize) {\n                colSize = cellLength;\n            }\n        }\n        sizes.push(colSize);\n    }\n    return sizes;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzovVXNlcnMvSm9zaCBFL0RvY3VtZW50cy9aZXR0bHItc3dlbmc0MzEvc291cmNlL2NvbW1vbi9tb2R1bGVzL21hcmtkb3duLWVkaXRvci90YWJsZS1lZGl0b3IvY2FsY3VsYXRlLWNvbC1zaXplcy50cyIsInNvdXJjZXMiOlsiQzovVXNlcnMvSm9zaCBFL0RvY3VtZW50cy9aZXR0bHItc3dlbmc0MzEvc291cmNlL2NvbW1vbi9tb2R1bGVzL21hcmtkb3duLWVkaXRvci90YWJsZS1lZGl0b3IvY2FsY3VsYXRlLWNvbC1zaXplcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7RUFhRTs7QUFTRixvQ0FtQkM7QUExQkQ7Ozs7OztHQU1HO0FBQ0gsU0FBd0IsaUJBQWlCLENBQUUsR0FBZTtJQUN4RCxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUE7SUFDaEIsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQztRQUM3QyxJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUE7UUFDZixLQUFLLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDO1lBQzFDLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUMxQixJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFBO1lBQzVCLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO2dCQUN4Qiw2REFBNkQ7Z0JBQzdELFVBQVUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQTtZQUMvRCxDQUFDO1lBRUQsSUFBSSxVQUFVLEdBQUcsT0FBTyxFQUFFLENBQUM7Z0JBQ3pCLE9BQU8sR0FBRyxVQUFVLENBQUE7WUFDdEIsQ0FBQztRQUNILENBQUM7UUFDRCxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ3JCLENBQUM7SUFDRCxPQUFPLEtBQUssQ0FBQTtBQUNkLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuKiBAaWdub3JlXHJcbiogQkVHSU4gSEVBREVSXHJcbipcclxuKiBDb250YWluczogICAgICAgIFV0aWxpdHkgZnVuY3Rpb25cclxuKiBDVk0tUm9sZTogICAgICAgIFV0aWxpdHlcclxuKiBNYWludGFpbmVyOiAgICAgIEhlbmRyaWsgRXJ6XHJcbiogTGljZW5zZTogICAgICAgICBHTlUgR1BMIHYzXHJcbipcclxuKiBEZXNjcmlwdGlvbjogICAgIFRoaXMgZnVuY3Rpb24gdGFrZXMgYSB0YWJsZSBBU1QgYW5kIGNhbGN1bGF0ZXMsIGZvciBlYWNoXHJcbiogICAgICAgICAgICAgICAgICBjb2x1bW4sIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBjaGFyYWN0ZXJzLlxyXG4qXHJcbiogRU5EIEhFQURFUlxyXG4qL1xyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIG1heGltdW0gc2l6ZSAoY2hhcmFjdGVycykgb2YgZWFjaCBjb2x1bW4gb2YgYSB0YWJsZSBBU1RcclxuICpcclxuICogQHBhcmFtICAge3N0cmluZ1tdW119ICBhc3QgIFRoZSBBU1RcclxuICpcclxuICogQHJldHVybiAge251bWJlcltdfSAgICAgICBUaGUgbWF4aW11bSBzaXplcyBmb3IgYWxsIGNvbHVtbnNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNhbGN1bGF0ZUNvbFNpemVzIChhc3Q6IHN0cmluZ1tdW10pOiBudW1iZXJbXSB7XHJcbiAgY29uc3Qgc2l6ZXMgPSBbXVxyXG4gIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8IGFzdFswXS5sZW5ndGg7IGNvbCsrKSB7XHJcbiAgICBsZXQgY29sU2l6ZSA9IDBcclxuICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IGFzdC5sZW5ndGg7IHJvdysrKSB7XHJcbiAgICAgIGNvbnN0IGNlbGwgPSBhc3Rbcm93XVtjb2xdXHJcbiAgICAgIGxldCBjZWxsTGVuZ3RoID0gY2VsbC5sZW5ndGhcclxuICAgICAgaWYgKGNlbGwuaW5jbHVkZXMoJ1xcbicpKSB7XHJcbiAgICAgICAgLy8gTXVsdGktbGluZSBjZWxsIC0+IHRha2UgdGhlIGxvbmdlc3Qgb2YgdGhlIGNvbnRhaW5pbmcgcm93c1xyXG4gICAgICAgIGNlbGxMZW5ndGggPSBNYXRoLm1heCguLi5jZWxsLnNwbGl0KCdcXG4nKS5tYXAoeCA9PiB4Lmxlbmd0aCkpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChjZWxsTGVuZ3RoID4gY29sU2l6ZSkge1xyXG4gICAgICAgIGNvbFNpemUgPSBjZWxsTGVuZ3RoXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHNpemVzLnB1c2goY29sU2l6ZSlcclxuICB9XHJcbiAgcmV0dXJuIHNpemVzXHJcbn1cclxuIl19"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d587becf2522cc62b3c6ad50b1eeae0138e3de79","contentHash":"3acf4831180027df08f6cfb65ad054aae148714941be4b15508adf1394e87f72"},"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-editor\\table-editor\\build-pipe.ts":{"path":"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-editor\\table-editor\\build-pipe.ts","statementMap":{"0":{"start":{"line":18,"column":22},"end":{"line":20,"column":1}},"1":{"start":{"line":19,"column":4},"end":{"line":19,"column":62}},"2":{"start":{"line":21,"column":0},"end":{"line":21,"column":62}},"3":{"start":{"line":22,"column":0},"end":{"line":22,"column":33}},"4":{"start":{"line":23,"column":30},"end":{"line":23,"column":79}},"5":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"6":{"start":{"line":26,"column":8},"end":{"line":26,"column":81}},"7":{"start":{"line":29,"column":21},"end":{"line":29,"column":60}},"8":{"start":{"line":31,"column":17},"end":{"line":41,"column":6}},"9":{"start":{"line":32,"column":28},"end":{"line":39,"column":22}},"10":{"start":{"line":33,"column":12},"end":{"line":38,"column":13}},"11":{"start":{"line":34,"column":16},"end":{"line":34,"column":56}},"12":{"start":{"line":37,"column":16},"end":{"line":37,"column":54}},"13":{"start":{"line":40,"column":8},"end":{"line":40,"column":36}},"14":{"start":{"line":43,"column":30},"end":{"line":53,"column":16}},"15":{"start":{"line":44,"column":8},"end":{"line":52,"column":9}},"16":{"start":{"line":45,"column":12},"end":{"line":45,"column":40}},"17":{"start":{"line":47,"column":13},"end":{"line":52,"column":9}},"18":{"start":{"line":48,"column":12},"end":{"line":48,"column":48}},"19":{"start":{"line":51,"column":12},"end":{"line":51,"column":46}},"20":{"start":{"line":54,"column":22},"end":{"line":54,"column":46}},"21":{"start":{"line":55,"column":4},"end":{"line":55,"column":33}},"22":{"start":{"line":56,"column":4},"end":{"line":56,"column":27}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":18,"column":56},"end":{"line":18,"column":57}},"loc":{"start":{"line":18,"column":71},"end":{"line":20,"column":1}},"line":18},"1":{"name":"buildPipeTable","decl":{"start":{"line":24,"column":9},"end":{"line":24,"column":23}},"loc":{"start":{"line":24,"column":43},"end":{"line":57,"column":1}},"line":24},"2":{"name":"(anonymous_2)","decl":{"start":{"line":31,"column":25},"end":{"line":31,"column":26}},"loc":{"start":{"line":31,"column":32},"end":{"line":41,"column":5}},"line":31},"3":{"name":"(anonymous_3)","decl":{"start":{"line":32,"column":36},"end":{"line":32,"column":37}},"loc":{"start":{"line":32,"column":50},"end":{"line":39,"column":9}},"line":32},"4":{"name":"(anonymous_4)","decl":{"start":{"line":43,"column":43},"end":{"line":43,"column":44}},"loc":{"start":{"line":43,"column":58},"end":{"line":53,"column":5}},"line":43}},"branchMap":{"0":{"loc":{"start":{"line":18,"column":22},"end":{"line":20,"column":1}},"type":"binary-expr","locations":[{"start":{"line":18,"column":23},"end":{"line":18,"column":27}},{"start":{"line":18,"column":31},"end":{"line":18,"column":51}},{"start":{"line":18,"column":56},"end":{"line":20,"column":1}}],"line":18},"1":{"loc":{"start":{"line":19,"column":11},"end":{"line":19,"column":61}},"type":"cond-expr","locations":[{"start":{"line":19,"column":37},"end":{"line":19,"column":40}},{"start":{"line":19,"column":43},"end":{"line":19,"column":61}}],"line":19},"2":{"loc":{"start":{"line":19,"column":12},"end":{"line":19,"column":33}},"type":"binary-expr","locations":[{"start":{"line":19,"column":12},"end":{"line":19,"column":15}},{"start":{"line":19,"column":19},"end":{"line":19,"column":33}}],"line":19},"3":{"loc":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},{"start":{},"end":{}}],"line":25},"4":{"loc":{"start":{"line":33,"column":12},"end":{"line":38,"column":13}},"type":"if","locations":[{"start":{"line":33,"column":12},"end":{"line":38,"column":13}},{"start":{"line":36,"column":17},"end":{"line":38,"column":13}}],"line":33},"5":{"loc":{"start":{"line":44,"column":8},"end":{"line":52,"column":9}},"type":"if","locations":[{"start":{"line":44,"column":8},"end":{"line":52,"column":9}},{"start":{"line":47,"column":13},"end":{"line":52,"column":9}}],"line":44},"6":{"loc":{"start":{"line":47,"column":13},"end":{"line":52,"column":9}},"type":"if","locations":[{"start":{"line":47,"column":13},"end":{"line":52,"column":9}},{"start":{"line":50,"column":13},"end":{"line":52,"column":9}}],"line":47}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},"f":{"0":1,"1":0,"2":0,"3":0,"4":0},"b":{"0":[1,1,1],"1":[1,0],"2":[1,1],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-editor/table-editor/build-pipe.ts","sources":["C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-editor/table-editor/build-pipe.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb;;;;;;;;;;;;;;;GAeG;AACH,IAAI,eAAe,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,UAAU,GAAG;IACjE,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC;AAC9D,CAAC,CAAC;AACF,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9D,OAAO,CAAC,OAAO,GAAG,cAAc,CAAC;AACjC,MAAM,qBAAqB,GAAG,eAAe,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC,CAAC;AAChF,SAAS,cAAc,CAAC,GAAG,EAAE,YAAY;IACrC,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QACjB,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;IAC7E,CAAC;IACD,oCAAoC;IACpC,MAAM,QAAQ,GAAG,CAAC,CAAC,EAAE,qBAAqB,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;IACzD,qDAAqD;IACrD,MAAM,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QACvB,MAAM,WAAW,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;YACrC,IAAI,YAAY,CAAC,GAAG,CAAC,KAAK,OAAO,EAAE,CAAC;gBAChC,OAAO,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;YAC5C,CAAC;iBACI,CAAC;gBACF,OAAO,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;YAC1C,CAAC;QACL,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACf,OAAO,KAAK,WAAW,IAAI,CAAC;IAChC,CAAC,CAAC,CAAC;IACH,qDAAqD;IACrD,MAAM,iBAAiB,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE;QACjD,IAAI,YAAY,CAAC,GAAG,CAAC,KAAK,MAAM,EAAE,CAAC;YAC/B,OAAO,GAAG,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;QAChC,CAAC;aACI,IAAI,YAAY,CAAC,GAAG,CAAC,KAAK,QAAQ,EAAE,CAAC;YACtC,OAAO,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;QACxC,CAAC;aACI,CAAC;YACF,OAAO,GAAG,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;QACtC,CAAC;IACL,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACb,MAAM,SAAS,GAAG,IAAI,iBAAiB,GAAG,CAAC;IAC3C,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;IAC7B,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC3B,CAAC","sourcesContent":["\"use strict\";\n/**\n * @ignore\n * BEGIN HEADER\n *\n * Contains:        TableHelper utility function\n * CVM-Role:        Utility\n * Maintainer:      Hendrik Erz\n * License:         GNU GPL v3\n *\n * Description:     This parser transforms pipe tables as specified\n *                  in the Pandoc manual into an AST and returns both\n *                  that and the column alignments.\n *                  Cf. https://pandoc.org/MANUAL.html#tables\n *\n * END HEADER\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = buildPipeTable;\nconst calculate_col_sizes_1 = __importDefault(require(\"./calculate-col-sizes\"));\nfunction buildPipeTable(ast, colAlignment) {\n    if (ast.length < 2) {\n        throw new Error('Cannot build pipe table: Must have at least two rows.');\n    }\n    // First, calculate the column sizes\n    const colSizes = (0, calculate_col_sizes_1.default)(ast);\n    // Then, build the table in a quick MapReduce fashion\n    const rows = ast.map(row => {\n        const rowContents = row.map((col, idx) => {\n            if (colAlignment[idx] === 'right') {\n                return col.padStart(colSizes[idx], ' ');\n            }\n            else {\n                return col.padEnd(colSizes[idx], ' ');\n            }\n        }).join(' | ');\n        return `| ${rowContents} |`;\n    });\n    // Finally, insert the required header row at index 2\n    const headerRowContents = colSizes.map((size, idx) => {\n        if (colAlignment[idx] === 'left') {\n            return '-'.repeat(size + 2);\n        }\n        else if (colAlignment[idx] === 'center') {\n            return ':' + '-'.repeat(size) + ':';\n        }\n        else {\n            return '-'.repeat(size + 1) + ':';\n        }\n    }).join('|');\n    const headerRow = `|${headerRowContents}|`;\n    rows.splice(1, 0, headerRow);\n    return rows.join('\\n');\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzovVXNlcnMvSm9zaCBFL0RvY3VtZW50cy9aZXR0bHItc3dlbmc0MzEvc291cmNlL2NvbW1vbi9tb2R1bGVzL21hcmtkb3duLWVkaXRvci90YWJsZS1lZGl0b3IvYnVpbGQtcGlwZS50cyIsInNvdXJjZXMiOlsiQzovVXNlcnMvSm9zaCBFL0RvY3VtZW50cy9aZXR0bHItc3dlbmc0MzEvc291cmNlL2NvbW1vbi9tb2R1bGVzL21hcmtkb3duLWVkaXRvci90YWJsZS1lZGl0b3IvYnVpbGQtcGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHOzs7OztBQUtILGlDQW1DQztBQXRDRCxnRkFBcUQ7QUFHckQsU0FBd0IsY0FBYyxDQUFFLEdBQWUsRUFBRSxZQUE0QjtJQUNuRixJQUFJLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDbkIsTUFBTSxJQUFJLEtBQUssQ0FBQyx1REFBdUQsQ0FBQyxDQUFBO0lBQzFFLENBQUM7SUFFRCxvQ0FBb0M7SUFDcEMsTUFBTSxRQUFRLEdBQUcsSUFBQSw2QkFBaUIsRUFBQyxHQUFHLENBQUMsQ0FBQTtJQUV2QyxxREFBcUQ7SUFDckQsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUN6QixNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQ3ZDLElBQUksWUFBWSxDQUFDLEdBQUcsQ0FBQyxLQUFLLE9BQU8sRUFBRSxDQUFDO2dCQUNsQyxPQUFPLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1lBQ3pDLENBQUM7aUJBQU0sQ0FBQztnQkFDTixPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1lBQ3ZDLENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDZCxPQUFPLEtBQUssV0FBVyxJQUFJLENBQUE7SUFDN0IsQ0FBQyxDQUFDLENBQUE7SUFFRixxREFBcUQ7SUFDckQsTUFBTSxpQkFBaUIsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQ25ELElBQUksWUFBWSxDQUFDLEdBQUcsQ0FBQyxLQUFLLE1BQU0sRUFBRSxDQUFDO1lBQ2pDLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUE7UUFDN0IsQ0FBQzthQUFNLElBQUksWUFBWSxDQUFDLEdBQUcsQ0FBQyxLQUFLLFFBQVEsRUFBRSxDQUFDO1lBQzFDLE9BQU8sR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFBO1FBQ3JDLENBQUM7YUFBTSxDQUFDO1lBQ04sT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUE7UUFDbkMsQ0FBQztJQUNILENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUVaLE1BQU0sU0FBUyxHQUFHLElBQUksaUJBQWlCLEdBQUcsQ0FBQTtJQUMxQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUE7SUFFNUIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ3hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGlnbm9yZVxyXG4gKiBCRUdJTiBIRUFERVJcclxuICpcclxuICogQ29udGFpbnM6ICAgICAgICBUYWJsZUhlbHBlciB1dGlsaXR5IGZ1bmN0aW9uXHJcbiAqIENWTS1Sb2xlOiAgICAgICAgVXRpbGl0eVxyXG4gKiBNYWludGFpbmVyOiAgICAgIEhlbmRyaWsgRXJ6XHJcbiAqIExpY2Vuc2U6ICAgICAgICAgR05VIEdQTCB2M1xyXG4gKlxyXG4gKiBEZXNjcmlwdGlvbjogICAgIFRoaXMgcGFyc2VyIHRyYW5zZm9ybXMgcGlwZSB0YWJsZXMgYXMgc3BlY2lmaWVkXHJcbiAqICAgICAgICAgICAgICAgICAgaW4gdGhlIFBhbmRvYyBtYW51YWwgaW50byBhbiBBU1QgYW5kIHJldHVybnMgYm90aFxyXG4gKiAgICAgICAgICAgICAgICAgIHRoYXQgYW5kIHRoZSBjb2x1bW4gYWxpZ25tZW50cy5cclxuICogICAgICAgICAgICAgICAgICBDZi4gaHR0cHM6Ly9wYW5kb2Mub3JnL01BTlVBTC5odG1sI3RhYmxlc1xyXG4gKlxyXG4gKiBFTkQgSEVBREVSXHJcbiAqL1xyXG5cclxuaW1wb3J0IGNhbGN1bGF0ZUNvbFNpemVzIGZyb20gJy4vY2FsY3VsYXRlLWNvbC1zaXplcydcclxuaW1wb3J0IHR5cGUgeyBDb2xBbGlnbm1lbnQgfSBmcm9tICcuL3R5cGVzJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRQaXBlVGFibGUgKGFzdDogc3RyaW5nW11bXSwgY29sQWxpZ25tZW50OiBDb2xBbGlnbm1lbnRbXSk6IHN0cmluZyB7XHJcbiAgaWYgKGFzdC5sZW5ndGggPCAyKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBidWlsZCBwaXBlIHRhYmxlOiBNdXN0IGhhdmUgYXQgbGVhc3QgdHdvIHJvd3MuJylcclxuICB9XHJcblxyXG4gIC8vIEZpcnN0LCBjYWxjdWxhdGUgdGhlIGNvbHVtbiBzaXplc1xyXG4gIGNvbnN0IGNvbFNpemVzID0gY2FsY3VsYXRlQ29sU2l6ZXMoYXN0KVxyXG5cclxuICAvLyBUaGVuLCBidWlsZCB0aGUgdGFibGUgaW4gYSBxdWljayBNYXBSZWR1Y2UgZmFzaGlvblxyXG4gIGNvbnN0IHJvd3MgPSBhc3QubWFwKHJvdyA9PiB7XHJcbiAgICBjb25zdCByb3dDb250ZW50cyA9IHJvdy5tYXAoKGNvbCwgaWR4KSA9PiB7XHJcbiAgICAgIGlmIChjb2xBbGlnbm1lbnRbaWR4XSA9PT0gJ3JpZ2h0Jykge1xyXG4gICAgICAgIHJldHVybiBjb2wucGFkU3RhcnQoY29sU2l6ZXNbaWR4XSwgJyAnKVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBjb2wucGFkRW5kKGNvbFNpemVzW2lkeF0sICcgJylcclxuICAgICAgfVxyXG4gICAgfSkuam9pbignIHwgJylcclxuICAgIHJldHVybiBgfCAke3Jvd0NvbnRlbnRzfSB8YFxyXG4gIH0pXHJcblxyXG4gIC8vIEZpbmFsbHksIGluc2VydCB0aGUgcmVxdWlyZWQgaGVhZGVyIHJvdyBhdCBpbmRleCAyXHJcbiAgY29uc3QgaGVhZGVyUm93Q29udGVudHMgPSBjb2xTaXplcy5tYXAoKHNpemUsIGlkeCkgPT4ge1xyXG4gICAgaWYgKGNvbEFsaWdubWVudFtpZHhdID09PSAnbGVmdCcpIHtcclxuICAgICAgcmV0dXJuICctJy5yZXBlYXQoc2l6ZSArIDIpXHJcbiAgICB9IGVsc2UgaWYgKGNvbEFsaWdubWVudFtpZHhdID09PSAnY2VudGVyJykge1xyXG4gICAgICByZXR1cm4gJzonICsgJy0nLnJlcGVhdChzaXplKSArICc6J1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuICctJy5yZXBlYXQoc2l6ZSArIDEpICsgJzonXHJcbiAgICB9XHJcbiAgfSkuam9pbignfCcpXHJcblxyXG4gIGNvbnN0IGhlYWRlclJvdyA9IGB8JHtoZWFkZXJSb3dDb250ZW50c318YFxyXG4gIHJvd3Muc3BsaWNlKDEsIDAsIGhlYWRlclJvdylcclxuXHJcbiAgcmV0dXJuIHJvd3Muam9pbignXFxuJylcclxufVxyXG4iXX0="]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"4186f379c3ea7f2e1d0c9725db05849fbcb0154b","contentHash":"fbb215b38e4e7f56e9d4cbd5bdd79cc806280195eba7ae7f10b0ea183e01ed2d"},"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\util\\compile-search-terms.ts":{"path":"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\util\\compile-search-terms.ts","statementMap":{"0":{"start":{"line":19,"column":0},"end":{"line":19,"column":62}},"1":{"start":{"line":20,"column":0},"end":{"line":20,"column":37}},"2":{"start":{"line":23,"column":20},"end":{"line":23,"column":22}},"3":{"start":{"line":24,"column":18},"end":{"line":24,"column":20}},"4":{"start":{"line":25,"column":19},"end":{"line":25,"column":24}},"5":{"start":{"line":26,"column":19},"end":{"line":26,"column":24}},"6":{"start":{"line":27,"column":4},"end":{"line":77,"column":5}},"7":{"start":{"line":27,"column":17},"end":{"line":27,"column":18}},"8":{"start":{"line":28,"column":18},"end":{"line":28,"column":32}},"9":{"start":{"line":29,"column":8},"end":{"line":75,"column":9}},"10":{"start":{"line":31,"column":12},"end":{"line":35,"column":13}},"11":{"start":{"line":32,"column":16},"end":{"line":32,"column":68}},"12":{"start":{"line":33,"column":16},"end":{"line":33,"column":29}},"13":{"start":{"line":34,"column":16},"end":{"line":34,"column":33}},"14":{"start":{"line":36,"column":12},"end":{"line":36,"column":21}},"15":{"start":{"line":38,"column":13},"end":{"line":75,"column":9}},"16":{"start":{"line":41,"column":12},"end":{"line":43,"column":13}},"17":{"start":{"line":42,"column":16},"end":{"line":42,"column":20}},"18":{"start":{"line":48,"column":12},"end":{"line":51,"column":13}},"19":{"start":{"line":49,"column":16},"end":{"line":49,"column":60}},"20":{"start":{"line":50,"column":16},"end":{"line":50,"column":32}},"21":{"start":{"line":52,"column":12},"end":{"line":52,"column":21}},"22":{"start":{"line":54,"column":13},"end":{"line":75,"column":9}},"23":{"start":{"line":55,"column":12},"end":{"line":66,"column":13}},"24":{"start":{"line":57,"column":16},"end":{"line":57,"column":32}},"25":{"start":{"line":60,"column":16},"end":{"line":60,"column":33}},"26":{"start":{"line":63,"column":16},"end":{"line":63,"column":61}},"27":{"start":{"line":64,"column":16},"end":{"line":64,"column":29}},"28":{"start":{"line":65,"column":16},"end":{"line":65,"column":33}},"29":{"start":{"line":67,"column":12},"end":{"line":67,"column":21}},"30":{"start":{"line":69,"column":13},"end":{"line":75,"column":9}},"31":{"start":{"line":73,"column":12},"end":{"line":73,"column":29}},"32":{"start":{"line":74,"column":12},"end":{"line":74,"column":21}},"33":{"start":{"line":76,"column":8},"end":{"line":76,"column":34}},"34":{"start":{"line":80,"column":4},"end":{"line":82,"column":5}},"35":{"start":{"line":81,"column":8},"end":{"line":81,"column":60}},"36":{"start":{"line":85,"column":20},"end":{"line":88,"column":5}},"37":{"start":{"line":89,"column":21},"end":{"line":89,"column":23}},"38":{"start":{"line":90,"column":4},"end":{"line":102,"column":5}},"39":{"start":{"line":90,"column":17},"end":{"line":90,"column":18}},"40":{"start":{"line":91,"column":8},"end":{"line":101,"column":9}},"41":{"start":{"line":92,"column":12},"end":{"line":96,"column":13}},"42":{"start":{"line":94,"column":16},"end":{"line":94,"column":41}},"43":{"start":{"line":95,"column":16},"end":{"line":95,"column":58}},"44":{"start":{"line":97,"column":12},"end":{"line":97,"column":38}},"45":{"start":{"line":100,"column":12},"end":{"line":100,"column":71}},"46":{"start":{"line":104,"column":4},"end":{"line":106,"column":5}},"47":{"start":{"line":105,"column":8},"end":{"line":105,"column":33}},"48":{"start":{"line":107,"column":4},"end":{"line":107,"column":20}}},"fnMap":{"0":{"name":"compileSearchTerms","decl":{"start":{"line":21,"column":9},"end":{"line":21,"column":27}},"loc":{"start":{"line":21,"column":34},"end":{"line":108,"column":1}},"line":21}},"branchMap":{"0":{"loc":{"start":{"line":29,"column":8},"end":{"line":75,"column":9}},"type":"if","locations":[{"start":{"line":29,"column":8},"end":{"line":75,"column":9}},{"start":{"line":38,"column":13},"end":{"line":75,"column":9}}],"line":29},"1":{"loc":{"start":{"line":29,"column":12},"end":{"line":29,"column":34}},"type":"binary-expr","locations":[{"start":{"line":29,"column":12},"end":{"line":29,"column":21}},{"start":{"line":29,"column":25},"end":{"line":29,"column":34}}],"line":29},"2":{"loc":{"start":{"line":31,"column":12},"end":{"line":35,"column":13}},"type":"if","locations":[{"start":{"line":31,"column":12},"end":{"line":35,"column":13}},{"start":{},"end":{}}],"line":31},"3":{"loc":{"start":{"line":38,"column":13},"end":{"line":75,"column":9}},"type":"if","locations":[{"start":{"line":38,"column":13},"end":{"line":75,"column":9}},{"start":{"line":54,"column":13},"end":{"line":75,"column":9}}],"line":38},"4":{"loc":{"start":{"line":41,"column":12},"end":{"line":43,"column":13}},"type":"if","locations":[{"start":{"line":41,"column":12},"end":{"line":43,"column":13}},{"start":{},"end":{}}],"line":41},"5":{"loc":{"start":{"line":48,"column":12},"end":{"line":51,"column":13}},"type":"if","locations":[{"start":{"line":48,"column":12},"end":{"line":51,"column":13}},{"start":{},"end":{}}],"line":48},"6":{"loc":{"start":{"line":54,"column":13},"end":{"line":75,"column":9}},"type":"if","locations":[{"start":{"line":54,"column":13},"end":{"line":75,"column":9}},{"start":{"line":69,"column":13},"end":{"line":75,"column":9}}],"line":54},"7":{"loc":{"start":{"line":55,"column":12},"end":{"line":66,"column":13}},"type":"if","locations":[{"start":{"line":55,"column":12},"end":{"line":66,"column":13}},{"start":{"line":59,"column":17},"end":{"line":66,"column":13}}],"line":55},"8":{"loc":{"start":{"line":69,"column":13},"end":{"line":75,"column":9}},"type":"if","locations":[{"start":{"line":69,"column":13},"end":{"line":75,"column":9}},{"start":{},"end":{}}],"line":69},"9":{"loc":{"start":{"line":69,"column":17},"end":{"line":69,"column":57}},"type":"binary-expr","locations":[{"start":{"line":69,"column":17},"end":{"line":69,"column":26}},{"start":{"line":69,"column":30},"end":{"line":69,"column":39}},{"start":{"line":69,"column":43},"end":{"line":69,"column":57}}],"line":69},"10":{"loc":{"start":{"line":80,"column":4},"end":{"line":82,"column":5}},"type":"if","locations":[{"start":{"line":80,"column":4},"end":{"line":82,"column":5}},{"start":{},"end":{}}],"line":80},"11":{"loc":{"start":{"line":91,"column":8},"end":{"line":101,"column":9}},"type":"if","locations":[{"start":{"line":91,"column":8},"end":{"line":101,"column":9}},{"start":{"line":99,"column":13},"end":{"line":101,"column":9}}],"line":91},"12":{"loc":{"start":{"line":92,"column":12},"end":{"line":96,"column":13}},"type":"if","locations":[{"start":{"line":92,"column":12},"end":{"line":96,"column":13}},{"start":{},"end":{}}],"line":92},"13":{"loc":{"start":{"line":104,"column":4},"end":{"line":106,"column":5}},"type":"if","locations":[{"start":{"line":104,"column":4},"end":{"line":106,"column":5}},{"start":{},"end":{}}],"line":104}},"s":{"0":1,"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0},"f":{"0":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/util/compile-search-terms.ts","sources":["C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/util/compile-search-terms.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * BEGIN HEADER\n *\n * Contains:        Utility function\n * CVM-Role:        <none>\n * Maintainer:      Hendrik Erz\n * License:         GNU GPL v3\n *\n * Description:     This function compiles a string of search terms.\n *\n *                  Supported operators:\n *                  * AND (space)\n *                  * OR (pipe, |)\n *                  * NOT (exclamation mark, !)\n *\n * END HEADER\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = compileSearchTerms;\nfunction compileSearchTerms(term) {\n    // First sanitize the terms\n    const myTerms = [];\n    let curWord = '';\n    let hasExact = false;\n    let operator = 'AND';\n    for (let i = 0; i < term.length; i++) {\n        const c = term.charAt(i);\n        if (c === ' ' && !hasExact) {\n            // Spaces mark the end of one search term (except we're in an exact match)\n            if (curWord.trim() !== '') {\n                myTerms.push({ words: [curWord.trim()], operator });\n                curWord = '';\n                operator = 'AND'; // Reset the operator\n            }\n            continue;\n        }\n        else if (c === '|') {\n            // We got an OR operator\n            // If the next character is a space, we can use a shortcut here\n            if (term.charAt(i + 1) === ' ') {\n                ++i;\n            }\n            // We know additionally know that the previous operator was an or. But\n            // let's check that the user hasn't accidentally deleted one OR-word and\n            // now their current search STARTS with a pipe character. If not, we will\n            // disregard this OR character and treat what's coming as an AND\n            if (myTerms.length > 0) {\n                myTerms[myTerms.length - 1].operator = 'OR';\n                operator = 'OR';\n            }\n            continue;\n        }\n        else if (c === '\"') {\n            if (!hasExact) {\n                // Begin an exact phrase\n                hasExact = true;\n            }\n            else {\n                hasExact = false;\n                // Do not trim the word to account for trailing and\n                // ending whitespace within an exact capturing group\n                myTerms.push({ words: [curWord], operator });\n                curWord = '';\n                operator = 'AND';\n            }\n            continue;\n        }\n        else if (c === '!' && !hasExact && curWord === '') {\n            // An exclamation mark only has meaning if it is preceeded\n            // by a space and not within an exact match. Preceeded by\n            // space is indicated by an empty curWord variable.\n            operator = 'NOT';\n            continue; // We don't want the ! in the term\n        }\n        curWord += term.charAt(i);\n    }\n    // Now that we're through the search terms, clean up\n    // If there is a last word (in most cases it should be), add it to the list\n    if (curWord.trim() !== '') {\n        myTerms.push({ words: [curWord.trim()], operator });\n    }\n    // Now pack together all consecutive ORs\n    // to make it easier for the search in the main process\n    let currentOr = {\n        operator: 'OR',\n        words: []\n    };\n    const newTerms = [];\n    for (let i = 0; i < myTerms.length; i++) {\n        if (myTerms[i].operator !== 'OR') {\n            if (currentOr.words.length > 0) {\n                // Duplicate object so that the words are retained\n                newTerms.push(currentOr);\n                currentOr = { operator: 'OR', words: [] };\n            }\n            newTerms.push(myTerms[i]);\n        }\n        else {\n            currentOr.words = currentOr.words.concat(myTerms[i].words);\n        }\n    }\n    // Now push the currentOr if not empty\n    if (currentOr.words.length > 0) {\n        newTerms.push(currentOr);\n    }\n    return newTerms;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"e84b4154f0746eaf171823b153ae33db08db3875","contentHash":"0c30748e4fbb8c6aaef8e25022e72874d80538ac555a11e110c251eeaa61a3e5"},"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-utils\\index.ts":{"path":"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-utils\\index.ts","statementMap":{"0":{"start":{"line":16,"column":22},"end":{"line":18,"column":1}},"1":{"start":{"line":17,"column":4},"end":{"line":17,"column":62}},"2":{"start":{"line":19,"column":0},"end":{"line":19,"column":62}},"3":{"start":{"line":20,"column":0},"end":{"line":20,"column":25}},"4":{"start":{"line":21,"column":0},"end":{"line":21,"column":38}},"5":{"start":{"line":22,"column":0},"end":{"line":22,"column":42}},"6":{"start":{"line":23,"column":0},"end":{"line":23,"column":44}},"7":{"start":{"line":24,"column":26},"end":{"line":24,"column":108}},"8":{"start":{"line":25,"column":23},"end":{"line":25,"column":48}},"9":{"start":{"line":26,"column":25},"end":{"line":26,"column":54}},"10":{"start":{"line":27,"column":0},"end":{"line":27,"column":121}},"11":{"start":{"line":27,"column":81},"end":{"line":27,"column":115}},"12":{"start":{"line":45,"column":4},"end":{"line":48,"column":5}},"13":{"start":{"line":46,"column":27},"end":{"line":46,"column":80}},"14":{"start":{"line":47,"column":8},"end":{"line":47,"column":38}},"15":{"start":{"line":49,"column":16},"end":{"line":49,"column":69}},"16":{"start":{"line":50,"column":4},"end":{"line":50,"column":15}},"17":{"start":{"line":65,"column":4},"end":{"line":67,"column":5}},"18":{"start":{"line":66,"column":8},"end":{"line":66,"column":18}},"19":{"start":{"line":68,"column":4},"end":{"line":96,"column":5}},"20":{"start":{"line":69,"column":8},"end":{"line":69,"column":21}},"21":{"start":{"line":71,"column":9},"end":{"line":96,"column":5}},"22":{"start":{"line":72,"column":26},"end":{"line":72,"column":28}},"23":{"start":{"line":73,"column":8},"end":{"line":75,"column":9}},"24":{"start":{"line":74,"column":12},"end":{"line":74,"column":87}},"25":{"start":{"line":76,"column":8},"end":{"line":76,"column":27}},"26":{"start":{"line":78,"column":9},"end":{"line":96,"column":5}},"27":{"start":{"line":79,"column":26},"end":{"line":79,"column":28}},"28":{"start":{"line":80,"column":8},"end":{"line":82,"column":9}},"29":{"start":{"line":81,"column":12},"end":{"line":81,"column":86}},"30":{"start":{"line":83,"column":8},"end":{"line":83,"column":27}},"31":{"start":{"line":85,"column":9},"end":{"line":96,"column":5}},"32":{"start":{"line":86,"column":26},"end":{"line":86,"column":28}},"33":{"start":{"line":87,"column":8},"end":{"line":91,"column":9}},"34":{"start":{"line":88,"column":12},"end":{"line":90,"column":13}},"35":{"start":{"line":89,"column":16},"end":{"line":89,"column":90}},"36":{"start":{"line":92,"column":8},"end":{"line":92,"column":27}},"37":{"start":{"line":95,"column":8},"end":{"line":95,"column":18}},"38":{"start":{"line":110,"column":4},"end":{"line":112,"column":5}},"39":{"start":{"line":111,"column":8},"end":{"line":111,"column":18}},"40":{"start":{"line":113,"column":20},"end":{"line":113,"column":22}},"41":{"start":{"line":114,"column":4},"end":{"line":147,"column":5}},"42":{"start":{"line":115,"column":8},"end":{"line":115,"column":28}},"43":{"start":{"line":117,"column":9},"end":{"line":147,"column":5}},"44":{"start":{"line":118,"column":8},"end":{"line":118,"column":34}},"45":{"start":{"line":120,"column":9},"end":{"line":147,"column":5}},"46":{"start":{"line":121,"column":8},"end":{"line":123,"column":9}},"47":{"start":{"line":122,"column":12},"end":{"line":122,"column":74}},"48":{"start":{"line":125,"column":9},"end":{"line":147,"column":5}},"49":{"start":{"line":126,"column":8},"end":{"line":126,"column":32}},"50":{"start":{"line":127,"column":8},"end":{"line":129,"column":9}},"51":{"start":{"line":128,"column":12},"end":{"line":128,"column":38}},"52":{"start":{"line":131,"column":9},"end":{"line":147,"column":5}},"53":{"start":{"line":132,"column":8},"end":{"line":134,"column":9}},"54":{"start":{"line":133,"column":12},"end":{"line":133,"column":73}},"55":{"start":{"line":136,"column":9},"end":{"line":147,"column":5}},"56":{"start":{"line":137,"column":8},"end":{"line":139,"column":9}},"57":{"start":{"line":138,"column":12},"end":{"line":138,"column":74}},"58":{"start":{"line":141,"column":9},"end":{"line":147,"column":5}},"59":{"start":{"line":142,"column":8},"end":{"line":146,"column":9}},"60":{"start":{"line":143,"column":12},"end":{"line":145,"column":13}},"61":{"start":{"line":144,"column":16},"end":{"line":144,"column":77}},"62":{"start":{"line":148,"column":4},"end":{"line":148,"column":21}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":16,"column":56},"end":{"line":16,"column":57}},"loc":{"start":{"line":16,"column":71},"end":{"line":18,"column":1}},"line":16},"1":{"name":"(anonymous_1)","decl":{"start":{"line":27,"column":67},"end":{"line":27,"column":68}},"loc":{"start":{"line":27,"column":79},"end":{"line":27,"column":117}},"line":27},"2":{"name":"markdownToAST","decl":{"start":{"line":44,"column":9},"end":{"line":44,"column":22}},"loc":{"start":{"line":44,"column":53},"end":{"line":51,"column":1}},"line":44},"3":{"name":"extractASTNodes","decl":{"start":{"line":64,"column":9},"end":{"line":64,"column":24}},"loc":{"start":{"line":64,"column":48},"end":{"line":97,"column":1}},"line":64},"4":{"name":"extractTextnodes","decl":{"start":{"line":109,"column":9},"end":{"line":109,"column":25}},"loc":{"start":{"line":109,"column":39},"end":{"line":149,"column":1}},"line":109}},"branchMap":{"0":{"loc":{"start":{"line":16,"column":22},"end":{"line":18,"column":1}},"type":"binary-expr","locations":[{"start":{"line":16,"column":23},"end":{"line":16,"column":27}},{"start":{"line":16,"column":31},"end":{"line":16,"column":51}},{"start":{"line":16,"column":56},"end":{"line":18,"column":1}}],"line":16},"1":{"loc":{"start":{"line":17,"column":11},"end":{"line":17,"column":61}},"type":"cond-expr","locations":[{"start":{"line":17,"column":37},"end":{"line":17,"column":40}},{"start":{"line":17,"column":43},"end":{"line":17,"column":61}}],"line":17},"2":{"loc":{"start":{"line":17,"column":12},"end":{"line":17,"column":33}},"type":"binary-expr","locations":[{"start":{"line":17,"column":12},"end":{"line":17,"column":15}},{"start":{"line":17,"column":19},"end":{"line":17,"column":33}}],"line":17},"3":{"loc":{"start":{"line":45,"column":4},"end":{"line":48,"column":5}},"type":"if","locations":[{"start":{"line":45,"column":4},"end":{"line":48,"column":5}},{"start":{},"end":{}}],"line":45},"4":{"loc":{"start":{"line":65,"column":4},"end":{"line":67,"column":5}},"type":"if","locations":[{"start":{"line":65,"column":4},"end":{"line":67,"column":5}},{"start":{},"end":{}}],"line":65},"5":{"loc":{"start":{"line":65,"column":8},"end":{"line":65,"column":44}},"type":"binary-expr","locations":[{"start":{"line":65,"column":8},"end":{"line":65,"column":28}},{"start":{"line":65,"column":32},"end":{"line":65,"column":44}}],"line":65},"6":{"loc":{"start":{"line":68,"column":4},"end":{"line":96,"column":5}},"type":"if","locations":[{"start":{"line":68,"column":4},"end":{"line":96,"column":5}},{"start":{"line":71,"column":9},"end":{"line":96,"column":5}}],"line":68},"7":{"loc":{"start":{"line":71,"column":9},"end":{"line":96,"column":5}},"type":"if","locations":[{"start":{"line":71,"column":9},"end":{"line":96,"column":5}},{"start":{"line":78,"column":9},"end":{"line":96,"column":5}}],"line":71},"8":{"loc":{"start":{"line":71,"column":13},"end":{"line":71,"column":147}},"type":"binary-expr","locations":[{"start":{"line":71,"column":13},"end":{"line":71,"column":39}},{"start":{"line":71,"column":43},"end":{"line":71,"column":67}},{"start":{"line":71,"column":71},"end":{"line":71,"column":94}},{"start":{"line":71,"column":98},"end":{"line":71,"column":120}},{"start":{"line":71,"column":124},"end":{"line":71,"column":147}}],"line":71},"9":{"loc":{"start":{"line":78,"column":9},"end":{"line":96,"column":5}},"type":"if","locations":[{"start":{"line":78,"column":9},"end":{"line":96,"column":5}},{"start":{"line":85,"column":9},"end":{"line":96,"column":5}}],"line":78},"10":{"loc":{"start":{"line":78,"column":13},"end":{"line":78,"column":68}},"type":"binary-expr","locations":[{"start":{"line":78,"column":13},"end":{"line":78,"column":39}},{"start":{"line":78,"column":43},"end":{"line":78,"column":68}}],"line":78},"11":{"loc":{"start":{"line":85,"column":9},"end":{"line":96,"column":5}},"type":"if","locations":[{"start":{"line":85,"column":9},"end":{"line":96,"column":5}},{"start":{"line":94,"column":9},"end":{"line":96,"column":5}}],"line":85},"12":{"loc":{"start":{"line":110,"column":4},"end":{"line":112,"column":5}},"type":"if","locations":[{"start":{"line":110,"column":4},"end":{"line":112,"column":5}},{"start":{},"end":{}}],"line":110},"13":{"loc":{"start":{"line":110,"column":8},"end":{"line":110,"column":44}},"type":"binary-expr","locations":[{"start":{"line":110,"column":8},"end":{"line":110,"column":28}},{"start":{"line":110,"column":32},"end":{"line":110,"column":44}}],"line":110},"14":{"loc":{"start":{"line":114,"column":4},"end":{"line":147,"column":5}},"type":"if","locations":[{"start":{"line":114,"column":4},"end":{"line":147,"column":5}},{"start":{"line":117,"column":9},"end":{"line":147,"column":5}}],"line":114},"15":{"loc":{"start":{"line":117,"column":9},"end":{"line":147,"column":5}},"type":"if","locations":[{"start":{"line":117,"column":9},"end":{"line":147,"column":5}},{"start":{"line":120,"column":9},"end":{"line":147,"column":5}}],"line":117},"16":{"loc":{"start":{"line":120,"column":9},"end":{"line":147,"column":5}},"type":"if","locations":[{"start":{"line":120,"column":9},"end":{"line":147,"column":5}},{"start":{"line":125,"column":9},"end":{"line":147,"column":5}}],"line":120},"17":{"loc":{"start":{"line":120,"column":13},"end":{"line":120,"column":94}},"type":"binary-expr","locations":[{"start":{"line":120,"column":13},"end":{"line":120,"column":39}},{"start":{"line":120,"column":43},"end":{"line":120,"column":67}},{"start":{"line":120,"column":71},"end":{"line":120,"column":94}}],"line":120},"18":{"loc":{"start":{"line":125,"column":9},"end":{"line":147,"column":5}},"type":"if","locations":[{"start":{"line":125,"column":9},"end":{"line":147,"column":5}},{"start":{"line":131,"column":9},"end":{"line":147,"column":5}}],"line":125},"19":{"loc":{"start":{"line":125,"column":13},"end":{"line":125,"column":56}},"type":"binary-expr","locations":[{"start":{"line":125,"column":13},"end":{"line":125,"column":33}},{"start":{"line":125,"column":37},"end":{"line":125,"column":56}}],"line":125},"20":{"loc":{"start":{"line":127,"column":8},"end":{"line":129,"column":9}},"type":"if","locations":[{"start":{"line":127,"column":8},"end":{"line":129,"column":9}},{"start":{},"end":{}}],"line":127},"21":{"loc":{"start":{"line":131,"column":9},"end":{"line":147,"column":5}},"type":"if","locations":[{"start":{"line":131,"column":9},"end":{"line":147,"column":5}},{"start":{"line":136,"column":9},"end":{"line":147,"column":5}}],"line":131},"22":{"loc":{"start":{"line":131,"column":13},"end":{"line":131,"column":68}},"type":"binary-expr","locations":[{"start":{"line":131,"column":13},"end":{"line":131,"column":39}},{"start":{"line":131,"column":43},"end":{"line":131,"column":68}}],"line":131},"23":{"loc":{"start":{"line":136,"column":9},"end":{"line":147,"column":5}},"type":"if","locations":[{"start":{"line":136,"column":9},"end":{"line":147,"column":5}},{"start":{"line":141,"column":9},"end":{"line":147,"column":5}}],"line":136},"24":{"loc":{"start":{"line":136,"column":13},"end":{"line":136,"column":62}},"type":"binary-expr","locations":[{"start":{"line":136,"column":13},"end":{"line":136,"column":35}},{"start":{"line":136,"column":39},"end":{"line":136,"column":62}}],"line":136},"25":{"loc":{"start":{"line":141,"column":9},"end":{"line":147,"column":5}},"type":"if","locations":[{"start":{"line":141,"column":9},"end":{"line":147,"column":5}},{"start":{},"end":{}}],"line":141}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0},"f":{"0":1,"1":0,"2":0,"3":0,"4":0},"b":{"0":[1,1,1],"1":[1,0],"2":[1,1],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0,0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-utils/index.ts","sources":["C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-utils/index.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb;;;;;;;;;;;;;GAaG;AACH,IAAI,eAAe,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,UAAU,GAAG;IACjE,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC;AAC9D,CAAC,CAAC;AACF,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9D,OAAO,CAAC,OAAO,GAAG,KAAK,CAAC,CAAC;AACzB,OAAO,CAAC,aAAa,GAAG,aAAa,CAAC;AACtC,OAAO,CAAC,eAAe,GAAG,eAAe,CAAC;AAC1C,OAAO,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;AAC5C,MAAM,iBAAiB,GAAG,eAAe,CAAC,OAAO,CAAC,wDAAwD,CAAC,CAAC,CAAC;AAC7G,MAAM,cAAc,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AACjD,IAAI,kBAAkB,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;AACvD,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,SAAS,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,GAAG,EAAE,cAAc,OAAO,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;AACzH;;;;;;;;;;;;;;;GAeG;AACH,SAAS,aAAa,CAAC,QAAQ,EAAE,IAAI,EAAE,YAAY;IAC/C,IAAI,IAAI,KAAK,SAAS,EAAE,CAAC;QACrB,MAAM,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC,EAAE,iBAAiB,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC;QACzE,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC;IACD,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,cAAc,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IAClE,OAAO,GAAG,CAAC;AACf,CAAC;AACD;;;;;;;;;;;GAWG;AACH,SAAS,eAAe,CAAC,GAAG,EAAE,QAAQ,EAAE,MAAM;IAC1C,IAAI,MAAM,KAAK,SAAS,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC;QACvC,OAAO,EAAE,CAAC;IACd,CAAC;IACD,IAAI,GAAG,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;QACxB,OAAO,CAAC,GAAG,CAAC,CAAC;IACjB,CAAC;SACI,IAAI,GAAG,CAAC,IAAI,KAAK,aAAa,IAAI,GAAG,CAAC,IAAI,KAAK,WAAW,IAAI,GAAG,CAAC,IAAI,KAAK,UAAU,IAAI,GAAG,CAAC,IAAI,KAAK,SAAS,IAAI,GAAG,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;QAC9I,IAAI,WAAW,GAAG,EAAE,CAAC;QACrB,KAAK,MAAM,KAAK,IAAI,GAAG,CAAC,QAAQ,EAAE,CAAC;YAC/B,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,eAAe,CAAC,KAAK,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;QAC/E,CAAC;QACD,OAAO,WAAW,CAAC;IACvB,CAAC;SACI,IAAI,GAAG,CAAC,IAAI,KAAK,aAAa,IAAI,GAAG,CAAC,IAAI,KAAK,YAAY,EAAE,CAAC;QAC/D,IAAI,WAAW,GAAG,EAAE,CAAC;QACrB,KAAK,MAAM,IAAI,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;YAC3B,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;QAC9E,CAAC;QACD,OAAO,WAAW,CAAC;IACvB,CAAC;SACI,IAAI,GAAG,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;QAC5B,IAAI,WAAW,GAAG,EAAE,CAAC;QACrB,KAAK,MAAM,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC;YACzB,KAAK,MAAM,IAAI,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;gBAC3B,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;YAC9E,CAAC;QACL,CAAC;QACD,OAAO,WAAW,CAAC;IACvB,CAAC;SACI,CAAC;QACF,OAAO,EAAE,CAAC;IACd,CAAC;AACL,CAAC;AACD;;;;;;;;;;GAUG;AACH,SAAS,gBAAgB,CAAC,GAAG,EAAE,MAAM;IACjC,IAAI,MAAM,KAAK,SAAS,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC;QACvC,OAAO,EAAE,CAAC;IACd,CAAC;IACD,IAAI,SAAS,GAAG,EAAE,CAAC;IACnB,IAAI,GAAG,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;QACtB,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACxB,CAAC;SACI,IAAI,GAAG,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;QAC9B,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;SACI,IAAI,GAAG,CAAC,IAAI,KAAK,aAAa,IAAI,GAAG,CAAC,IAAI,KAAK,WAAW,IAAI,GAAG,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;QACzF,KAAK,MAAM,KAAK,IAAI,GAAG,CAAC,QAAQ,EAAE,CAAC;YAC/B,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC;QAClE,CAAC;IACL,CAAC;SACI,IAAI,GAAG,CAAC,IAAI,KAAK,OAAO,IAAI,GAAG,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;QACnD,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACxB,IAAI,GAAG,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;YAC1B,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC9B,CAAC;IACL,CAAC;SACI,IAAI,GAAG,CAAC,IAAI,KAAK,aAAa,IAAI,GAAG,CAAC,IAAI,KAAK,YAAY,EAAE,CAAC;QAC/D,KAAK,MAAM,IAAI,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;YAC3B,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;QACjE,CAAC;IACL,CAAC;SACI,IAAI,GAAG,CAAC,IAAI,KAAK,SAAS,IAAI,GAAG,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;QACzD,KAAK,MAAM,KAAK,IAAI,GAAG,CAAC,QAAQ,EAAE,CAAC;YAC/B,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC;QAClE,CAAC;IACL,CAAC;SACI,IAAI,GAAG,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;QAC5B,KAAK,MAAM,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC;YACzB,KAAK,MAAM,IAAI,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;gBAC3B,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;YACjE,CAAC;QACL,CAAC;IACL,CAAC;IACD,OAAO,SAAS,CAAC;AACrB,CAAC","sourcesContent":["\"use strict\";\n/**\n * @ignore\n * BEGIN HEADER\n *\n * Contains:        Markdown Utilities\n * CVM-Role:        Utility Functions\n * Maintainer:      Hendrik Erz\n * License:         GNU GPL v3\n *\n * Description:     This is the main entry file for various Markdown utilities\n *                  needed throughout the app.\n *\n * END HEADER\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.md2html = void 0;\nexports.markdownToAST = markdownToAST;\nexports.extractASTNodes = extractASTNodes;\nexports.extractTextnodes = extractTextnodes;\nconst markdown_parser_1 = __importDefault(require(\"@common/modules/markdown-editor/parser/markdown-parser\"));\nconst markdown_ast_1 = require(\"./markdown-ast\");\nvar markdown_to_html_1 = require(\"./markdown-to-html\");\nObject.defineProperty(exports, \"md2html\", { enumerable: true, get: function () { return markdown_to_html_1.md2html; } });\n/**\n * Converts a Markdown string into an AST, utilizing the CodeMirror Markdown\n * parser for the heavy lifting. This effectively takes a Lezer tree and\n * converts it to a custom Markdown AST implementation.\n *\n * @param   {string}   markdown  The Markdown source\n * @param   {Tree}     tree      Optional: If you already have a parsed tree,\n *                               you can pass it here to save some time re-\n *                               parsing the source. Please NOTE: If you pass in\n *                               a tree, you MUST pass the full Markdown source\n *                               that has been used to generate the parse tree,\n *                               since otherwise the offsets in the parse tree\n *                               will be wrong!\n *\n * @return  {ASTNode}            The root node of the AST\n */\nfunction markdownToAST(markdown, tree, parserConfig) {\n    if (tree === undefined) {\n        const { parser } = (0, markdown_parser_1.default)(parserConfig).language;\n        tree = parser.parse(markdown);\n    }\n    const ast = (0, markdown_ast_1.parseNode)(tree.topNode, markdown);\n    return ast;\n}\n/**\n * Extracts arbitrary AST nodes. Providing a NodeType that is not used within\n * the AST will return an empty array.\n *\n * @param   {ASTNode}      ast       The AST to extract nodes from\n * @param   {ASTNodeType}  nodeType  The Node type to query\n * @param   {Function}     filter    An optional filter. Receives a node and\n *                                   returns a boolean indicating if the node\n *                                   should be visited.\n *\n * @return  {ASTNode[]}              An array of all found nodes\n */\nfunction extractASTNodes(ast, nodeType, filter) {\n    if (filter !== undefined && !filter(ast)) {\n        return [];\n    }\n    if (ast.type === nodeType) {\n        return [ast];\n    }\n    else if (ast.type === 'FootnoteRef' || ast.type === 'Highlight' || ast.type === 'ListItem' || ast.type === 'Generic' || ast.type === 'Emphasis') {\n        let returnNodes = [];\n        for (const child of ast.children) {\n            returnNodes = returnNodes.concat(extractASTNodes(child, nodeType, filter));\n        }\n        return returnNodes;\n    }\n    else if (ast.type === 'OrderedList' || ast.type === 'BulletList') {\n        let returnNodes = [];\n        for (const item of ast.items) {\n            returnNodes = returnNodes.concat(extractASTNodes(item, nodeType, filter));\n        }\n        return returnNodes;\n    }\n    else if (ast.type === 'Table') {\n        let returnNodes = [];\n        for (const row of ast.rows) {\n            for (const cell of row.cells) {\n                returnNodes = returnNodes.concat(extractASTNodes(cell, nodeType, filter));\n            }\n        }\n        return returnNodes;\n    }\n    else {\n        return [];\n    }\n}\n/**\n * Extracts all text nodes from a Markdown AST. Can be used for spellchecking,\n * for example. An optional filter can be provided to exclude text nodes from\n * those nodes that should not be extracted.\n *\n * @param   {ASTNode[]}   ast     The AST root.\n * @param   {Function}    filter  A function that receives an ASTNode and should\n *                                return false if the node should be excluded.\n *\n * @return  {TextNode[]}          A list of all text nodes\n */\nfunction extractTextnodes(ast, filter) {\n    if (filter !== undefined && !filter(ast)) {\n        return [];\n    }\n    let textNodes = [];\n    if (ast.type === 'Text') {\n        textNodes.push(ast);\n    }\n    else if (ast.type === 'Heading') {\n        textNodes.push(ast.value);\n    }\n    else if (ast.type === 'FootnoteRef' || ast.type === 'Highlight' || ast.type === 'ListItem') {\n        for (const child of ast.children) {\n            textNodes = textNodes.concat(extractTextnodes(child, filter));\n        }\n    }\n    else if (ast.type === 'Image' || ast.type === 'Link') {\n        textNodes.push(ast.alt);\n        if (ast.title !== undefined) {\n            textNodes.push(ast.title);\n        }\n    }\n    else if (ast.type === 'OrderedList' || ast.type === 'BulletList') {\n        for (const item of ast.items) {\n            textNodes = textNodes.concat(extractTextnodes(item, filter));\n        }\n    }\n    else if (ast.type === 'Generic' || ast.type === 'Emphasis') {\n        for (const child of ast.children) {\n            textNodes = textNodes.concat(extractTextnodes(child, filter));\n        }\n    }\n    else if (ast.type === 'Table') {\n        for (const row of ast.rows) {\n            for (const cell of row.cells) {\n                textNodes = textNodes.concat(extractTextnodes(cell, filter));\n            }\n        }\n    }\n    return textNodes;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"69bd7917606df26c4c910d55eec06b0c68329718","contentHash":"02d796e200ff1796cddf0abf01f0687dee8ac5bbe58119610906313acb7cef2b"},"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-editor\\parser\\markdown-parser.ts":{"path":"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-editor\\parser\\markdown-parser.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":33}},"2":{"start":{"line":19,"column":22},"end":{"line":19,"column":52}},"3":{"start":{"line":20,"column":19},"end":{"line":20,"column":50}},"4":{"start":{"line":22,"column":24},"end":{"line":22,"column":60}},"5":{"start":{"line":23,"column":19},"end":{"line":23,"column":50}},"6":{"start":{"line":24,"column":22},"end":{"line":24,"column":56}},"7":{"start":{"line":25,"column":19},"end":{"line":25,"column":50}},"8":{"start":{"line":26,"column":26},"end":{"line":26,"column":64}},"9":{"start":{"line":27,"column":20},"end":{"line":27,"column":52}},"10":{"start":{"line":28,"column":20},"end":{"line":28,"column":52}},"11":{"start":{"line":30,"column":16},"end":{"line":30,"column":62}},"12":{"start":{"line":31,"column":18},"end":{"line":31,"column":66}},"13":{"start":{"line":32,"column":16},"end":{"line":32,"column":62}},"14":{"start":{"line":33,"column":14},"end":{"line":33,"column":58}},"15":{"start":{"line":34,"column":17},"end":{"line":34,"column":64}},"16":{"start":{"line":35,"column":18},"end":{"line":35,"column":66}},"17":{"start":{"line":36,"column":18},"end":{"line":36,"column":66}},"18":{"start":{"line":37,"column":14},"end":{"line":37,"column":58}},"19":{"start":{"line":38,"column":14},"end":{"line":38,"column":58}},"20":{"start":{"line":39,"column":15},"end":{"line":39,"column":60}},"21":{"start":{"line":40,"column":12},"end":{"line":40,"column":54}},"22":{"start":{"line":41,"column":15},"end":{"line":41,"column":60}},"23":{"start":{"line":42,"column":14},"end":{"line":42,"column":58}},"24":{"start":{"line":43,"column":16},"end":{"line":43,"column":62}},"25":{"start":{"line":44,"column":16},"end":{"line":44,"column":62}},"26":{"start":{"line":45,"column":13},"end":{"line":45,"column":56}},"27":{"start":{"line":46,"column":13},"end":{"line":46,"column":56}},"28":{"start":{"line":47,"column":15},"end":{"line":47,"column":60}},"29":{"start":{"line":48,"column":16},"end":{"line":48,"column":62}},"30":{"start":{"line":49,"column":15},"end":{"line":49,"column":60}},"31":{"start":{"line":50,"column":17},"end":{"line":50,"column":64}},"32":{"start":{"line":51,"column":17},"end":{"line":51,"column":64}},"33":{"start":{"line":52,"column":18},"end":{"line":52,"column":66}},"34":{"start":{"line":53,"column":15},"end":{"line":53,"column":60}},"35":{"start":{"line":54,"column":14},"end":{"line":54,"column":58}},"36":{"start":{"line":55,"column":17},"end":{"line":55,"column":64}},"37":{"start":{"line":56,"column":21},"end":{"line":56,"column":72}},"38":{"start":{"line":57,"column":21},"end":{"line":57,"column":72}},"39":{"start":{"line":58,"column":20},"end":{"line":58,"column":70}},"40":{"start":{"line":59,"column":15},"end":{"line":59,"column":60}},"41":{"start":{"line":60,"column":21},"end":{"line":60,"column":72}},"42":{"start":{"line":61,"column":15},"end":{"line":61,"column":60}},"43":{"start":{"line":62,"column":17},"end":{"line":62,"column":64}},"44":{"start":{"line":63,"column":14},"end":{"line":63,"column":58}},"45":{"start":{"line":64,"column":17},"end":{"line":64,"column":64}},"46":{"start":{"line":66,"column":26},"end":{"line":66,"column":54}},"47":{"start":{"line":67,"column":26},"end":{"line":67,"column":54}},"48":{"start":{"line":68,"column":29},"end":{"line":68,"column":60}},"49":{"start":{"line":69,"column":22},"end":{"line":69,"column":46}},"50":{"start":{"line":70,"column":24},"end":{"line":70,"column":50}},"51":{"start":{"line":71,"column":30},"end":{"line":71,"column":62}},"52":{"start":{"line":72,"column":26},"end":{"line":72,"column":54}},"53":{"start":{"line":73,"column":35},"end":{"line":73,"column":72}},"54":{"start":{"line":74,"column":27},"end":{"line":74,"column":56}},"55":{"start":{"line":75,"column":25},"end":{"line":75,"column":52}},"56":{"start":{"line":76,"column":22},"end":{"line":138,"column":1}},"57":{"start":{"line":82,"column":72},"end":{"line":82,"column":91}},"58":{"start":{"line":82,"column":92},"end":{"line":82,"column":104}},"59":{"start":{"line":145,"column":4},"end":{"line":217,"column":7}},"60":{"start":{"line":151,"column":26},"end":{"line":151,"column":74}},"61":{"start":{"line":152,"column":12},"end":{"line":154,"column":13}},"62":{"start":{"line":153,"column":16},"end":{"line":153,"column":28}},"63":{"start":{"line":156,"column":12},"end":{"line":160,"column":13}},"64":{"start":{"line":157,"column":16},"end":{"line":159,"column":17}},"65":{"start":{"line":158,"column":20},"end":{"line":158,"column":38}},"66":{"start":{"line":161,"column":12},"end":{"line":161,"column":24}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":82,"column":49},"end":{"line":82,"column":50}},"loc":{"start":{"line":82,"column":70},"end":{"line":82,"column":106}},"line":82},"1":{"name":"markdownParser","decl":{"start":{"line":144,"column":9},"end":{"line":144,"column":23}},"loc":{"start":{"line":144,"column":32},"end":{"line":218,"column":1}},"line":144},"2":{"name":"(anonymous_2)","decl":{"start":{"line":147,"column":23},"end":{"line":147,"column":24}},"loc":{"start":{"line":147,"column":39},"end":{"line":162,"column":9}},"line":147}},"branchMap":{"0":{"loc":{"start":{"line":152,"column":12},"end":{"line":154,"column":13}},"type":"if","locations":[{"start":{"line":152,"column":12},"end":{"line":154,"column":13}},{"start":{},"end":{}}],"line":152},"1":{"loc":{"start":{"line":157,"column":16},"end":{"line":159,"column":17}},"type":"if","locations":[{"start":{"line":157,"column":16},"end":{"line":159,"column":17}},{"start":{},"end":{}}],"line":157},"2":{"loc":{"start":{"line":185,"column":53},"end":{"line":185,"column":127}},"type":"cond-expr","locations":[{"start":{"line":185,"column":92},"end":{"line":185,"column":98}},{"start":{"line":185,"column":101},"end":{"line":185,"column":127}}],"line":185},"3":{"loc":{"start":{"line":185,"column":53},"end":{"line":185,"column":89}},"type":"binary-expr","locations":[{"start":{"line":185,"column":53},"end":{"line":185,"column":68}},{"start":{"line":185,"column":72},"end":{"line":185,"column":89}}],"line":185}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0},"f":{"0":0,"1":0,"2":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-editor/parser/markdown-parser.ts","sources":["C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-editor/parser/markdown-parser.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @ignore\n * BEGIN HEADER\n *\n * Contains:        Markdown Parser\n * CVM-Role:        Lezer Parser\n * Maintainer:      Hendrik Erz\n * License:         GNU GPL v3\n *\n * Description:     This is the main parser for Markdown documents. Most of the\n *                  code in here is boilerplate that adds various code\n *                  highlighting languages to the parser.\n *\n * END HEADER\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = markdownParser;\nconst custom_tags_1 = require(\"../util/custom-tags\");\nconst language_1 = require(\"@codemirror/language\");\n// Import all the languages, first the \"new\" ones\nconst lang_markdown_1 = require(\"@codemirror/lang-markdown\");\nconst lang_php_1 = require(\"@codemirror/lang-php\");\nconst lang_python_1 = require(\"@codemirror/lang-python\");\nconst lang_css_1 = require(\"@codemirror/lang-css\");\nconst lang_javascript_1 = require(\"@codemirror/lang-javascript\");\nconst lang_json_1 = require(\"@codemirror/lang-json\");\nconst lang_yaml_1 = require(\"@codemirror/lang-yaml\");\n// Now from the legacy modes package\nconst clike_1 = require(\"@codemirror/legacy-modes/mode/clike\");\nconst clojure_1 = require(\"@codemirror/legacy-modes/mode/clojure\");\nconst cobol_1 = require(\"@codemirror/legacy-modes/mode/cobol\");\nconst elm_1 = require(\"@codemirror/legacy-modes/mode/elm\");\nconst mllike_1 = require(\"@codemirror/legacy-modes/mode/mllike\");\nconst fortran_1 = require(\"@codemirror/legacy-modes/mode/fortran\");\nconst haskell_1 = require(\"@codemirror/legacy-modes/mode/haskell\");\nconst css_1 = require(\"@codemirror/legacy-modes/mode/css\");\nconst xml_1 = require(\"@codemirror/legacy-modes/mode/xml\");\nconst stex_1 = require(\"@codemirror/legacy-modes/mode/stex\");\nconst r_1 = require(\"@codemirror/legacy-modes/mode/r\");\nconst ruby_1 = require(\"@codemirror/legacy-modes/mode/ruby\");\nconst sql_1 = require(\"@codemirror/legacy-modes/mode/sql\");\nconst swift_1 = require(\"@codemirror/legacy-modes/mode/swift\");\nconst shell_1 = require(\"@codemirror/legacy-modes/mode/shell\");\nconst vb_1 = require(\"@codemirror/legacy-modes/mode/vb\");\nconst go_1 = require(\"@codemirror/legacy-modes/mode/go\");\nconst rust_1 = require(\"@codemirror/legacy-modes/mode/rust\");\nconst julia_1 = require(\"@codemirror/legacy-modes/mode/julia\");\nconst perl_1 = require(\"@codemirror/legacy-modes/mode/perl\");\nconst turtle_1 = require(\"@codemirror/legacy-modes/mode/turtle\");\nconst sparql_1 = require(\"@codemirror/legacy-modes/mode/sparql\");\nconst verilog_1 = require(\"@codemirror/legacy-modes/mode/verilog\");\nconst vhdl_1 = require(\"@codemirror/legacy-modes/mode/vhdl\");\nconst tcl_1 = require(\"@codemirror/legacy-modes/mode/tcl\");\nconst scheme_1 = require(\"@codemirror/legacy-modes/mode/scheme\");\nconst commonlisp_1 = require(\"@codemirror/legacy-modes/mode/commonlisp\");\nconst powershell_1 = require(\"@codemirror/legacy-modes/mode/powershell\");\nconst smalltalk_1 = require(\"@codemirror/legacy-modes/mode/smalltalk\");\nconst toml_1 = require(\"@codemirror/legacy-modes/mode/toml\");\nconst dockerfile_1 = require(\"@codemirror/legacy-modes/mode/dockerfile\");\nconst diff_1 = require(\"@codemirror/legacy-modes/mode/diff\");\nconst octave_1 = require(\"@codemirror/legacy-modes/mode/octave\");\nconst lua_1 = require(\"@codemirror/legacy-modes/mode/lua\");\nconst pascal_1 = require(\"@codemirror/legacy-modes/mode/pascal\");\n// Additional parser\nconst citation_parser_1 = require(\"./citation-parser\");\nconst footnote_parser_1 = require(\"./footnote-parser\");\nconst frontmatter_parser_1 = require(\"./frontmatter-parser\");\nconst math_parser_1 = require(\"./math-parser\");\nconst sloppy_parser_1 = require(\"./sloppy-parser\");\nconst pandoc_table_parser_1 = require(\"./pandoc-table-parser\");\nconst zkn_link_parser_1 = require(\"./zkn-link-parser\");\nconst pandoc_attributes_parser_1 = require(\"./pandoc-attributes-parser\");\nconst highlight_parser_1 = require(\"./highlight-parser\");\nconst zkn_tag_parser_1 = require(\"./zkn-tag-parser\");\nconst codeLanguages = [\n    {\n        // Hear me out: There may be no mermaid syntax highlighting, BUT we need it\n        // to be inside a 'FencedCode' Syntax node so that our renderer can pick it\n        // up. By defining an empty StreamParser, we can ensure that there will be\n        // such a structure, even if it's basically just plain text.\n        mode: language_1.StreamLanguage.define({ token(stream, state) { stream.skipToEnd(); return null; } }),\n        selectors: ['mermaid']\n    },\n    { mode: (0, lang_css_1.css)().language, selectors: ['css'] },\n    { mode: (0, lang_javascript_1.javascript)().language, selectors: ['javascript', 'js', 'node'] },\n    { mode: (0, lang_json_1.json)().language, selectors: ['json'] },\n    { mode: lang_markdown_1.markdownLanguage, selectors: ['markdown', 'md'] },\n    // NOTE: The PHP parser usually expects the PHP code to start with <?, unless \"plain\" is set\n    { mode: (0, lang_php_1.php)({ plain: true }).language, selectors: ['php'] },\n    { mode: (0, lang_python_1.python)().language, selectors: ['python', 'py'] },\n    { mode: language_1.StreamLanguage.define(clike_1.c), selectors: ['c'] },\n    { mode: language_1.StreamLanguage.define(clojure_1.clojure), selectors: ['clojure'] },\n    { mode: language_1.StreamLanguage.define(cobol_1.cobol), selectors: ['cobol'] },\n    { mode: language_1.StreamLanguage.define(commonlisp_1.commonLisp), selectors: ['clisp', 'commonlisp'] },\n    { mode: language_1.StreamLanguage.define(clike_1.cpp), selectors: ['c++', 'cpp'] },\n    { mode: language_1.StreamLanguage.define(clike_1.csharp), selectors: ['c#', 'csharp', 'cs'] },\n    { mode: language_1.StreamLanguage.define(clike_1.dart), selectors: ['dart', 'dt'] },\n    { mode: language_1.StreamLanguage.define(diff_1.diff), selectors: ['diff'] },\n    { mode: language_1.StreamLanguage.define(dockerfile_1.dockerFile), selectors: ['docker', 'dockerfile'] },\n    { mode: language_1.StreamLanguage.define(elm_1.elm), selectors: ['elm'] },\n    { mode: language_1.StreamLanguage.define(fortran_1.fortran), selectors: ['fortran'] },\n    { mode: language_1.StreamLanguage.define(mllike_1.fSharp), selectors: ['f#', 'fsharp'] },\n    { mode: language_1.StreamLanguage.define(go_1.go), selectors: ['go'] },\n    { mode: language_1.StreamLanguage.define(haskell_1.haskell), selectors: ['haskell', 'hs'] },\n    { mode: language_1.StreamLanguage.define(xml_1.html), selectors: ['html'] },\n    { mode: language_1.StreamLanguage.define(clike_1.java), selectors: ['java'] },\n    { mode: language_1.StreamLanguage.define(julia_1.julia), selectors: ['julia', 'jl'] },\n    { mode: language_1.StreamLanguage.define(clike_1.kotlin), selectors: ['kotlin', 'kt'] },\n    { mode: language_1.StreamLanguage.define(css_1.less), selectors: ['less'] },\n    { mode: language_1.StreamLanguage.define(lua_1.lua), selectors: ['lua'] },\n    { mode: language_1.StreamLanguage.define(clike_1.objectiveC), selectors: ['objective-c', 'objectivec', 'objc'] },\n    { mode: language_1.StreamLanguage.define(octave_1.octave), selectors: ['octave'] },\n    { mode: language_1.StreamLanguage.define(pascal_1.pascal), selectors: ['pascal'] },\n    { mode: language_1.StreamLanguage.define(perl_1.perl), selectors: ['perl', 'pl'] },\n    { mode: language_1.StreamLanguage.define(powershell_1.powerShell), selectors: ['powershell'] },\n    { mode: language_1.StreamLanguage.define(r_1.r), selectors: ['r'] },\n    { mode: language_1.StreamLanguage.define(ruby_1.ruby), selectors: ['ruby', 'rb'] },\n    { mode: language_1.StreamLanguage.define(rust_1.rust), selectors: ['rust', 'rs'] },\n    { mode: language_1.StreamLanguage.define(clike_1.scala), selectors: ['scala'] },\n    { mode: language_1.StreamLanguage.define(scheme_1.scheme), selectors: ['scheme'] },\n    { mode: language_1.StreamLanguage.define(css_1.sCSS), selectors: ['scss'] },\n    { mode: language_1.StreamLanguage.define(shell_1.shell), selectors: ['shell', 'sh', 'bash'] },\n    { mode: language_1.StreamLanguage.define(smalltalk_1.smalltalk), selectors: ['smalltalk', 'st'] },\n    { mode: language_1.StreamLanguage.define(sparql_1.sparql), selectors: ['sparql'] },\n    { mode: language_1.StreamLanguage.define((0, sql_1.sql)({})), selectors: ['sql'] },\n    { mode: language_1.StreamLanguage.define(stex_1.stex), selectors: ['latex', 'tex'] },\n    { mode: language_1.StreamLanguage.define(swift_1.swift), selectors: ['swift'] },\n    { mode: language_1.StreamLanguage.define(tcl_1.tcl), selectors: ['tcl'] },\n    { mode: language_1.StreamLanguage.define(toml_1.toml), selectors: ['toml', 'ini'] },\n    { mode: language_1.StreamLanguage.define(turtle_1.turtle), selectors: ['turtle', 'ttl'] },\n    { mode: language_1.StreamLanguage.define(vb_1.vb), selectors: ['vb.net', 'vb', 'visualbasic'] },\n    { mode: language_1.StreamLanguage.define(verilog_1.verilog), selectors: ['verilog', 'v'] },\n    { mode: language_1.StreamLanguage.define(vhdl_1.vhdl), selectors: ['vhdl', 'vhd'] },\n    { mode: language_1.StreamLanguage.define(xml_1.xml), selectors: ['xml'] },\n    { mode: (0, lang_yaml_1.yaml)().language, selectors: ['yaml', 'yml'] },\n    { mode: (0, lang_javascript_1.javascript)({ typescript: true }).language, selectors: ['typescript', 'ts'] }\n];\n// TIP: Uncomment the following line to get a full list of all unique characters\n// that are capable of belonging to a selector\n// console.log([...new Set(codeLanguages.map(x => x.selectors).flat().join('').split(''))])\n// This file returns a syntax extension that provides parsing and syntax\n// capabilities\nfunction markdownParser(config) {\n    return (0, lang_markdown_1.markdown)({\n        base: lang_markdown_1.markdownLanguage,\n        codeLanguages: (infoString) => {\n            // infostrings must start with the language and can be surrounded by curly\n            // brackets. We just extract everything from the beginning that is an\n            // allowed selector-part\n            const match = /^{?([a-z.#+-]+)/.exec(infoString.toLowerCase());\n            if (match === null) {\n                return null;\n            }\n            // Return an adequate language\n            for (const entry of codeLanguages) {\n                if (entry.selectors.includes(match[1])) {\n                    return entry.mode;\n                }\n            }\n            return null;\n        },\n        extensions: {\n            // yamlCodeParse is a wrapper that scans the document for the existence of\n            // a YAML frontmatter and then parses its contents. NOTE: Since a single\n            // MarkdownConfig only accepts one parse, I could either add additional\n            // logic to a generalized parser, or start passing additional config\n            // options here, since \"extensions\" also takes an array.\n            wrap: (0, frontmatter_parser_1.yamlCodeParse)(),\n            parseBlock: [\n                // This BlockParser parses YAML frontmatters\n                frontmatter_parser_1.frontmatterParser,\n                // This BlockParser parses math blocks\n                math_parser_1.blockMathParser,\n                footnote_parser_1.footnoteRefParser,\n                pandoc_table_parser_1.gridTableParser,\n                pandoc_table_parser_1.pipeTableParser\n            ],\n            parseInline: [\n                // Add inline parsers that add AST elements for various additional types\n                math_parser_1.inlineMathParser,\n                footnote_parser_1.footnoteParser,\n                citation_parser_1.citationParser,\n                sloppy_parser_1.sloppyParser,\n                (0, zkn_link_parser_1.zknLinkParser)(config === null || config === void 0 ? void 0 : config.zknLinkParserConfig),\n                zkn_tag_parser_1.zknTagParser,\n                pandoc_attributes_parser_1.pandocAttributesParser,\n                highlight_parser_1.highlightParser\n            ],\n            // We have to notify the markdown parser about the additional Node Types\n            // that the YAML block parser utilizes\n            // NOTE: Changes here must be reflected in util/custom-tags.ts and theme/syntax.ts!\n            defineNodes: [\n                { name: 'YAMLFrontmatter' },\n                { name: 'YAMLFrontmatterStart', style: custom_tags_1.customTags.YAMLFrontmatterStart },\n                { name: 'YAMLFrontmatterEnd', style: custom_tags_1.customTags.YAMLFrontmatterEnd },\n                { name: 'Citation', style: custom_tags_1.customTags.Citation },\n                { name: 'HighlightMark', style: custom_tags_1.customTags.HighlightMark },\n                // NOTE: The convention {TagName}/... means that the corresponding styles\n                // from the syntax theme get assigned to all child nodes that are contained\n                // within this node as well. The default is to only style otherwise \"empty\"\n                // spans of plain text.\n                { name: 'HighlightContent', style: { 'HighlightContent/...': custom_tags_1.customTags.HighlightContent } },\n                { name: 'Footnote', style: custom_tags_1.customTags.Footnote },\n                { name: 'FootnoteRef', style: custom_tags_1.customTags.FootnoteRef },\n                { name: 'FootnoteRefLabel', style: custom_tags_1.customTags.FootnoteRefLabel },\n                { name: 'FootnoteRefBody', style: custom_tags_1.customTags.FootnoteRefBody },\n                { name: 'ZknLink', style: custom_tags_1.customTags.ZknLink },\n                { name: 'ZknLinkContent', style: custom_tags_1.customTags.ZknLinkContent },\n                { name: 'ZknLinkTitle', style: custom_tags_1.customTags.ZknLinkTitle },\n                { name: 'ZknLinkPipe', style: custom_tags_1.customTags.ZknLinkPipe },\n                { name: 'ZknTag', style: custom_tags_1.customTags.ZknTag },\n                { name: 'ZknTagContent', style: custom_tags_1.customTags.ZknTagContent },\n                { name: 'PandocAttribute', style: custom_tags_1.customTags.PandocAttribute }\n            ]\n        }\n    });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzovVXNlcnMvSm9zaCBFL0RvY3VtZW50cy9aZXR0bHItc3dlbmc0MzEvc291cmNlL2NvbW1vbi9tb2R1bGVzL21hcmtkb3duLWVkaXRvci9wYXJzZXIvbWFya2Rvd24tcGFyc2VyLnRzIiwic291cmNlcyI6WyJDOi9Vc2Vycy9Kb3NoIEUvRG9jdW1lbnRzL1pldHRsci1zd2VuZzQzMS9zb3VyY2UvY29tbW9uL21vZHVsZXMvbWFya2Rvd24tZWRpdG9yL3BhcnNlci9tYXJrZG93bi1wYXJzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7OztHQWNHOztBQTZJSCxpQ0E0RUM7QUF2TkQscURBQWdEO0FBQ2hELG1EQUs2QjtBQUU3QixpREFBaUQ7QUFDakQsNkRBQXNFO0FBQ3RFLG1EQUEwQztBQUMxQyx5REFBZ0Q7QUFDaEQsbURBQTBDO0FBQzFDLGlFQUF3RDtBQUN4RCxxREFBNEM7QUFDNUMscURBQTRDO0FBQzVDLG9DQUFvQztBQUNwQywrREFBMkc7QUFDM0csbUVBQStEO0FBQy9ELCtEQUEyRDtBQUMzRCwyREFBdUQ7QUFDdkQsaUVBQTZEO0FBQzdELG1FQUErRDtBQUMvRCxtRUFBK0Q7QUFDL0QsMkRBQThEO0FBQzlELDJEQUE2RDtBQUM3RCw2REFBeUQ7QUFDekQsdURBQW1EO0FBQ25ELDZEQUF5RDtBQUN6RCwyREFBdUQ7QUFDdkQsK0RBQTJEO0FBQzNELCtEQUEyRDtBQUMzRCx5REFBcUQ7QUFDckQseURBQXFEO0FBQ3JELDZEQUF5RDtBQUN6RCwrREFBMkQ7QUFDM0QsNkRBQXlEO0FBQ3pELGlFQUE2RDtBQUM3RCxpRUFBNkQ7QUFDN0QsbUVBQStEO0FBQy9ELDZEQUF5RDtBQUN6RCwyREFBdUQ7QUFDdkQsaUVBQTZEO0FBQzdELHlFQUFxRTtBQUNyRSx5RUFBcUU7QUFDckUsdUVBQW1FO0FBQ25FLDZEQUF5RDtBQUN6RCx5RUFBcUU7QUFDckUsNkRBQXlEO0FBQ3pELGlFQUE2RDtBQUM3RCwyREFBdUQ7QUFDdkQs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LEVBQUUsU0FBUyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUU7SUFDNUQsRUFBRSxJQUFJLEVBQUUseUJBQWMsQ0FBQyxNQUFNLENBQUMsZUFBTSxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUU7SUFDOUQsRUFBRSxJQUFJLEVBQUUseUJBQWMsQ0FBQyxNQUFNLENBQUMsVUFBSSxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUU7SUFDMUQsRUFBRSxJQUFJLEVBQUUseUJBQWMsQ0FBQyxNQUFNLENBQUMsYUFBSyxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLENBQUUsRUFBRTtJQUM1RSxFQUFFLElBQUksRUFBRSx5QkFBYyxDQUFDLE1BQU0sQ0FBQyxxQkFBUyxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUUsV0FBVyxFQUFFLElBQUksQ0FBRSxFQUFFO0lBQzVFLEVBQUUsSUFBSSxFQUFFLHlCQUFjLENBQUMsTUFBTSxDQUFDLGVBQU0sQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFO0lBQzlELEVBQUUsSUFBSSxFQUFFLHlCQUFjLENBQUMsTUFBTSxDQUFDLElBQUEsU0FBRyxFQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUU7SUFDNUQsRUFBRSxJQUFJLEVBQUUseUJBQWMsQ0FBQyxNQUFNLENBQUMsV0FBSSxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUUsT0FBTyxFQUFFLEtBQUssQ0FBRSxFQUFFO0lBQ3BFLEVBQUUsSUFBSSxFQUFFLHlCQUFjLENBQUMsTUFBTSxDQUFDLGFBQUssQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFO0lBQzVELEVBQUUsSUFBSSxFQUFFLHlCQUFjLENBQUMsTUFBTSxDQUFDLFNBQUcsQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFO0lBQ3hELEVBQUUsSUFBSSxFQUFF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LFlBQVksRUFBRTtnQkFDeEQsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLEtBQUssRUFBRSx3QkFBVSxDQUFDLFdBQVcsRUFBRTtnQkFDdEQsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSx3QkFBVSxDQUFDLE1BQU0sRUFBRTtnQkFDNUMsRUFBRSxJQUFJLEVBQUUsZUFBZSxFQUFFLEtBQUssRUFBRSx3QkFBVSxDQUFDLGFBQWEsRUFBRTtnQkFDMUQsRUFBRSxJQUFJLEVBQUUsaUJBQWlCLEVBQUUsS0FBSyxFQUFFLHdCQUFVLENBQUMsZUFBZSxFQUFFO2FBQy9EO1NBQ0Y7S0FDRixDQUFDLENBQUE7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBpZ25vcmVcclxuICogQkVHSU4gSEVBREVSXHJcbiAqXHJcbiAqIENvbnRhaW5zOiAgICAgICAgTWFya2Rvd24gUGFyc2VyXHJcbiAqIENWTS1Sb2xlOiAgICAgICAgTGV6ZXIgUGFyc2VyXHJcbiAqIE1haW50YWluZXI6ICAgICAgSGVuZHJpayBFcnpcclxuICogTGljZW5zZTogICAgICAgICBHTlUgR1BMIHYzXHJcbiAqXHJcbiAqIERlc2NyaXB0aW9uOiAgICAgVGhpcyBpcyB0aGUgbWFpbiBwYXJzZXIgZm9yIE1hcmtkb3duIGRvY3VtZW50cy4gTW9zdCBvZiB0aGVcclxuICogICAgICAgICAgICAgICAgICBjb2RlIGluIGhlcmUgaXMgYm9pbGVycGxhdGUgdGhhdCBhZGRzIHZhcmlvdXMgY29kZVxyXG4gKiAgICAgICAgICAgICAgICAgIGhpZ2hsaWdodGluZyBsYW5ndWFnZXMgdG8gdGhlIHBhcnNlci5cclxuICpcclxuICogRU5EIEhFQURFUlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IGN1c3RvbVRhZ3MgfSBmcm9tICcuLi91dGlsL2N1c3RvbS10YWdzJ1xyXG5pbXBvcnQge1xyXG4gIFN0cmVhbUxhbmd1YWdlLFxyXG4gIHR5cGUgTGFuZ3VhZ2VTdXBwb3J0LFxyXG4gIHR5cGUgTGFuZ3VhZ2UsXHJcbiAgdHlwZSBMYW5ndWFnZURlc2NyaXB0aW9uXHJcbn0gZnJvbSAnQGNvZGVtaXJyb3IvbGFuZ3VhZ2UnXHJcblxyXG4vLyBJbXBvcnQgYWxsIHRoZSBsYW5ndWFnZXMsIGZpcnN0IHRoZSBcIm5ld1wiIG9uZXNcclxuaW1wb3J0IHsgbWFya2Rvd24sIG1hcmtkb3duTGFuZ3VhZ2UgfSBmcm9tICdAY29kZW1pcnJvci9sYW5nLW1hcmtkb3duJ1xyXG5pbXBvcnQgeyBwaHAgfSBmcm9tICdAY29kZW1pcnJvci9sYW5nLXBocCdcclxuaW1wb3J0IHsgcHl0aG9uIH0gZnJvbSAnQGNvZGVtaXJyb3IvbGFuZy1weXRob24nXHJcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0Bjb2RlbWlycm9yL2xhbmctY3NzJ1xyXG5pbXBvcnQgeyBqYXZhc2NyaXB0IH0gZnJvbSAnQGNvZGVtaXJyb3IvbGFuZy1qYXZhc2NyaXB0J1xyXG5pbXBvcnQgeyBqc29uIH0gZnJvbSAnQGNvZGVtaXJyb3IvbGFuZy1qc29uJ1xyXG5pbXBvcnQgeyB5YW1sIH0gZnJvbSAnQGNvZGVtaXJyb3IvbGFuZy15YW1sJ1xyXG4vLyBOb3cgZnJvbSB0aGUgbGVnYWN5IG1vZGVzIHBhY2thZ2VcclxuaW1wb3J0IHsgYywgY3BwLCBjc2hhcnAsIGphdmEsIGtvdGxpbiwgb2JqZWN0aXZlQywgZGFydCwgc2NhbGEgfSBmcm9tICdAY29kZW1pcnJvci9sZWdhY3ktbW9kZXMvbW9kZS9jbGlrZSdcclxuaW1wb3J0IHsgY2xvanVyZSB9IGZyb20gJ0Bjb2RlbWlycm9yL2xlZ2FjeS1tb2Rlcy9tb2RlL2Nsb2p1cmUnXHJcbmltcG9ydCB7IGNvYm9sIH0gZnJvbSAnQGNvZGVtaXJyb3IvbGVnYWN5LW1vZGVzL21vZGUvY29ib2wnXHJcbmltcG9ydCB7IGVsbSB9IGZyb20gJ0Bjb2RlbWlycm9yL2xlZ2FjeS1tb2Rlcy9tb2RlL2VsbSdcclxuaW1wb3J0IHsgZlNoYXJwIH0gZnJvbSAnQGNvZGVtaXJyb3IvbGVnYWN5LW1vZGVzL21vZGUvbWxsaWtlJ1xyXG5pbXBvcnQgeyBmb3J0cmFuIH0gZnJvbSAnQGNvZGVtaXJyb3IvbGVnYWN5LW1vZGVzL21vZGUvZm9ydHJhbidcclxuaW1wb3J0IHsgaGFza2VsbCB9IGZyb20gJ0Bjb2RlbWlycm9yL2xlZ2FjeS1tb2Rlcy9tb2RlL2hhc2tlbGwnXHJcbmltcG9ydCB7IHNDU1MsIGxlc3MgfSBmcm9tICdAY29kZW1pcnJvci9sZWdhY3ktbW9kZXMvbW9kZS9jc3MnXHJcbmltcG9ydCB7IHhtbCwgaHRtbCB9IGZyb20gJ0Bjb2RlbWlycm9yL2xlZ2FjeS1tb2Rlcy9tb2RlL3htbCdcclxuaW1wb3J0IHsgc3RleCB9IGZyb20gJ0Bjb2RlbWlycm9yL2xlZ2FjeS1tb2Rlcy9tb2RlL3N0ZXgnXHJcbmltcG9ydCB7IHIgfSBmcm9tICdAY29kZW1pcnJvci9sZWdhY3ktbW9kZXMvbW9kZS9yJ1xyXG5pbXBvcnQgeyBydWJ5IH0gZnJvbSAnQGNvZGVtaXJyb3IvbGVnYWN5LW1vZGVzL21vZGUvcnVieSdcclxuaW1wb3J0IHsgc3FsIH0gZnJvbSAnQGNvZGVtaXJyb3IvbGVnYWN5LW1vZGVzL21vZGUvc3FsJ1xyXG5pbXBvcnQgeyBzd2lmdCB9IGZyb20gJ0Bjb2RlbWlycm9yL2xlZ2FjeS1tb2Rlcy9tb2RlL3N3aWZ0J1xyXG5pbXBvcnQgeyBzaGVsbCB9IGZyb20gJ0Bjb2RlbWlycm9yL2xlZ2FjeS1tb2Rlcy9tb2RlL3NoZWxsJ1xyXG5pbXBvcnQgeyB2YiB9IGZyb20gJ0Bjb2RlbWlycm9yL2xlZ2FjeS1tb2Rlcy9tb2RlL3ZiJ1xyXG5pbXBvcnQgeyBnbyB9IGZyb20gJ0Bjb2RlbWlycm9yL2xlZ2FjeS1tb2Rlcy9tb2RlL2dvJ1xyXG5pbXBvcnQgeyBydXN0IH0gZnJvbSAnQGNvZGVtaXJyb3IvbGVnYWN5LW1vZGVzL21vZGUvcnVzdCdcclxuaW1wb3J0IHsganVsaWEgfSBmcm9tICdAY29kZW1pcnJvci9sZWdhY3ktbW9kZXMvbW9kZS9qdWxpYSdcclxuaW1wb3J0IHsgcGVybCB9IGZyb20gJ0Bjb2RlbWlycm9yL2xlZ2FjeS1tb2Rlcy9tb2RlL3BlcmwnXHJcbmltcG9ydCB7IHR1cnRsZSB9IGZyb20gJ0Bjb2RlbWlycm9yL2xlZ2FjeS1tb2Rlcy9tb2RlL3R1cnRsZSdcclxuaW1wb3J0IHsgc3BhcnFsIH0gZnJvbSAnQGNvZGVtaXJyb3IvbGVnYWN5LW1vZGVzL21vZGUvc3BhcnFsJ1xyXG5pbXBvcnQgeyB2ZXJpbG9nIH0gZnJvbSAnQGNvZGVtaXJyb3IvbGVnYWN5LW1vZGVzL21vZGUvdmVyaWxvZydcclxuaW1wb3J0IHsgdmhkbCB9IGZyb20gJ0Bjb2RlbWlycm9yL2xlZ2FjeS1tb2Rlcy9tb2RlL3ZoZGwnXHJcbmltcG9ydCB7IHRjbCB9IGZyb20gJ0Bjb2RlbWlycm9yL2xlZ2FjeS1tb2Rlcy9tb2RlL3RjbCdcclxuaW1wb3J0IHsgc2NoZW1lIH0gZnJvbSAnQGNvZGVtaXJyb3IvbGVnYWN5LW1vZGVzL21vZGUvc2NoZW1lJ1xyXG5pbXBvcnQgeyBjb21tb25MaXNwIH0gZnJvbSAnQGNvZGVtaXJyb3IvbGVnYWN5LW1vZGVzL21vZGUvY29tbW9ubGlzcCdcclxuaW1wb3J0IHsgcG93ZXJTaGVsbCB9IGZyb20gJ0Bjb2RlbWlycm9yL2xlZ2FjeS1tb2Rlcy9tb2RlL3Bvd2Vyc2hlbGwnXHJcbmltcG9ydCB7IHNtYWxsdGFsayB9IGZyb20gJ0Bjb2RlbWlycm9yL2xlZ2FjeS1tb2Rlcy9tb2RlL3NtYWxsdGFsaydcclxuaW1wb3J0IHsgdG9tbCB9IGZyb20gJ0Bjb2RlbWlycm9yL2xlZ2FjeS1tb2Rlcy9tb2RlL3RvbWwnXHJcbmltcG9ydCB7IGRvY2tlckZpbGUgfSBmcm9tICdAY29kZW1pcnJvci9sZWdhY3ktbW9kZXMvbW9kZS9kb2NrZXJmaWxlJ1xyXG5pbXBvcnQgeyBkaWZmIH0gZnJvbSAnQGNvZGVtaXJyb3IvbGVnYWN5LW1vZGVzL21vZGUvZGlmZidcclxuaW1wb3J0IHsgb2N0YXZlIH0gZnJvbSAnQGNvZGVtaXJyb3IvbGVnYWN5LW1vZGVzL21vZGUvb2N0YXZlJ1xyXG5pbXBvcnQgeyBsdWEgfSBmcm9tICdAY29kZW1pcnJvci9sZWdhY3ktbW9kZXMvbW9kZS9sdWEnXHJcbmltcG9ydCB7IHBhc2NhbCB9IGZyb20gJ0Bjb2RlbWlycm9yL2xlZ2FjeS1tb2Rlcy9tb2RlL3Bhc2NhbCdcclxuXHJcbi8vIEFkZGl0aW9uYWwgcGFyc2VyXHJcbmltcG9ydCB7IGNpdGF0aW9uUGFyc2VyIH0gZnJvbSAnLi9jaXRhdGlvbi1wYXJzZXInXHJcbmltcG9ydCB7IGZvb3Rub3RlUGFyc2VyLCBmb290bm90ZVJlZlBhcnNlciB9IGZyb20gJy4vZm9vdG5vdGUtcGFyc2VyJ1xyXG5pbXBvcnQgeyBmcm9udG1hdHRlclBhcnNlciwgeWFtbENvZGVQYXJzZSB9IGZyb20gJy4vZnJvbnRtYXR0ZXItcGFyc2VyJ1xyXG5pbXBvcnQgeyBpbmxpbmVNYXRoUGFyc2VyLCBibG9ja01hdGhQYXJzZXIgfSBmcm9tICcuL21hdGgtcGFyc2VyJ1xyXG5pbXBvcnQgeyBzbG9wcHlQYXJzZXIgfSBmcm9tICcuL3Nsb3BweS1wYXJzZXInXHJcbmltcG9ydCB7IGdyaWRUYWJsZVBhcnNlciwgcGlwZVRhYmxlUGFyc2VyIH0gZnJvbSAnLi9wYW5kb2MtdGFibGUtcGFyc2VyJ1xyXG5pbXBvcnQgeyB0eXBlIFprbkxpbmtQYXJzZXJDb25maWcsIHprbkxpbmtQYXJzZXIgfSBmcm9tICcuL3prbi1saW5rLXBhcnNlcidcclxuaW1wb3J0IHsgcGFuZG9jQXR0cmlidXRlc1BhcnNlciB9IGZyb20gJy4vcGFuZG9jLWF0dHJpYnV0ZXMtcGFyc2VyJ1xyXG5pbXBvcnQgeyBoaWdobGlnaHRQYXJzZXIgfSBmcm9tICcuL2hpZ2hsaWdodC1wYXJzZXInXHJcbmltcG9ydCB7IHprblRhZ1BhcnNlciB9IGZyb20gJy4vemtuLXRhZy1wYXJzZXInXHJcblxyXG5jb25zdCBjb2RlTGFuZ3VhZ2VzOiBBcnJheTx7IG1vZGU6IExhbmd1YWdlfExhbmd1YWdlRGVzY3JpcHRpb258bnVsbCwgc2VsZWN0b3JzOiBzdHJpbmdbXSB9PiA9IFtcclxuICB7XHJcbiAgICAvLyBIZWFyIG1lIG91dDogVGhlcmUgbWF5IGJlIG5vIG1lcm1haWQgc3ludGF4IGhpZ2hsaWdodGluZywgQlVUIHdlIG5lZWQgaXRcclxuICAgIC8vIHRvIGJlIGluc2lkZSBhICdGZW5jZWRDb2RlJyBTeW50YXggbm9kZSBzbyB0aGF0IG91ciByZW5kZXJlciBjYW4gcGljayBpdFxyXG4gICAgLy8gdXAuIEJ5IGRlZmluaW5nIGFuIGVtcHR5IFN0cmVhbVBhcnNlciwgd2UgY2FuIGVuc3VyZSB0aGF0IHRoZXJlIHdpbGwgYmVcclxuICAgIC8vIHN1Y2ggYSBzdHJ1Y3R1cmUsIGV2ZW4gaWYgaXQncyBiYXNpY2FsbHkganVzdCBwbGFpbiB0ZXh0LlxyXG4gICAgbW9kZTogU3RyZWFtTGFuZ3VhZ2UuZGVmaW5lKHsgdG9rZW4gKHN0cmVhbSwgc3RhdGUpIHsgc3RyZWFtLnNraXBUb0VuZCgpOyByZXR1cm4gbnVsbCB9IH0pLFxyXG4gICAgc2VsZWN0b3JzOiBbJ21lcm1haWQnXVxyXG4gIH0sXHJcbiAgeyBtb2RlOiBjc3MoKS5sYW5ndWFnZSwgc2VsZWN0b3JzOiBbJ2NzcyddIH0sXHJcbiAgeyBtb2RlOiBqYXZhc2NyaXB0KCkubGFuZ3VhZ2UsIHNlbGVjdG9yczogWyAnamF2YXNjcmlwdCcsICdqcycsICdub2RlJyBdIH0sXHJcbiAgeyBtb2RlOiBqc29uKCkubGFuZ3VhZ2UsIHNlbGVjdG9yczogWydqc29uJ10gfSxcclxuICB7IG1vZGU6IG1hcmtkb3duTGFuZ3VhZ2UsIHNlbGVjdG9yczogWyAnbWFya2Rvd24nLCAnbWQnIF0gfSxcclxuICAvLyBOT1RFOiBUaGUgUEhQIHBhcnNlciB1c3VhbGx5IGV4cGVjdHMgdGhlIFBIUCBjb2RlIHRvIHN0YXJ0IHdpdGggPD8sIHVubGVzcyBcInBsYWluXCIgaXMgc2V0XHJcbiAgeyBtb2RlOiBwaHAoeyBwbGFpbjogdHJ1ZSB9KS5sYW5ndWFnZSwgc2VsZWN0b3JzOiBbJ3BocCddIH0sXHJcbiAgeyBtb2RlOiBweXRob24oKS5sYW5ndWFnZSwgc2VsZWN0b3JzOiBbICdweXRob24nLCAncHknIF0gfSxcclxuICB7IG1vZGU6IFN0cmVhbUxhbmd1YWdlLmRlZmluZShjKSwgc2VsZWN0b3JzOiBbJ2MnXSB9LFxyXG4gIHsgbW9kZTogU3RyZWFtTGFuZ3VhZ2UuZGVmaW5lKGNsb2p1cmUpLCBzZWxlY3RvcnM6IFsnY2xvanVyZSddIH0sXHJcbiAgeyBtb2RlOiBTdHJlYW1MYW5ndWFnZS5kZWZpbmUoY29ib2wpLCBzZWxlY3RvcnM6IFsnY29ib2wnXSB9LFxyXG4gIHsgbW9kZTogU3RyZWFtTGFuZ3VhZ2UuZGVmaW5lKGNvbW1vbkxpc3ApLCBzZWxlY3RvcnM6IFsgJ2NsaXNwJywgJ2NvbW1vbmxpc3AnIF0gfSxcclxuICB7IG1vZGU6IFN0cmVhbUxhbmd1YWdlLmRlZmluZShjcHApLCBzZWxlY3RvcnM6IFsgJ2MrKycsICdjcHAnIF0gfSxcclxuICB7IG1vZGU6IFN0cmVhbUxhbmd1YWdlLmRlZmluZShjc2hhcnApLCBzZWxlY3RvcnM6IFsgJ2MjJywgJ2NzaGFycCcsICdjcycgXSB9LFxyXG4gIHsgbW9kZTogU3RyZWFtTGFuZ3VhZ2UuZGVmaW5lKGRhcnQpLCBzZWxlY3RvcnM6IFsgJ2RhcnQnLCAnZHQnIF0gfSxcclxuICB7IG1vZGU6IFN0cmVhbUxhbmd1YWdlLmRlZmluZShkaWZmKSwgc2VsZWN0b3JzOiBbJ2RpZmYnXSB9LFxyXG4gIHsgbW9kZTogU3RyZWFtTGFuZ3VhZ2UuZGVmaW5lKGRvY2tlckZpbGUpLCBzZWxlY3RvcnM6IFsgJ2RvY2tlcicsICdkb2NrZXJmaWxlJyBdIH0sXHJcbiAgeyBtb2RlOiBTdHJlYW1MYW5ndWFnZS5kZWZpbmUoZWxtKSwgc2VsZWN0b3JzOiBbJ2VsbSddIH0sXHJcbiAgeyBtb2RlOiBTdHJlYW1MYW5ndWFnZS5kZWZpbmUoZm9ydHJhbiksIHNlbGVjdG9yczogWydmb3J0cmFuJ10gfSxcclxuICB7IG1vZGU6IFN0cmVhbUxhbmd1YWdlLmRlZmluZShmU2hhcnApLCBzZWxlY3RvcnM6IFsgJ2YjJywgJ2ZzaGFycCcgXSB9LFxyXG4gIHsgbW9kZTogU3RyZWFtTGFuZ3VhZ2UuZGVmaW5lKGdvKSwgc2VsZWN0b3JzOiBbJ2dvJ10gfSxcclxuICB7IG1vZGU6IFN0cmVhbUxhbmd1YWdlLmRlZmluZShoYXNrZWxsKSwgc2VsZWN0b3JzOiBbICdoYXNrZWxsJywgJ2hzJyBdIH0sXHJcbiAgeyBtb2RlOiBTdHJlYW1MYW5ndWFnZS5kZWZpbmUoaHRtbCksIHNlbGVjdG9yczogWydodG1sJ10gfSxcclxuICB7IG1vZGU6IFN0cmVhbUxhbmd1YWdlLmRlZmluZShqYXZhKSwgc2VsZWN0b3JzOiBbJ2phdmEnXSB9LFxyXG4gIHsgbW9kZTogU3RyZWFtTGFuZ3VhZ2UuZGVmaW5lKGp1bGlhKSwgc2VsZWN0b3JzOiBbICdqdWxpYScsICdqbCcgXSB9LFxyXG4gIHsgbW9kZTogU3RyZWFtTGFuZ3VhZ2UuZGVmaW5lKGtvdGxpbiksIHNlbGVjdG9yczogWyAna290bGluJywgJ2t0JyBdIH0sXHJcbiAgeyBtb2RlOiBTdHJlYW1MYW5ndWFnZS5kZWZpbmUobGVzcyksIHNlbGVjdG9yczogWydsZXNzJ10gfSxcclxuICB7IG1vZGU6IFN0cmVhbUxhbmd1YWdlLmRlZmluZShsdWEpLCBzZWxlY3RvcnM6IFsnbHVhJ10gfSxcclxuICB7IG1vZGU6IFN0cmVhbUxhbmd1YWdlLmRlZmluZShvYmplY3RpdmVDKSwgc2VsZWN0b3JzOiBbICdvYmplY3RpdmUtYycsICdvYmplY3RpdmVjJywgJ29iamMnIF0gfSxcclxuICB7IG1vZGU6IFN0cmVhbUxhbmd1YWdlLmRlZmluZShvY3RhdmUpLCBzZWxlY3RvcnM6IFsnb2N0YXZlJ10gfSxcclxuICB7IG1vZGU6IFN0cmVhbUxhbmd1YWdlLmRlZmluZShwYXNjYWwpLCBzZWxlY3RvcnM6IFsncGFzY2FsJ10gfSxcclxuICB7IG1vZGU6IFN0cmVhbUxhbmd1YWdlLmRlZmluZShwZXJsKSwgc2VsZWN0b3JzOiBbICdwZXJsJywgJ3BsJyBdIH0sXHJcbiAgeyBtb2RlOiBTdHJlYW1MYW5ndWFnZS5kZWZpbmUocG93ZXJTaGVsbCksIHNlbGVjdG9yczogWydwb3dlcnNoZWxsJ10gfSxcclxuICB7IG1vZGU6IFN0cmVhbUxhbmd1YWdlLmRlZmluZShyKSwgc2VsZWN0b3JzOiBbJ3InXSB9LFxyXG4gIHsgbW9kZTogU3RyZWFtTGFuZ3VhZ2UuZGVmaW5lKHJ1YnkpLCBzZWxlY3RvcnM6IFsgJ3J1YnknLCAncmInIF0gfSxcclxuICB7IG1vZGU6IFN0cmVhbUxhbmd1YWdlLmRlZmluZShydXN0KSwgc2VsZWN0b3JzOiBbICdydXN0JywgJ3JzJyBdIH0sXHJcbiAgeyBtb2RlOiBTdHJlYW1MYW5ndWFnZS5kZWZpbmUoc2NhbGEpLCBzZWxlY3RvcnM6IFsnc2NhbGEnXSB9LFxyXG4gIHsgbW9kZTogU3RyZWFtTGFuZ3VhZ2UuZGVmaW5lKHNjaGVtZSksIHNlbGVjdG9yczogWydzY2hlbWUnXSB9LFxyXG4gIHsgbW9kZTogU3RyZWFtTGFuZ3VhZ2UuZGVmaW5lKHNDU1MpLCBzZWxlY3RvcnM6IFsnc2NzcyddIH0sXHJcbiAgeyBtb2RlOiBTdHJlYW1MYW5ndWFnZS5kZWZpbmUoc2hlbGwpLCBzZWxlY3RvcnM6IFsgJ3NoZWxsJywgJ3NoJywgJ2Jhc2gnIF0gfSxcclxuICB7IG1vZGU6IFN0cmVhbUxhbmd1YWdlLmRlZmluZShzbWFsbHRhbGspLCBzZWxlY3RvcnM6IFsgJ3NtYWxsdGFsaycsICdzdCcgXSB9LFxyXG4gIHsgbW9kZTogU3RyZWFtTGFuZ3VhZ2UuZGVmaW5lKHNwYXJxbCksIHNlbGVjdG9yczogWydzcGFycWwnXSB9LFxyXG4gIHsgbW9kZTogU3RyZWFtTGFuZ3VhZ2UuZGVmaW5lKHNxbCh7fSkpLCBzZWxlY3RvcnM6IFsnc3FsJ10gfSxcclxuICB7IG1vZGU6IFN0cmVhbUxhbmd1YWdlLmRlZmluZShzdGV4KSwgc2VsZWN0b3JzOiBbICdsYXRleCcsICd0ZXgnIF0gfSxcclxuICB7IG1vZGU6IFN0cmVhbUxhbmd1YWdlLmRlZmluZShzd2lmdCksIHNlbGVjdG9yczogWydzd2lmdCddIH0sXHJcbiAgeyBtb2RlOiBTdHJlYW1MYW5ndWFnZS5kZWZpbmUodGNsKSwgc2VsZWN0b3JzOiBbJ3RjbCddIH0sXHJcbiAgeyBtb2RlOiBTdHJlYW1MYW5ndWFnZS5kZWZpbmUodG9tbCksIHNlbGVjdG9yczogWyAndG9tbCcsICdpbmknIF0gfSxcclxuICB7IG1vZGU6IFN0cmVhbUxhbmd1YWdlLmRlZmluZSh0dXJ0bGUpLCBzZWxlY3RvcnM6IFsgJ3R1cnRsZScsICd0dGwnIF0gfSxcclxuICB7IG1vZGU6IFN0cmVhbUxhbmd1YWdlLmRlZmluZSh2YiksIHNlbGVjdG9yczogWyAndmIubmV0JywgJ3ZiJywgJ3Zpc3VhbGJhc2ljJyBdIH0sXHJcbiAgeyBtb2RlOiBTdHJlYW1MYW5ndWFnZS5kZWZpbmUodmVyaWxvZyksIHNlbGVjdG9yczogWyAndmVyaWxvZycsICd2JyBdIH0sXHJcbiAgeyBtb2RlOiBTdHJlYW1MYW5ndWFnZS5kZWZpbmUodmhkbCksIHNlbGVjdG9yczogWyAndmhkbCcsICd2aGQnIF0gfSxcclxuICB7IG1vZGU6IFN0cmVhbUxhbmd1YWdlLmRlZmluZSh4bWwpLCBzZWxlY3RvcnM6IFsneG1sJ10gfSxcclxuICB7IG1vZGU6IHlhbWwoKS5sYW5ndWFnZSwgc2VsZWN0b3JzOiBbICd5YW1sJywgJ3ltbCcgXSB9LFxyXG4gIHsgbW9kZTogamF2YXNjcmlwdCh7IHR5cGVzY3JpcHQ6IHRydWUgfSkubGFuZ3VhZ2UsIHNlbGVjdG9yczogWyAndHlwZXNjcmlwdCcsICd0cycgXSB9XHJcbl1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTWFya2Rvd25QYXJzZXJDb25maWcge1xyXG4gIHprbkxpbmtQYXJzZXJDb25maWc/OiBaa25MaW5rUGFyc2VyQ29uZmlnXHJcbn1cclxuXHJcbi8vIFRJUDogVW5jb21tZW50IHRoZSBmb2xsb3dpbmcgbGluZSB0byBnZXQgYSBmdWxsIGxpc3Qgb2YgYWxsIHVuaXF1ZSBjaGFyYWN0ZXJzXHJcbi8vIHRoYXQgYXJlIGNhcGFibGUgb2YgYmVsb25naW5nIHRvIGEgc2VsZWN0b3JcclxuLy8gY29uc29sZS5sb2coWy4uLm5ldyBTZXQoY29kZUxhbmd1YWdlcy5tYXAoeCA9PiB4LnNlbGVjdG9ycykuZmxhdCgpLmpvaW4oJycpLnNwbGl0KCcnKSldKVxyXG5cclxuLy8gVGhpcyBmaWxlIHJldHVybnMgYSBzeW50YXggZXh0ZW5zaW9uIHRoYXQgcHJvdmlkZXMgcGFyc2luZyBhbmQgc3ludGF4XHJcbi8vIGNhcGFiaWxpdGllc1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYXJrZG93blBhcnNlciAoY29uZmlnPzogTWFya2Rvd25QYXJzZXJDb25maWcpOiBMYW5ndWFnZVN1cHBvcnQge1xyXG4gIHJldHVybiBtYXJrZG93bih7XHJcbiAgICBiYXNlOiBtYXJrZG93bkxhbmd1YWdlLFxyXG4gICAgY29kZUxhbmd1YWdlczogKGluZm9TdHJpbmcpID0+IHtcclxuICAgICAgLy8gaW5mb3N0cmluZ3MgbXVzdCBzdGFydCB3aXRoIHRoZSBsYW5ndWFnZSBhbmQgY2FuIGJlIHN1cnJvdW5kZWQgYnkgY3VybHlcclxuICAgICAgLy8gYnJhY2tldHMuIFdlIGp1c3QgZXh0cmFjdCBldmVyeXRoaW5nIGZyb20gdGhlIGJlZ2lubmluZyB0aGF0IGlzIGFuXHJcbiAgICAgIC8vIGFsbG93ZWQgc2VsZWN0b3ItcGFydFxyXG4gICAgICBjb25zdCBtYXRjaCA9IC9eez8oW2Etei4jKy1dKykvLmV4ZWMoaW5mb1N0cmluZy50b0xvd2VyQ2FzZSgpKVxyXG4gICAgICBpZiAobWF0Y2ggPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBSZXR1cm4gYW4gYWRlcXVhdGUgbGFuZ3VhZ2VcclxuICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBjb2RlTGFuZ3VhZ2VzKSB7XHJcbiAgICAgICAgaWYgKGVudHJ5LnNlbGVjdG9ycy5pbmNsdWRlcyhtYXRjaFsxXSkpIHtcclxuICAgICAgICAgIHJldHVybiBlbnRyeS5tb2RlXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gbnVsbFxyXG4gICAgfSxcclxuICAgIGV4dGVuc2lvbnM6IHtcclxuICAgICAgLy8geWFtbENvZGVQYXJzZSBpcyBhIHdyYXBwZXIgdGhhdCBzY2FucyB0aGUgZG9jdW1lbnQgZm9yIHRoZSBleGlzdGVuY2Ugb2ZcclxuICAgICAgLy8gYSBZQU1MIGZyb250bWF0dGVyIGFuZCB0aGVuIHBhcnNlcyBpdHMgY29udGVudHMuIE5PVEU6IFNpbmNlIGEgc2luZ2xlXHJcbiAgICAgIC8vIE1hcmtkb3duQ29uZmlnIG9ubHkgYWNjZXB0cyBvbmUgcGFyc2UsIEkgY291bGQgZWl0aGVyIGFkZCBhZGRpdGlvbmFsXHJcbiAgICAgIC8vIGxvZ2ljIHRvIGEgZ2VuZXJhbGl6ZWQgcGFyc2VyLCBvciBzdGFydCBwYXNzaW5nIGFkZGl0aW9uYWwgY29uZmlnXHJcbiAgICAgIC8vIG9wdGlvbnMgaGVyZSwgc2luY2UgXCJleHRlbnNpb25zXCIgYWxzbyB0YWtlcyBhbiBhcnJheS5cclxuICAgICAgd3JhcDogeWFtbENvZGVQYXJzZSgpLFxyXG4gICAgICBwYXJzZUJsb2NrOiBbXHJcbiAgICAgICAgLy8gVGhpcyBCbG9ja1BhcnNlciBwYXJzZXMgWUFNTCBmcm9udG1hdHRlcnNcclxuICAgICAgICBmcm9udG1hdHRlclBhcnNlcixcclxuICAgICAgICAvLyBUaGlzIEJsb2NrUGFyc2VyIHBhcnNlcyBtYXRoIGJsb2Nrc1xyXG4gICAgICAgIGJsb2NrTWF0aFBhcnNlcixcclxuICAgICAgICBmb290bm90ZVJlZlBhcnNlcixcclxuICAgICAgICBncmlkVGFibGVQYXJzZXIsXHJcbiAgICAgICAgcGlwZVRhYmxlUGFyc2VyXHJcbiAgICAgIF0sXHJcbiAgICAgIHBhcnNlSW5saW5lOiBbXHJcbiAgICAgICAgLy8gQWRkIGlubGluZSBwYXJzZXJzIHRoYXQgYWRkIEFTVCBlbGVtZW50cyBmb3IgdmFyaW91cyBhZGRpdGlvbmFsIHR5cGVzXHJcbiAgICAgICAgaW5saW5lTWF0aFBhcnNlcixcclxuICAgICAgICBmb290bm90ZVBhcnNlcixcclxuICAgICAgICBjaXRhdGlvblBhcnNlcixcclxuICAgICAgICBzbG9wcHlQYXJzZXIsXHJcbiAgICAgICAgemtuTGlua1BhcnNlcihjb25maWc/LnprbkxpbmtQYXJzZXJDb25maWcpLFxyXG4gICAgICAgIHprblRhZ1BhcnNlcixcclxuICAgICAgICBwYW5kb2NBdHRyaWJ1dGVzUGFyc2VyLFxyXG4gICAgICAgIGhpZ2hsaWdodFBhcnNlclxyXG4gICAgICBdLFxyXG4gICAgICAvLyBXZSBoYXZlIHRvIG5vdGlmeSB0aGUgbWFya2Rvd24gcGFyc2VyIGFib3V0IHRoZSBhZGRpdGlvbmFsIE5vZGUgVHlwZXNcclxuICAgICAgLy8gdGhhdCB0aGUgWUFNTCBibG9jayBwYXJzZXIgdXRpbGl6ZXNcclxuICAgICAgLy8gTk9URTogQ2hhbmdlcyBoZXJlIG11c3QgYmUgcmVmbGVjdGVkIGluIHV0aWwvY3VzdG9tLXRhZ3MudHMgYW5kIHRoZW1lL3N5bnRheC50cyFcclxuICAgICAgZGVmaW5lTm9kZXM6IFtcclxuICAgICAgICB7IG5hbWU6ICdZQU1MRnJvbnRtYXR0ZXInIH0sXHJcbiAgICAgICAgeyBuYW1lOiAnWUFNTEZyb250bWF0dGVyU3RhcnQnLCBzdHlsZTogY3VzdG9tVGFncy5ZQU1MRnJvbnRtYXR0ZXJTdGFydCB9LFxyXG4gICAgICAgIHsgbmFtZTogJ1lBTUxGcm9udG1hdHRlckVuZCcsIHN0eWxlOiBjdXN0b21UYWdzLllBTUxGcm9udG1hdHRlckVuZCB9LFxyXG4gICAgICAgIHsgbmFtZTogJ0NpdGF0aW9uJywgc3R5bGU6IGN1c3RvbVRhZ3MuQ2l0YXRpb24gfSxcclxuICAgICAgICB7IG5hbWU6ICdIaWdobGlnaHRNYXJrJywgc3R5bGU6IGN1c3RvbVRhZ3MuSGlnaGxpZ2h0TWFyayB9LFxyXG4gICAgICAgIC8vIE5PVEU6IFRoZSBjb252ZW50aW9uIHtUYWdOYW1lfS8uLi4gbWVhbnMgdGhhdCB0aGUgY29ycmVzcG9uZGluZyBzdHlsZXNcclxuICAgICAgICAvLyBmcm9tIHRoZSBzeW50YXggdGhlbWUgZ2V0IGFzc2lnbmVkIHRvIGFsbCBjaGlsZCBub2RlcyB0aGF0IGFyZSBjb250YWluZWRcclxuICAgICAgICAvLyB3aXRoaW4gdGhpcyBub2RlIGFzIHdlbGwuIFRoZSBkZWZhdWx0IGlzIHRvIG9ubHkgc3R5bGUgb3RoZXJ3aXNlIFwiZW1wdHlcIlxyXG4gICAgICAgIC8vIHNwYW5zIG9mIHBsYWluIHRleHQuXHJcbiAgICAgICAgeyBuYW1lOiAnSGlnaGxpZ2h0Q29udGVudCcsIHN0eWxlOiB7ICdIaWdobGlnaHRDb250ZW50Ly4uLic6IGN1c3RvbVRhZ3MuSGlnaGxpZ2h0Q29udGVudCB9IH0sXHJcbiAgICAgICAgeyBuYW1lOiAnRm9vdG5vdGUnLCBzdHlsZTogY3VzdG9tVGFncy5Gb290bm90ZSB9LFxyXG4gICAgICAgIHsgbmFtZTogJ0Zvb3Rub3RlUmVmJywgc3R5bGU6IGN1c3RvbVRhZ3MuRm9vdG5vdGVSZWYgfSxcclxuICAgICAgICB7IG5hbWU6ICdGb290bm90ZVJlZkxhYmVsJywgc3R5bGU6IGN1c3RvbVRhZ3MuRm9vdG5vdGVSZWZMYWJlbCB9LFxyXG4gICAgICAgIHsgbmFtZTogJ0Zvb3Rub3RlUmVmQm9keScsIHN0eWxlOiBjdXN0b21UYWdzLkZvb3Rub3RlUmVmQm9keSB9LFxyXG4gICAgICAgIHsgbmFtZTogJ1prbkxpbmsnLCBzdHlsZTogY3VzdG9tVGFncy5aa25MaW5rIH0sXHJcbiAgICAgICAgeyBuYW1lOiAnWmtuTGlua0NvbnRlbnQnLCBzdHlsZTogY3VzdG9tVGFncy5aa25MaW5rQ29udGVudCB9LFxyXG4gICAgICAgIHsgbmFtZTogJ1prbkxpbmtUaXRsZScsIHN0eWxlOiBjdXN0b21UYWdzLlprbkxpbmtUaXRsZSB9LFxyXG4gICAgICAgIHsgbmFtZTogJ1prbkxpbmtQaXBlJywgc3R5bGU6IGN1c3RvbVRhZ3MuWmtuTGlua1BpcGUgfSxcclxuICAgICAgICB7IG5hbWU6ICdaa25UYWcnLCBzdHlsZTogY3VzdG9tVGFncy5aa25UYWcgfSxcclxuICAgICAgICB7IG5hbWU6ICdaa25UYWdDb250ZW50Jywgc3R5bGU6IGN1c3RvbVRhZ3MuWmtuVGFnQ29udGVudCB9LFxyXG4gICAgICAgIHsgbmFtZTogJ1BhbmRvY0F0dHJpYnV0ZScsIHN0eWxlOiBjdXN0b21UYWdzLlBhbmRvY0F0dHJpYnV0ZSB9XHJcbiAgICAgIF1cclxuICAgIH1cclxuICB9KVxyXG59XHJcbiJdfQ=="]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"9a86fd9eb2d768637af92e13f2db555c086d24b3","contentHash":"05875631fc35556d1b3cc86835a7a984ce5ec5040613239f3d467e64419d560b"},"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-editor\\util\\custom-tags.ts":{"path":"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-editor\\util\\custom-tags.ts","statementMap":{"0":{"start":{"line":18,"column":0},"end":{"line":18,"column":62}},"1":{"start":{"line":19,"column":0},"end":{"line":19,"column":28}},"2":{"start":{"line":20,"column":20},"end":{"line":20,"column":47}},"3":{"start":{"line":22,"column":0},"end":{"line":47,"column":2}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-editor/util/custom-tags.ts","sources":["C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-editor/util/custom-tags.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb;;;;;;;;;;;;;;;GAeG;AACH,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9D,OAAO,CAAC,UAAU,GAAG,KAAK,CAAC,CAAC;AAC5B,MAAM,WAAW,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;AAChD,wFAAwF;AACxF,OAAO,CAAC,UAAU,GAAG;IACjB,eAAe,EAAE,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC;IACnE,oBAAoB,EAAE,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC;IAC/E,kBAAkB,EAAE,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC;IAC7E,mDAAmD;IACnD,mBAAmB,EAAE,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE;IAC7C,kBAAkB,EAAE,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE;IAC5C,kBAAkB,EAAE,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE;IAC5C,QAAQ,EAAE,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE;IAClC,QAAQ,EAAE,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE;IAClC,WAAW,EAAE,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE;IACrC,gBAAgB,EAAE,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE;IAC1C,eAAe,EAAE,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE;IACzC,qBAAqB;IACrB,OAAO,EAAE,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE;IACjC,cAAc,EAAE,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE;IACxC,YAAY,EAAE,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE;IACtC,WAAW,EAAE,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,qBAAqB,CAAC;IAC3E,oBAAoB;IACpB,MAAM,EAAE,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE;IAChC,aAAa,EAAE,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE;IACvC,8DAA8D;IAC9D,eAAe,EAAE,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE;IACzC,aAAa,EAAE,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE;IACvC,gBAAgB,EAAE,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE;CAC7C,CAAC","sourcesContent":["\"use strict\";\n/**\n * @ignore\n * BEGIN HEADER\n *\n * Contains:        Custom Tags\n * CVM-Role:        Utility Function\n * Maintainer:      Hendrik Erz\n * License:         GNU GPL v3\n *\n * Description:     This module defines custom tags that our custom parsers add\n *                  to the Lezer Trees emitted by the Markdown mode. These tags\n *                  are provided both to the Markdown parser as well as the\n *                  highlighter mode so they know about them.\n *\n * END HEADER\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.customTags = void 0;\nconst highlight_1 = require(\"@lezer/highlight\");\n// NOTE: Changes here must be reflected in theme/syntax.ts and parser/markdown-parser.ts\nexports.customTags = {\n    YAMLFrontmatter: highlight_1.Tag.define(highlight_1.tags.monospace),\n    YAMLFrontmatterStart: highlight_1.Tag.define(highlight_1.tags.contentSeparator),\n    YAMLFrontmatterEnd: highlight_1.Tag.define(highlight_1.tags.contentSeparator),\n    // Meta-tags only used to contain the actual values\n    YAMLFrontmatterPair: highlight_1.Tag.define(),\n    YAMLFrontmatterSeq: highlight_1.Tag.define(),\n    YAMLFrontmatterMap: highlight_1.Tag.define(),\n    Citation: highlight_1.Tag.define(),\n    Footnote: highlight_1.Tag.define(),\n    FootnoteRef: highlight_1.Tag.define(),\n    FootnoteRefLabel: highlight_1.Tag.define(),\n    FootnoteRefBody: highlight_1.Tag.define(),\n    // Zettelkasten links\n    ZknLink: highlight_1.Tag.define(),\n    ZknLinkContent: highlight_1.Tag.define(),\n    ZknLinkTitle: highlight_1.Tag.define(),\n    ZknLinkPipe: highlight_1.Tag.define(highlight_1.tags.processingInstruction),\n    // Zettelkasten tags\n    ZknTag: highlight_1.Tag.define(),\n    ZknTagContent: highlight_1.Tag.define(),\n    // Pandoc attributes, like: `# Heading or Title {.unnumbered}`\n    PandocAttribute: highlight_1.Tag.define(),\n    HighlightMark: highlight_1.Tag.define(),\n    HighlightContent: highlight_1.Tag.define()\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzovVXNlcnMvSm9zaCBFL0RvY3VtZW50cy9aZXR0bHItc3dlbmc0MzEvc291cmNlL2NvbW1vbi9tb2R1bGVzL21hcmtkb3duLWVkaXRvci91dGlsL2N1c3RvbS10YWdzLnRzIiwic291cmNlcyI6WyJDOi9Vc2Vycy9Kb3NoIEUvRG9jdW1lbnRzL1pldHRsci1zd2VuZzQzMS9zb3VyY2UvY29tbW9uL21vZHVsZXMvbWFya2Rvd24tZWRpdG9yL3V0aWwvY3VzdG9tLXRhZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRzs7O0FBRUgsZ0RBQTRDO0FBRTVDLHdGQUF3RjtBQUMzRSxRQUFBLFVBQVUsR0FBRztJQUN4QixlQUFlLEVBQUUsZUFBRyxDQUFDLE1BQU0sQ0FBQyxnQkFBSSxDQUFDLFNBQVMsQ0FBQztJQUMzQyxvQkFBb0IsRUFBRSxlQUFHLENBQUMsTUFBTSxDQUFDLGdCQUFJLENBQUMsZ0JBQWdCLENBQUM7SUFDdkQsa0JBQWtCLEVBQUUsZUFBRyxDQUFDLE1BQU0sQ0FBQyxnQkFBSSxDQUFDLGdCQUFnQixDQUFDO0lBQ3JELG1EQUFtRDtJQUNuRCxtQkFBbUIsRUFBRSxlQUFHLENBQUMsTUFBTSxFQUFFO0lBQ2pDLGtCQUFrQixFQUFFLGVBQUcsQ0FBQyxNQUFNLEVBQUU7SUFDaEMsa0JBQWtCLEVBQUUsZUFBRyxDQUFDLE1BQU0sRUFBRTtJQUNoQyxRQUFRLEVBQUUsZUFBRyxDQUFDLE1BQU0sRUFBRTtJQUN0QixRQUFRLEVBQUUsZUFBRyxDQUFDLE1BQU0sRUFBRTtJQUN0QixXQUFXLEVBQUUsZUFBRyxDQUFDLE1BQU0sRUFBRTtJQUN6QixnQkFBZ0IsRUFBRSxlQUFHLENBQUMsTUFBTSxFQUFFO0lBQzlCLGVBQWUsRUFBRSxlQUFHLENBQUMsTUFBTSxFQUFFO0lBQzdCLHFCQUFxQjtJQUNyQixPQUFPLEVBQUUsZUFBRyxDQUFDLE1BQU0sRUFBRTtJQUNyQixjQUFjLEVBQUUsZUFBRyxDQUFDLE1BQU0sRUFBRTtJQUM1QixZQUFZLEVBQUUsZUFBRyxDQUFDLE1BQU0sRUFBRTtJQUMxQixXQUFXLEVBQUUsZUFBRyxDQUFDLE1BQU0sQ0FBQyxnQkFBSSxDQUFDLHFCQUFxQixDQUFDO0lBQ25ELG9CQUFvQjtJQUNwQixNQUFNLEVBQUUsZUFBRyxDQUFDLE1BQU0sRUFBRTtJQUNwQixhQUFhLEVBQUUsZUFBRyxDQUFDLE1BQU0sRUFBRTtJQUMzQiw4REFBOEQ7SUFDOUQsZUFBZSxFQUFFLGVBQUcsQ0FBQyxNQUFNLEVBQUU7SUFDN0IsYUFBYSxFQUFFLGVBQUcsQ0FBQyxNQUFNLEVBQUU7SUFDM0IsZ0JBQWdCLEVBQUUsZUFBRyxDQUFDLE1BQU0sRUFBRTtDQUMvQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBpZ25vcmVcclxuICogQkVHSU4gSEVBREVSXHJcbiAqXHJcbiAqIENvbnRhaW5zOiAgICAgICAgQ3VzdG9tIFRhZ3NcclxuICogQ1ZNLVJvbGU6ICAgICAgICBVdGlsaXR5IEZ1bmN0aW9uXHJcbiAqIE1haW50YWluZXI6ICAgICAgSGVuZHJpayBFcnpcclxuICogTGljZW5zZTogICAgICAgICBHTlUgR1BMIHYzXHJcbiAqXHJcbiAqIERlc2NyaXB0aW9uOiAgICAgVGhpcyBtb2R1bGUgZGVmaW5lcyBjdXN0b20gdGFncyB0aGF0IG91ciBjdXN0b20gcGFyc2VycyBhZGRcclxuICogICAgICAgICAgICAgICAgICB0byB0aGUgTGV6ZXIgVHJlZXMgZW1pdHRlZCBieSB0aGUgTWFya2Rvd24gbW9kZS4gVGhlc2UgdGFnc1xyXG4gKiAgICAgICAgICAgICAgICAgIGFyZSBwcm92aWRlZCBib3RoIHRvIHRoZSBNYXJrZG93biBwYXJzZXIgYXMgd2VsbCBhcyB0aGVcclxuICogICAgICAgICAgICAgICAgICBoaWdobGlnaHRlciBtb2RlIHNvIHRoZXkga25vdyBhYm91dCB0aGVtLlxyXG4gKlxyXG4gKiBFTkQgSEVBREVSXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgVGFnLCB0YWdzIH0gZnJvbSAnQGxlemVyL2hpZ2hsaWdodCdcclxuXHJcbi8vIE5PVEU6IENoYW5nZXMgaGVyZSBtdXN0IGJlIHJlZmxlY3RlZCBpbiB0aGVtZS9zeW50YXgudHMgYW5kIHBhcnNlci9tYXJrZG93bi1wYXJzZXIudHNcclxuZXhwb3J0IGNvbnN0IGN1c3RvbVRhZ3MgPSB7XHJcbiAgWUFNTEZyb250bWF0dGVyOiBUYWcuZGVmaW5lKHRhZ3MubW9ub3NwYWNlKSxcclxuICBZQU1MRnJvbnRtYXR0ZXJTdGFydDogVGFnLmRlZmluZSh0YWdzLmNvbnRlbnRTZXBhcmF0b3IpLFxyXG4gIFlBTUxGcm9udG1hdHRlckVuZDogVGFnLmRlZmluZSh0YWdzLmNvbnRlbnRTZXBhcmF0b3IpLFxyXG4gIC8vIE1ldGEtdGFncyBvbmx5IHVzZWQgdG8gY29udGFpbiB0aGUgYWN0dWFsIHZhbHVlc1xyXG4gIFlBTUxGcm9udG1hdHRlclBhaXI6IFRhZy5kZWZpbmUoKSxcclxuICBZQU1MRnJvbnRtYXR0ZXJTZXE6IFRhZy5kZWZpbmUoKSxcclxuICBZQU1MRnJvbnRtYXR0ZXJNYXA6IFRhZy5kZWZpbmUoKSxcclxuICBDaXRhdGlvbjogVGFnLmRlZmluZSgpLFxyXG4gIEZvb3Rub3RlOiBUYWcuZGVmaW5lKCksXHJcbiAgRm9vdG5vdGVSZWY6IFRhZy5kZWZpbmUoKSxcclxuICBGb290bm90ZVJlZkxhYmVsOiBUYWcuZGVmaW5lKCksXHJcbiAgRm9vdG5vdGVSZWZCb2R5OiBUYWcuZGVmaW5lKCksXHJcbiAgLy8gWmV0dGVsa2FzdGVuIGxpbmtzXHJcbiAgWmtuTGluazogVGFnLmRlZmluZSgpLFxyXG4gIFprbkxpbmtDb250ZW50OiBUYWcuZGVmaW5lKCksXHJcbiAgWmtuTGlua1RpdGxlOiBUYWcuZGVmaW5lKCksXHJcbiAgWmtuTGlua1BpcGU6IFRhZy5kZWZpbmUodGFncy5wcm9jZXNzaW5nSW5zdHJ1Y3Rpb24pLFxyXG4gIC8vIFpldHRlbGthc3RlbiB0YWdzXHJcbiAgWmtuVGFnOiBUYWcuZGVmaW5lKCksXHJcbiAgWmtuVGFnQ29udGVudDogVGFnLmRlZmluZSgpLFxyXG4gIC8vIFBhbmRvYyBhdHRyaWJ1dGVzLCBsaWtlOiBgIyBIZWFkaW5nIG9yIFRpdGxlIHsudW5udW1iZXJlZH1gXHJcbiAgUGFuZG9jQXR0cmlidXRlOiBUYWcuZGVmaW5lKCksXHJcbiAgSGlnaGxpZ2h0TWFyazogVGFnLmRlZmluZSgpLFxyXG4gIEhpZ2hsaWdodENvbnRlbnQ6IFRhZy5kZWZpbmUoKVxyXG59XHJcbiJdfQ=="]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"323c5efce2c0e7409cf87bc93d96662a4dbbea36","contentHash":"adcf233290596d737c580d93f83760a285c74a6dbafd30434395cdba5e3f74b4"},"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-editor\\parser\\citation-parser.ts":{"path":"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-editor\\parser\\citation-parser.ts","statementMap":{"0":{"start":{"line":15,"column":22},"end":{"line":17,"column":1}},"1":{"start":{"line":16,"column":4},"end":{"line":16,"column":62}},"2":{"start":{"line":18,"column":0},"end":{"line":18,"column":62}},"3":{"start":{"line":19,"column":0},"end":{"line":19,"column":32}},"4":{"start":{"line":20,"column":28},"end":{"line":20,"column":86}},"5":{"start":{"line":22,"column":0},"end":{"line":56,"column":2}},"6":{"start":{"line":28,"column":8},"end":{"line":31,"column":9}},"7":{"start":{"line":30,"column":12},"end":{"line":30,"column":22}},"8":{"start":{"line":33,"column":22},"end":{"line":33,"column":54}},"9":{"start":{"line":35,"column":27},"end":{"line":35,"column":65}},"10":{"start":{"line":39,"column":28},"end":{"line":39,"column":80}},"11":{"start":{"line":40,"column":8},"end":{"line":42,"column":9}},"12":{"start":{"line":41,"column":12},"end":{"line":41,"column":22}},"13":{"start":{"line":48,"column":26},"end":{"line":48,"column":91}},"14":{"start":{"line":48,"column":78},"end":{"line":48,"column":90}},"15":{"start":{"line":50,"column":8},"end":{"line":52,"column":9}},"16":{"start":{"line":51,"column":12},"end":{"line":51,"column":22}},"17":{"start":{"line":54,"column":8},"end":{"line":54,"column":90}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":15,"column":56},"end":{"line":15,"column":57}},"loc":{"start":{"line":15,"column":71},"end":{"line":17,"column":1}},"line":15},"1":{"name":"(anonymous_1)","decl":{"start":{"line":26,"column":11},"end":{"line":26,"column":12}},"loc":{"start":{"line":26,"column":31},"end":{"line":55,"column":5}},"line":26},"2":{"name":"(anonymous_2)","decl":{"start":{"line":48,"column":73},"end":{"line":48,"column":74}},"loc":{"start":{"line":48,"column":78},"end":{"line":48,"column":90}},"line":48}},"branchMap":{"0":{"loc":{"start":{"line":15,"column":22},"end":{"line":17,"column":1}},"type":"binary-expr","locations":[{"start":{"line":15,"column":23},"end":{"line":15,"column":27}},{"start":{"line":15,"column":31},"end":{"line":15,"column":51}},{"start":{"line":15,"column":56},"end":{"line":17,"column":1}}],"line":15},"1":{"loc":{"start":{"line":16,"column":11},"end":{"line":16,"column":61}},"type":"cond-expr","locations":[{"start":{"line":16,"column":37},"end":{"line":16,"column":40}},{"start":{"line":16,"column":43},"end":{"line":16,"column":61}}],"line":16},"2":{"loc":{"start":{"line":16,"column":12},"end":{"line":16,"column":33}},"type":"binary-expr","locations":[{"start":{"line":16,"column":12},"end":{"line":16,"column":15}},{"start":{"line":16,"column":19},"end":{"line":16,"column":33}}],"line":16},"3":{"loc":{"start":{"line":28,"column":8},"end":{"line":31,"column":9}},"type":"if","locations":[{"start":{"line":28,"column":8},"end":{"line":31,"column":9}},{"start":{},"end":{}}],"line":28},"4":{"loc":{"start":{"line":28,"column":12},"end":{"line":28,"column":38}},"type":"binary-expr","locations":[{"start":{"line":28,"column":12},"end":{"line":28,"column":23}},{"start":{"line":28,"column":27},"end":{"line":28,"column":38}}],"line":28},"5":{"loc":{"start":{"line":35,"column":27},"end":{"line":35,"column":65}},"type":"cond-expr","locations":[{"start":{"line":35,"column":37},"end":{"line":35,"column":60}},{"start":{"line":35,"column":63},"end":{"line":35,"column":65}}],"line":35},"6":{"loc":{"start":{"line":39,"column":28},"end":{"line":39,"column":80}},"type":"binary-expr","locations":[{"start":{"line":39,"column":28},"end":{"line":39,"column":45}},{"start":{"line":39,"column":49},"end":{"line":39,"column":80}}],"line":39},"7":{"loc":{"start":{"line":40,"column":8},"end":{"line":42,"column":9}},"type":"if","locations":[{"start":{"line":40,"column":8},"end":{"line":42,"column":9}},{"start":{},"end":{}}],"line":40},"8":{"loc":{"start":{"line":50,"column":8},"end":{"line":52,"column":9}},"type":"if","locations":[{"start":{"line":50,"column":8},"end":{"line":52,"column":9}},{"start":{},"end":{}}],"line":50}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"f":{"0":1,"1":0,"2":0},"b":{"0":[1,1,1],"1":[1,0],"2":[1,1],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-editor/parser/citation-parser.ts","sources":["C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-editor/parser/citation-parser.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb;;;;;;;;;;;;GAYG;AACH,IAAI,eAAe,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,UAAU,GAAG;IACjE,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC;AAC9D,CAAC,CAAC;AACF,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9D,OAAO,CAAC,cAAc,GAAG,KAAK,CAAC,CAAC;AAChC,MAAM,mBAAmB,GAAG,eAAe,CAAC,OAAO,CAAC,gCAAgC,CAAC,CAAC,CAAC;AACvF,yFAAyF;AACzF,OAAO,CAAC,cAAc,GAAG;IACrB,0CAA0C;IAC1C,IAAI,EAAE,WAAW;IACjB,MAAM,EAAE,MAAM,EAAE,0DAA0D;IAC1E,KAAK,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE;QACtB,0DAA0D;QAC1D,IAAI,IAAI,KAAK,EAAE,IAAI,IAAI,KAAK,EAAE,EAAE,CAAC;YAC7B,iBAAiB;YACjB,OAAO,CAAC,CAAC,CAAC;QACd,CAAC;QACD,6BAA6B;QAC7B,MAAM,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;QAC/C,uCAAuC;QACvC,MAAM,UAAU,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAC1D,2EAA2E;QAC3E,0EAA0E;QAC1E,sBAAsB;QACtB,MAAM,WAAW,GAAG,UAAU,KAAK,EAAE,IAAI,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QACzE,IAAI,CAAC,WAAW,EAAE,CAAC;YACf,OAAO,CAAC,CAAC,CAAC;QACd,CAAC;QACD,4EAA4E;QAC5E,0EAA0E;QAC1E,0EAA0E;QAC1E,2EAA2E;QAC3E,2DAA2D;QAC3D,MAAM,SAAS,GAAG,CAAC,CAAC,EAAE,mBAAmB,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC;QACpF,sEAAsE;QACtE,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACzB,OAAO,CAAC,CAAC,CAAC;QACd,CAAC;QACD,+DAA+D;QAC/D,OAAO,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,EAAE,GAAG,EAAE,GAAG,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;IACtF,CAAC;CACJ,CAAC","sourcesContent":["\"use strict\";\n/**\n * @ignore\n * BEGIN HEADER\n *\n * Contains:        Citation Parser\n * CVM-Role:        InlineParser\n * Maintainer:      Hendrik Erz\n * License:         GNU GPL v3\n *\n * Description:     This inline parser adds citation elements to the Lezer tree.\n *\n * END HEADER\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.citationParser = void 0;\nconst extract_citations_1 = __importDefault(require(\"@common/util/extract-citations\"));\n// TODO: Docs for this: https://github.com/lezer-parser/markdown#user-content-blockparser\nexports.citationParser = {\n    // This parser should only match citations\n    name: 'citations',\n    before: 'Link', // [@citekey, p. 123] will otherwise be detected as a link\n    parse: (ctx, next, pos) => {\n        // The next char must be either an opening bracket or an @\n        if (next !== 64 && next !== 91) {\n            // 64 = [; 91 = @\n            return -1;\n        }\n        // Ignore anything before pos\n        const slice = ctx.text.slice(pos - ctx.offset);\n        // Ensure the character before is valid\n        const charBefore = pos > 0 ? ctx.slice(pos - 1, pos) : '';\n        // NOTE: The Markdown mode will actually count a single inline context with\n        // single linebreaks in between (due to hard-wrapping), so we also have to\n        // check for newlines.\n        const validBefore = charBefore === '' || '( \\n\\r\\t'.includes(charBefore);\n        if (!validBefore) {\n            return -1;\n        }\n        // NOTE: We MUST always extract the citations from the whole line. Otherwise\n        // @-symbols in illegal positions (e.g. emails) will be detected as valid.\n        // However, running extractCitations on a considerable piece of text has a\n        // large performance impact, so we need to ensure we only run it if there's\n        // a reasonable chance there's a citation at this position.\n        const citations = (0, extract_citations_1.default)(slice).filter(c => c.from === 0);\n        // The first found citation after currentOffset must be exactly there.\n        if (citations.length !== 1) {\n            return -1;\n        }\n        // At this point we have a citation and it's at the current pos\n        return ctx.addElement(ctx.elt('Citation', pos, pos + citations[0].source.length));\n    }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzovVXNlcnMvSm9zaCBFL0RvY3VtZW50cy9aZXR0bHItc3dlbmc0MzEvc291cmNlL2NvbW1vbi9tb2R1bGVzL21hcmtkb3duLWVkaXRvci9wYXJzZXIvY2l0YXRpb24tcGFyc2VyLnRzIiwic291cmNlcyI6WyJDOi9Vc2Vycy9Kb3NoIEUvRG9jdW1lbnRzL1pldHRsci1zd2VuZzQzMS9zb3VyY2UvY29tbW9uL21vZHVsZXMvbWFya2Rvd24tZWRpdG9yL3BhcnNlci9jaXRhdGlvbi1wYXJzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7R0FZRzs7Ozs7O0FBR0gsdUZBQTZEO0FBRTdELHlGQUF5RjtBQUM1RSxRQUFBLGNBQWMsR0FBaUI7SUFDMUMsMENBQTBDO0lBQzFDLElBQUksRUFBRSxXQUFXO0lBQ2pCLE1BQU0sRUFBRSxNQUFNLEVBQUUsMERBQTBEO0lBQzFFLEtBQUssRUFBRSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDeEIsMERBQTBEO1FBQzFELElBQUksSUFBSSxLQUFLLEVBQUUsSUFBSSxJQUFJLEtBQUssRUFBRSxFQUFFLENBQUM7WUFDL0IsaUJBQWlCO1lBQ2pCLE9BQU8sQ0FBQyxDQUFDLENBQUE7UUFDWCxDQUFDO1FBRUQsNkJBQTZCO1FBQzdCLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUE7UUFFOUMsdUNBQXVDO1FBQ3ZDLE1BQU0sVUFBVSxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBO1FBQ3pELDJFQUEyRTtRQUMzRSwwRUFBMEU7UUFDMUUsc0JBQXNCO1FBQ3RCLE1BQU0sV0FBVyxHQUFHLFVBQVUsS0FBSyxFQUFFLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUN4RSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDakIsT0FBTyxDQUFDLENBQUMsQ0FBQTtRQUNYLENBQUM7UUFFRCw0RUFBNEU7UUFDNUUsMEVBQTBFO1FBQzFFLDBFQUEwRTtRQUMxRSwyRUFBMkU7UUFDM0UsMkRBQTJEO1FBQzNELE1BQU0sU0FBUyxHQUFHLElBQUEsMkJBQWdCLEVBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQTtRQUVuRSxzRUFBc0U7UUFDdEUsSUFBSSxTQUFTLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQzNCLE9BQU8sQ0FBQyxDQUFDLENBQUE7UUFDWCxDQUFDO1FBRUQsK0RBQStEO1FBQy9ELE9BQU8sR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUUsR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQTtJQUNuRixDQUFDO0NBQ0YsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAaWdub3JlXHJcbiAqIEJFR0lOIEhFQURFUlxyXG4gKlxyXG4gKiBDb250YWluczogICAgICAgIENpdGF0aW9uIFBhcnNlclxyXG4gKiBDVk0tUm9sZTogICAgICAgIElubGluZVBhcnNlclxyXG4gKiBNYWludGFpbmVyOiAgICAgIEhlbmRyaWsgRXJ6XHJcbiAqIExpY2Vuc2U6ICAgICAgICAgR05VIEdQTCB2M1xyXG4gKlxyXG4gKiBEZXNjcmlwdGlvbjogICAgIFRoaXMgaW5saW5lIHBhcnNlciBhZGRzIGNpdGF0aW9uIGVsZW1lbnRzIHRvIHRoZSBMZXplciB0cmVlLlxyXG4gKlxyXG4gKiBFTkQgSEVBREVSXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgdHlwZSBJbmxpbmVQYXJzZXIgfSBmcm9tICdAbGV6ZXIvbWFya2Rvd24nXHJcbmltcG9ydCBleHRyYWN0Q2l0YXRpb25zIGZyb20gJ0Bjb21tb24vdXRpbC9leHRyYWN0LWNpdGF0aW9ucydcclxuXHJcbi8vIFRPRE86IERvY3MgZm9yIHRoaXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9sZXplci1wYXJzZXIvbWFya2Rvd24jdXNlci1jb250ZW50LWJsb2NrcGFyc2VyXHJcbmV4cG9ydCBjb25zdCBjaXRhdGlvblBhcnNlcjogSW5saW5lUGFyc2VyID0ge1xyXG4gIC8vIFRoaXMgcGFyc2VyIHNob3VsZCBvbmx5IG1hdGNoIGNpdGF0aW9uc1xyXG4gIG5hbWU6ICdjaXRhdGlvbnMnLFxyXG4gIGJlZm9yZTogJ0xpbmsnLCAvLyBbQGNpdGVrZXksIHAuIDEyM10gd2lsbCBvdGhlcndpc2UgYmUgZGV0ZWN0ZWQgYXMgYSBsaW5rXHJcbiAgcGFyc2U6IChjdHgsIG5leHQsIHBvcykgPT4ge1xyXG4gICAgLy8gVGhlIG5leHQgY2hhciBtdXN0IGJlIGVpdGhlciBhbiBvcGVuaW5nIGJyYWNrZXQgb3IgYW4gQFxyXG4gICAgaWYgKG5leHQgIT09IDY0ICYmIG5leHQgIT09IDkxKSB7XHJcbiAgICAgIC8vIDY0ID0gWzsgOTEgPSBAXHJcbiAgICAgIHJldHVybiAtMVxyXG4gICAgfVxyXG5cclxuICAgIC8vIElnbm9yZSBhbnl0aGluZyBiZWZvcmUgcG9zXHJcbiAgICBjb25zdCBzbGljZSA9IGN0eC50ZXh0LnNsaWNlKHBvcyAtIGN0eC5vZmZzZXQpXHJcblxyXG4gICAgLy8gRW5zdXJlIHRoZSBjaGFyYWN0ZXIgYmVmb3JlIGlzIHZhbGlkXHJcbiAgICBjb25zdCBjaGFyQmVmb3JlID0gcG9zID4gMCA/IGN0eC5zbGljZShwb3MgLSAxLCBwb3MpIDogJydcclxuICAgIC8vIE5PVEU6IFRoZSBNYXJrZG93biBtb2RlIHdpbGwgYWN0dWFsbHkgY291bnQgYSBzaW5nbGUgaW5saW5lIGNvbnRleHQgd2l0aFxyXG4gICAgLy8gc2luZ2xlIGxpbmVicmVha3MgaW4gYmV0d2VlbiAoZHVlIHRvIGhhcmQtd3JhcHBpbmcpLCBzbyB3ZSBhbHNvIGhhdmUgdG9cclxuICAgIC8vIGNoZWNrIGZvciBuZXdsaW5lcy5cclxuICAgIGNvbnN0IHZhbGlkQmVmb3JlID0gY2hhckJlZm9yZSA9PT0gJycgfHwgJyggXFxuXFxyXFx0Jy5pbmNsdWRlcyhjaGFyQmVmb3JlKVxyXG4gICAgaWYgKCF2YWxpZEJlZm9yZSkge1xyXG4gICAgICByZXR1cm4gLTFcclxuICAgIH1cclxuXHJcbiAgICAvLyBOT1RFOiBXZSBNVVNUIGFsd2F5cyBleHRyYWN0IHRoZSBjaXRhdGlvbnMgZnJvbSB0aGUgd2hvbGUgbGluZS4gT3RoZXJ3aXNlXHJcbiAgICAvLyBALXN5bWJvbHMgaW4gaWxsZWdhbCBwb3NpdGlvbnMgKGUuZy4gZW1haWxzKSB3aWxsIGJlIGRldGVjdGVkIGFzIHZhbGlkLlxyXG4gICAgLy8gSG93ZXZlciwgcnVubmluZyBleHRyYWN0Q2l0YXRpb25zIG9uIGEgY29uc2lkZXJhYmxlIHBpZWNlIG9mIHRleHQgaGFzIGFcclxuICAgIC8vIGxhcmdlIHBlcmZvcm1hbmNlIGltcGFjdCwgc28gd2UgbmVlZCB0byBlbnN1cmUgd2Ugb25seSBydW4gaXQgaWYgdGhlcmUnc1xyXG4gICAgLy8gYSByZWFzb25hYmxlIGNoYW5jZSB0aGVyZSdzIGEgY2l0YXRpb24gYXQgdGhpcyBwb3NpdGlvbi5cclxuICAgIGNvbnN0IGNpdGF0aW9ucyA9IGV4dHJhY3RDaXRhdGlvbnMoc2xpY2UpLmZpbHRlcihjID0+IGMuZnJvbSA9PT0gMClcclxuXHJcbiAgICAvLyBUaGUgZmlyc3QgZm91bmQgY2l0YXRpb24gYWZ0ZXIgY3VycmVudE9mZnNldCBtdXN0IGJlIGV4YWN0bHkgdGhlcmUuXHJcbiAgICBpZiAoY2l0YXRpb25zLmxlbmd0aCAhPT0gMSkge1xyXG4gICAgICByZXR1cm4gLTFcclxuICAgIH1cclxuXHJcbiAgICAvLyBBdCB0aGlzIHBvaW50IHdlIGhhdmUgYSBjaXRhdGlvbiBhbmQgaXQncyBhdCB0aGUgY3VycmVudCBwb3NcclxuICAgIHJldHVybiBjdHguYWRkRWxlbWVudChjdHguZWx0KCdDaXRhdGlvbicsIHBvcywgcG9zICsgY2l0YXRpb25zWzBdLnNvdXJjZS5sZW5ndGgpKVxyXG4gIH1cclxufVxyXG4iXX0="]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"c150cd8abdcf0dbf27e1b97e5551d3b34723059b","contentHash":"4521cb22480879a00cd8479b3d1d380f30853933b8f4d63310c1567593d08861"},"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\util\\extract-citations.ts":{"path":"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\util\\extract-citations.ts","statementMap":{"0":{"start":{"line":20,"column":0},"end":{"line":20,"column":62}},"1":{"start":{"line":21,"column":0},"end":{"line":21,"column":35}},"2":{"start":{"line":29,"column":22},"end":{"line":46,"column":1}},"3":{"start":{"line":60,"column":19},"end":{"line":60,"column":119}},"4":{"start":{"line":75,"column":23},"end":{"line":75,"column":183}},"5":{"start":{"line":92,"column":18},"end":{"line":92,"column":59}},"6":{"start":{"line":105,"column":21},"end":{"line":109,"column":5}},"7":{"start":{"line":110,"column":4},"end":{"line":112,"column":5}},"8":{"start":{"line":111,"column":8},"end":{"line":111,"column":24}},"9":{"start":{"line":114,"column":4},"end":{"line":114,"column":27}},"10":{"start":{"line":116,"column":4},"end":{"line":138,"column":5}},"11":{"start":{"line":117,"column":8},"end":{"line":137,"column":9}},"12":{"start":{"line":118,"column":12},"end":{"line":136,"column":13}},"13":{"start":{"line":119,"column":16},"end":{"line":119,"column":39}},"14":{"start":{"line":120,"column":16},"end":{"line":134,"column":17}},"15":{"start":{"line":123,"column":20},"end":{"line":123,"column":76}},"16":{"start":{"line":128,"column":20},"end":{"line":128,"column":75}},"17":{"start":{"line":129,"column":34},"end":{"line":129,"column":65}},"18":{"start":{"line":130,"column":20},"end":{"line":133,"column":21}},"19":{"start":{"line":131,"column":24},"end":{"line":131,"column":52}},"20":{"start":{"line":132,"column":24},"end":{"line":132,"column":89}},"21":{"start":{"line":135,"column":16},"end":{"line":135,"column":32}},"22":{"start":{"line":142,"column":4},"end":{"line":154,"column":5}},"23":{"start":{"line":143,"column":8},"end":{"line":143,"column":34}},"24":{"start":{"line":149,"column":22},"end":{"line":149,"column":44}},"25":{"start":{"line":150,"column":8},"end":{"line":153,"column":9}},"26":{"start":{"line":151,"column":12},"end":{"line":151,"column":40}},"27":{"start":{"line":152,"column":12},"end":{"line":152,"column":68}},"28":{"start":{"line":155,"column":4},"end":{"line":155,"column":20}},"29":{"start":{"line":165,"column":21},"end":{"line":165,"column":23}},"30":{"start":{"line":166,"column":4},"end":{"line":260,"column":5}},"31":{"start":{"line":167,"column":19},"end":{"line":167,"column":30}},"32":{"start":{"line":168,"column":17},"end":{"line":168,"column":39}},"33":{"start":{"line":169,"column":26},"end":{"line":169,"column":28}},"34":{"start":{"line":170,"column":24},"end":{"line":170,"column":29}},"35":{"start":{"line":171,"column":29},"end":{"line":171,"column":37}},"36":{"start":{"line":172,"column":37},"end":{"line":172,"column":45}},"37":{"start":{"line":173,"column":31},"end":{"line":173,"column":39}},"38":{"start":{"line":174,"column":31},"end":{"line":174,"column":39}},"39":{"start":{"line":178,"column":8},"end":{"line":180,"column":9}},"40":{"start":{"line":179,"column":12},"end":{"line":179,"column":19}},"41":{"start":{"line":181,"column":8},"end":{"line":257,"column":9}},"42":{"start":{"line":183,"column":12},"end":{"line":246,"column":13}},"43":{"start":{"line":184,"column":30},"end":{"line":184,"column":70}},"44":{"start":{"line":185,"column":16},"end":{"line":187,"column":17}},"45":{"start":{"line":186,"column":20},"end":{"line":186,"column":29}},"46":{"start":{"line":190,"column":37},"end":{"line":197,"column":17}},"47":{"start":{"line":200,"column":34},"end":{"line":200,"column":53}},"48":{"start":{"line":201,"column":16},"end":{"line":209,"column":17}},"49":{"start":{"line":202,"column":20},"end":{"line":202,"column":85}},"50":{"start":{"line":203,"column":20},"end":{"line":208,"column":21}},"51":{"start":{"line":204,"column":24},"end":{"line":204,"column":105}},"52":{"start":{"line":207,"column":24},"end":{"line":207,"column":63}},"53":{"start":{"line":216,"column":40},"end":{"line":216,"column":68}},"54":{"start":{"line":217,"column":48},"end":{"line":217,"column":84}},"55":{"start":{"line":218,"column":34},"end":{"line":218,"column":53}},"56":{"start":{"line":220,"column":38},"end":{"line":220,"column":42}},"57":{"start":{"line":221,"column":16},"end":{"line":230,"column":17}},"58":{"start":{"line":224,"column":20},"end":{"line":224,"column":46}},"59":{"start":{"line":225,"column":20},"end":{"line":225,"column":44}},"60":{"start":{"line":227,"column":21},"end":{"line":230,"column":17}},"61":{"start":{"line":228,"column":20},"end":{"line":228,"column":135}},"62":{"start":{"line":229,"column":20},"end":{"line":229,"column":113}},"63":{"start":{"line":231,"column":51},"end":{"line":231,"column":94}},"64":{"start":{"line":232,"column":16},"end":{"line":232,"column":47}},"65":{"start":{"line":233,"column":16},"end":{"line":235,"column":17}},"66":{"start":{"line":234,"column":20},"end":{"line":234,"column":47}},"67":{"start":{"line":236,"column":16},"end":{"line":244,"column":17}},"68":{"start":{"line":237,"column":20},"end":{"line":237,"column":49}},"69":{"start":{"line":239,"column":21},"end":{"line":244,"column":17}},"70":{"start":{"line":243,"column":20},"end":{"line":243,"column":51}},"71":{"start":{"line":245,"column":16},"end":{"line":245,"column":45}},"72":{"start":{"line":250,"column":12},"end":{"line":250,"column":29}},"73":{"start":{"line":251,"column":12},"end":{"line":256,"column":15}},"74":{"start":{"line":259,"column":8},"end":{"line":259,"column":76}},"75":{"start":{"line":261,"column":4},"end":{"line":261,"column":20}}},"fnMap":{"0":{"name":"parseSuffix","decl":{"start":{"line":104,"column":9},"end":{"line":104,"column":20}},"loc":{"start":{"line":104,"column":46},"end":{"line":156,"column":1}},"line":104},"1":{"name":"extractCitations","decl":{"start":{"line":164,"column":9},"end":{"line":164,"column":25}},"loc":{"start":{"line":164,"column":36},"end":{"line":262,"column":1}},"line":164}},"branchMap":{"0":{"loc":{"start":{"line":110,"column":4},"end":{"line":112,"column":5}},"type":"if","locations":[{"start":{"line":110,"column":4},"end":{"line":112,"column":5}},{"start":{},"end":{}}],"line":110},"1":{"loc":{"start":{"line":118,"column":12},"end":{"line":136,"column":13}},"type":"if","locations":[{"start":{"line":118,"column":12},"end":{"line":136,"column":13}},{"start":{},"end":{}}],"line":118},"2":{"loc":{"start":{"line":120,"column":16},"end":{"line":134,"column":17}},"type":"if","locations":[{"start":{"line":120,"column":16},"end":{"line":134,"column":17}},{"start":{"line":125,"column":21},"end":{"line":134,"column":17}}],"line":120},"3":{"loc":{"start":{"line":130,"column":20},"end":{"line":133,"column":21}},"type":"if","locations":[{"start":{"line":130,"column":20},"end":{"line":133,"column":21}},{"start":{},"end":{}}],"line":130},"4":{"loc":{"start":{"line":142,"column":4},"end":{"line":154,"column":5}},"type":"if","locations":[{"start":{"line":142,"column":4},"end":{"line":154,"column":5}},{"start":{"line":145,"column":9},"end":{"line":154,"column":5}}],"line":142},"5":{"loc":{"start":{"line":150,"column":8},"end":{"line":153,"column":9}},"type":"if","locations":[{"start":{"line":150,"column":8},"end":{"line":153,"column":9}},{"start":{},"end":{}}],"line":150},"6":{"loc":{"start":{"line":178,"column":8},"end":{"line":180,"column":9}},"type":"if","locations":[{"start":{"line":178,"column":8},"end":{"line":180,"column":9}},{"start":{},"end":{}}],"line":178},"7":{"loc":{"start":{"line":181,"column":8},"end":{"line":257,"column":9}},"type":"if","locations":[{"start":{"line":181,"column":8},"end":{"line":257,"column":9}},{"start":{"line":248,"column":13},"end":{"line":257,"column":9}}],"line":181},"8":{"loc":{"start":{"line":185,"column":16},"end":{"line":187,"column":17}},"type":"if","locations":[{"start":{"line":185,"column":16},"end":{"line":187,"column":17}},{"start":{},"end":{}}],"line":185},"9":{"loc":{"start":{"line":201,"column":16},"end":{"line":209,"column":17}},"type":"if","locations":[{"start":{"line":201,"column":16},"end":{"line":209,"column":17}},{"start":{},"end":{}}],"line":201},"10":{"loc":{"start":{"line":203,"column":20},"end":{"line":208,"column":21}},"type":"if","locations":[{"start":{"line":203,"column":20},"end":{"line":208,"column":21}},{"start":{"line":206,"column":25},"end":{"line":208,"column":21}}],"line":203},"11":{"loc":{"start":{"line":221,"column":16},"end":{"line":230,"column":17}},"type":"if","locations":[{"start":{"line":221,"column":16},"end":{"line":230,"column":17}},{"start":{"line":227,"column":21},"end":{"line":230,"column":17}}],"line":221},"12":{"loc":{"start":{"line":221,"column":20},"end":{"line":221,"column":90}},"type":"binary-expr","locations":[{"start":{"line":221,"column":20},"end":{"line":221,"column":49}},{"start":{"line":221,"column":53},"end":{"line":221,"column":90}}],"line":221},"13":{"loc":{"start":{"line":227,"column":21},"end":{"line":230,"column":17}},"type":"if","locations":[{"start":{"line":227,"column":21},"end":{"line":230,"column":17}},{"start":{},"end":{}}],"line":227},"14":{"loc":{"start":{"line":227,"column":25},"end":{"line":227,"column":95}},"type":"binary-expr","locations":[{"start":{"line":227,"column":25},"end":{"line":227,"column":62}},{"start":{"line":227,"column":66},"end":{"line":227,"column":95}}],"line":227},"15":{"loc":{"start":{"line":228,"column":36},"end":{"line":228,"column":134}},"type":"cond-expr","locations":[{"start":{"line":228,"column":93},"end":{"line":228,"column":108}},{"start":{"line":228,"column":111},"end":{"line":228,"column":134}}],"line":228},"16":{"loc":{"start":{"line":228,"column":36},"end":{"line":228,"column":90}},"type":"binary-expr","locations":[{"start":{"line":228,"column":36},"end":{"line":228,"column":60}},{"start":{"line":228,"column":64},"end":{"line":228,"column":90}}],"line":228},"17":{"loc":{"start":{"line":229,"column":42},"end":{"line":229,"column":112}},"type":"cond-expr","locations":[{"start":{"line":229,"column":87},"end":{"line":229,"column":93}},{"start":{"line":229,"column":96},"end":{"line":229,"column":112}}],"line":229},"18":{"loc":{"start":{"line":229,"column":42},"end":{"line":229,"column":84}},"type":"binary-expr","locations":[{"start":{"line":229,"column":42},"end":{"line":229,"column":60}},{"start":{"line":229,"column":64},"end":{"line":229,"column":84}}],"line":229},"19":{"loc":{"start":{"line":233,"column":16},"end":{"line":235,"column":17}},"type":"if","locations":[{"start":{"line":233,"column":16},"end":{"line":235,"column":17}},{"start":{},"end":{}}],"line":233},"20":{"loc":{"start":{"line":236,"column":16},"end":{"line":244,"column":17}},"type":"if","locations":[{"start":{"line":236,"column":16},"end":{"line":244,"column":17}},{"start":{"line":239,"column":21},"end":{"line":244,"column":17}}],"line":236},"21":{"loc":{"start":{"line":236,"column":20},"end":{"line":236,"column":90}},"type":"binary-expr","locations":[{"start":{"line":236,"column":20},"end":{"line":236,"column":49}},{"start":{"line":236,"column":53},"end":{"line":236,"column":90}}],"line":236},"22":{"loc":{"start":{"line":239,"column":21},"end":{"line":244,"column":17}},"type":"if","locations":[{"start":{"line":239,"column":21},"end":{"line":244,"column":17}},{"start":{},"end":{}}],"line":239},"23":{"loc":{"start":{"line":239,"column":25},"end":{"line":239,"column":83}},"type":"binary-expr","locations":[{"start":{"line":239,"column":25},"end":{"line":239,"column":45}},{"start":{"line":239,"column":49},"end":{"line":239,"column":83}}],"line":239}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0},"f":{"0":0,"1":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/util/extract-citations.ts","sources":["C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/util/extract-citations.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @ignore\n * BEGIN HEADER\n *\n * Contains:        extractCitations function\n * CVM-Role:        Utility Function\n * Maintainer:      Hendrik Erz\n * License:         GNU GPL v3\n *\n * Description:     This function can be used to extract citations from a piece\n *                  of Markdown text as closely to the implementation of Pandoc\n *                  Citeproc as possible. This function cannot guarantee full\n *                  compliance because I honestly can't read Haskell. However,\n *                  the documentation is quite extensive, so I orient myself at\n *                  those.\n *\n * END HEADER\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = extractCitations;\n/**\n * The locatorLabels have been sourced from the Citr library. Basically it's just\n * a map with valid CSL locator labels and an array of possible natural labels\n * which a user might want to write (instead of the standardized labels).\n *\n * @var {{ [key: string]: string[] }}}\n */\nconst locatorLabels = {\n    book: ['Buch', 'Bücher', 'B.', 'book', 'books', 'bk.', 'bks.', 'livre', 'livres', 'liv.'],\n    chapter: ['Kapitel', 'Kap.', 'chapter', 'chapters', 'chap.', 'chaps', 'chapitre', 'chapitres'],\n    column: ['Spalte', 'Spalten', 'Sp.', 'column', 'columns', 'col.', 'cols', 'colonne', 'colonnes'],\n    figure: ['Abbildung', 'Abbildungen', 'Abb.', 'figure', 'figures', 'fig.', 'figs'],\n    folio: ['Blatt', 'Blätter', 'Fol.', 'folio', 'folios', 'fol.', 'fols', 'fᵒ', 'fᵒˢ'],\n    issue: ['Nummer', 'Nummern', 'Nr.', 'number', 'numbers', 'no.', 'nos.', 'numéro', 'numéros', 'nᵒ', 'nᵒˢ'],\n    line: ['Zeile', 'Zeilen', 'Z', 'line', 'lines', 'l.', 'll.', 'ligne', 'lignes'],\n    note: ['Note', 'Noten', 'N.', 'note', 'notes', 'n.', 'nn.'],\n    opus: ['Opus', 'Opera', 'op.', 'opus', 'opera', 'opp.'],\n    page: ['Seite', 'Seiten', 'S.', 'page', 'pages', 'p.', 'pp.'],\n    paragraph: ['Absatz', 'Absätze', 'Abs.', '¶', '¶¶', 'paragraph', 'paragraphs', 'para.', 'paras', 'paragraphe', 'paragraphes', 'paragr.'],\n    part: ['Teil', 'Teile', 'part', 'parts', 'pt.', 'pts', 'partie', 'parties', 'part.'],\n    section: ['Abschnitt', 'Abschnitte', 'Abschn.', '§', '§§', 'section', 'sections', 'sec.', 'secs', 'sect.'],\n    'sub verbo': ['sub verbo', 'sub verbis', 's.&#160;v.', 's.&#160;vv.', 's.v.', 's.vv.'],\n    verse: ['Vers', 'Verse', 'V.', 'verse', 'verses', 'v.', 'vv.', 'verset', 'versets'],\n    volume: ['Band', 'Bände', 'Bd.', 'Bde.', 'volume', 'volumes', 'vol.', 'vols.']\n};\n/**\n * Citation detection: The first alternative matches \"full\" citations surrounded\n * by square brackets, whereas the second one matches in-text citations,\n * optionally with suffixes.\n *\n * * Group 1 matches regular \"full\" citations\n * * Group 2 matches in-text citations (not surrounded by brackets)\n * * Group 3 matches optional square-brackets suffixes to group 2 matches\n *\n * For more information, see https://pandoc.org/MANUAL.html#extension-citations\n *\n * @var {RegExp}\n */\nconst citationRE = /(?:\\[([^[\\]]*@[^[\\]]+)\\])|(?<=\\s|^|(-))(?:@([\\p{L}\\d_][^\\s]*[\\p{L}\\d_]|\\{.+\\})(?: +\\[(.*?)\\])?)/gum;\n/**\n * I hate everything at this. This can match every single possible variation on\n * whatever the f*** you can possibly do within square brackets according to the\n * documentation. I opted for named groups for these because otherwise I have no\n * idea what I have been doing here.\n *\n * * Group prefix: Contains the prefix, ends with a dash if we should suppress the author\n * * Group citekey: Contains the actual citekey, can be surrounded in curly brackets\n * * Group explicitLocator: Contains an explicit locator statement. If given, we MUST ignore any form of locator in the suffix\n * * Group explicitLocatorInSuffix: Same as above, but not concatenated to the citekey\n * * Group suffix: Contains the suffix, but may start with a locator (if explicitLocator and explicitLocatorInSuffix are not given)\n *\n * @var {RegExp}\n */\nconst fullCitationRE = /(?<prefix>.+)?(?:@(?<citekey>[\\p{L}\\d_][^\\s{]*[\\p{L}\\d_]|\\{.+\\}))(?:\\{(?<explicitLocator>.*)\\})?(?:,\\s+(?:\\{(?<explicitLocatorInSuffix>.*)\\})?(?<suffix>.*))?/u;\n/**\n * This regular expression matches locator ranges, like the following:\n *\n * * 23-45, and further (here it matches up to, not including the comma)\n * * 45\n * * 15423\n * * 14235-12532\n * * 12-34, 23, 56\n * * 12, 23-14, 23\n * * 12, 54, 12-23\n * * 1, 1-4\n * * 3\n * * NEW NEW NEW: Now also matches Roman numerals as sometimes used in forewords!\n *\n * @var {RegExp}\n */\nconst locatorRE = /^(?:[\\d, -]*\\d|[ivxlcdm, -]*[ivxlcdm])/i;\n/**\n * This takes a suffix and extracts optional label and locator from this. Pass\n * true for the containsLocator property to indicate to this function that what\n * it got was not a regular suffix with an optional locator, but an explicit\n * locator so it knows it just needs to look for an optional label.\n *\n * @param   {string}          suffix           The suffix to parse\n * @param   {boolean}         containsLocator  If true, forces parseSuffix to return a locator\n *\n * @return  {CiteItemSuffix}                   An object containing three optional properties locator, label, or suffix.\n */\nfunction parseSuffix(suffix, containsLocator) {\n    const retValue = {\n        locator: undefined,\n        label: 'page',\n        suffix: undefined\n    };\n    if (suffix === undefined) {\n        return retValue;\n    }\n    // Make sure the suffix does not start or end with spaces\n    suffix = suffix.trim();\n    // If there is a label, the suffix must start with it\n    for (const label in locatorLabels) {\n        for (const natural of locatorLabels[label]) {\n            if (suffix.toLowerCase().startsWith(natural.toLowerCase())) {\n                retValue.label = label;\n                if (containsLocator) {\n                    // The suffix actually is the full locator, we just had to extract\n                    // the label from it. There is no remaining suffix.\n                    retValue.locator = suffix.substr(natural.length).trim();\n                }\n                else {\n                    // The caller indicated that this is a regular suffix, so we must also\n                    // extract the locator from what is left after label extraction.\n                    retValue.suffix = suffix.substr(natural.length).trim();\n                    const match = locatorRE.exec(retValue.suffix);\n                    if (match !== null) {\n                        retValue.locator = match[0]; // Extract the full match\n                        retValue.suffix = retValue.suffix.substr(match[0].length).trim();\n                    }\n                }\n                return retValue; // Early exit\n            }\n        }\n    }\n    // If we're here, there was no explicit label given, but the caller has indicated\n    // that this suffix MUST contain a locator. This means that the whole suffix is\n    // the locator.\n    if (containsLocator) {\n        retValue.locator = suffix;\n    }\n    else {\n        // The caller has not indicated that the whole suffix is the locator, so it\n        // can be at the beginning. We only accept simple page/number ranges here.\n        // For everything, the user should please be more specific.\n        const match = locatorRE.exec(suffix);\n        if (match !== null) {\n            retValue.locator = match[0]; // Full match is the locator\n            retValue.suffix = suffix.substr(match[0].length).trim(); // The rest is the suffix.\n        }\n    }\n    return retValue;\n}\n/**\n * Extracts citations from a string of Markdown, similar to how Citeproc does it.\n *\n * @param   {string}          markdown  The Markdown to parse\n *\n * @return  {CitePosition[]}            An array containing every found citation\n */\nfunction extractCitations(markdown) {\n    const retValue = [];\n    for (const match of markdown.matchAll(citationRE)) {\n        let from = match.index; // Here we know index will be set\n        let to = from + match[0].length;\n        const citations = [];\n        let composite = false; // Is set to true for in-text citations\n        const fullCitation = match[1];\n        const inTextSuppressAuthor = match[2];\n        const inTextCitation = match[3];\n        const optionalSuffix = match[4];\n        // If we have an in-text citation and we should suppress the author, the\n        // match.index does NOT include the positive lookbehind, so we have to manually\n        // shift \"from\" to one before.\n        if (inTextSuppressAuthor !== undefined) {\n            from--;\n        }\n        if (fullCitation !== undefined) {\n            // We have a lame, full citation.\n            for (const citationPart of fullCitation.split(';')) {\n                const match = fullCitationRE.exec(citationPart.trim());\n                if (match === null) {\n                    continue; // Faulty citation\n                }\n                // We explicitly cast groups since we have groups in our RegExp and as\n                // such the groups object will be set.\n                const thisCitation = {\n                    id: match.groups.citekey.replace(/{(.+)}/, '$1'),\n                    prefix: undefined,\n                    locator: undefined,\n                    label: 'page',\n                    'suppress-author': false,\n                    suffix: undefined\n                };\n                // First, deal with the prefix. The speciality here is that it can\n                // indicate if we should suppress the author.\n                const rawPrefix = match.groups.prefix;\n                if (rawPrefix !== undefined) {\n                    thisCitation['suppress-author'] = rawPrefix.trim().endsWith('-');\n                    if (thisCitation['suppress-author']) {\n                        thisCitation.prefix = rawPrefix.substring(0, rawPrefix.trim().length - 1).trim();\n                    }\n                    else {\n                        thisCitation.prefix = rawPrefix.trim();\n                    }\n                }\n                // Second, deal with the suffix. This one can be much more tricky than\n                // the prefix. We have three alternatives where the locator may be\n                // present: If we have an explicitLocator or an explicitLocatorInSuffix,\n                // we should extract the locator from there and leave the actual suffix\n                // untouched. Only if those two alternatives are not present, then we\n                // have a look at the rawSuffix and extract a (potential) locator.\n                const explicitLocator = match.groups.explicitLocator;\n                const explicitLocatorInSuffix = match.groups.explicitLocatorInSuffix;\n                const rawSuffix = match.groups.suffix;\n                let suffixToParse;\n                let containsLocator = true;\n                if (explicitLocator === undefined && explicitLocatorInSuffix === undefined) {\n                    // Potential locator in rawSuffix. Only in this case should we overwrite\n                    // the suffix (hence the same if-condition below)\n                    suffixToParse = rawSuffix;\n                    containsLocator = false;\n                }\n                else if (explicitLocatorInSuffix !== undefined || explicitLocator !== undefined) {\n                    suffixToParse = explicitLocator !== null && explicitLocator !== void 0 ? explicitLocator : explicitLocatorInSuffix;\n                    thisCitation.suffix = rawSuffix === null || rawSuffix === void 0 ? void 0 : rawSuffix.trim();\n                }\n                const { label, locator, suffix } = parseSuffix(suffixToParse, containsLocator);\n                thisCitation.locator = locator;\n                if (label !== undefined) {\n                    thisCitation.label = label;\n                }\n                if (explicitLocator === undefined && explicitLocatorInSuffix === undefined) {\n                    thisCitation.suffix = suffix;\n                }\n                else if (suffix !== undefined && thisCitation.locator !== undefined) {\n                    // If we're here, we should not change the suffix, but parseSuffix may\n                    // have put something into the suffix return. If we're here, that will\n                    // definitely be a part of the locator.\n                    thisCitation.locator += suffix;\n                }\n                citations.push(thisCitation);\n            }\n        }\n        else {\n            // We have an in-text citation, so we can take a shortcut\n            composite = true;\n            citations.push({\n                prefix: undefined,\n                id: inTextCitation.replace(/{(.+)}/, '$1'),\n                'suppress-author': inTextSuppressAuthor !== undefined,\n                ...parseSuffix(optionalSuffix, false) // Populate more depending on the suffix\n            });\n        }\n        // After all of our yadda yadda, push the citation\n        retValue.push({ from, to, citations, composite, source: match[0] });\n    }\n    return retValue;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"059671a1c9c0e89210cc5d0b2e43477688e054d9","contentHash":"2197a2c6db1fc43d2667e0217ec3d5bd2e9afb8c821019a50bea18b82962dce4"},"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-editor\\parser\\footnote-parser.ts":{"path":"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-editor\\parser\\footnote-parser.ts","statementMap":{"0":{"start":{"line":15,"column":0},"end":{"line":15,"column":62}},"1":{"start":{"line":16,"column":0},"end":{"line":16,"column":60}},"2":{"start":{"line":17,"column":24},"end":{"line":17,"column":50}},"3":{"start":{"line":19,"column":0},"end":{"line":36,"column":2}},"4":{"start":{"line":24,"column":8},"end":{"line":26,"column":9}},"5":{"start":{"line":25,"column":12},"end":{"line":25,"column":22}},"6":{"start":{"line":27,"column":33},"end":{"line":27,"column":49}},"7":{"start":{"line":29,"column":22},"end":{"line":29,"column":86}},"8":{"start":{"line":30,"column":8},"end":{"line":32,"column":9}},"9":{"start":{"line":31,"column":12},"end":{"line":31,"column":22}},"10":{"start":{"line":34,"column":8},"end":{"line":34,"column":79}},"11":{"start":{"line":37,"column":0},"end":{"line":72,"column":2}},"12":{"start":{"line":40,"column":22},"end":{"line":40,"column":56}},"13":{"start":{"line":41,"column":8},"end":{"line":43,"column":9}},"14":{"start":{"line":42,"column":12},"end":{"line":42,"column":25}},"15":{"start":{"line":44,"column":24},"end":{"line":44,"column":37}},"16":{"start":{"line":45,"column":22},"end":{"line":45,"column":95}},"17":{"start":{"line":46,"column":21},"end":{"line":46,"column":52}},"18":{"start":{"line":47,"column":17},"end":{"line":47,"column":49}},"19":{"start":{"line":48,"column":29},"end":{"line":48,"column":63}},"20":{"start":{"line":50,"column":8},"end":{"line":53,"column":9}},"21":{"start":{"line":51,"column":12},"end":{"line":51,"column":41}},"22":{"start":{"line":52,"column":12},"end":{"line":52,"column":39}},"23":{"start":{"line":55,"column":21},"end":{"line":55,"column":23}},"24":{"start":{"line":56,"column":8},"end":{"line":59,"column":9}},"25":{"start":{"line":57,"column":29},"end":{"line":57,"column":47}},"26":{"start":{"line":58,"column":12},"end":{"line":58,"column":50}},"27":{"start":{"line":63,"column":8},"end":{"line":65,"column":9}},"28":{"start":{"line":64,"column":12},"end":{"line":64,"column":26}},"29":{"start":{"line":66,"column":25},"end":{"line":66,"column":106}},"30":{"start":{"line":67,"column":21},"end":{"line":67,"column":73}},"31":{"start":{"line":68,"column":24},"end":{"line":68,"column":74}},"32":{"start":{"line":69,"column":8},"end":{"line":69,"column":32}},"33":{"start":{"line":70,"column":8},"end":{"line":70,"column":20}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":23,"column":4},"end":{"line":23,"column":5}},"loc":{"start":{"line":23,"column":26},"end":{"line":35,"column":5}},"line":23},"1":{"name":"(anonymous_1)","decl":{"start":{"line":39,"column":4},"end":{"line":39,"column":5}},"loc":{"start":{"line":39,"column":21},"end":{"line":71,"column":5}},"line":39}},"branchMap":{"0":{"loc":{"start":{"line":24,"column":8},"end":{"line":26,"column":9}},"type":"if","locations":[{"start":{"line":24,"column":8},"end":{"line":26,"column":9}},{"start":{},"end":{}}],"line":24},"1":{"loc":{"start":{"line":24,"column":12},"end":{"line":24,"column":38}},"type":"binary-expr","locations":[{"start":{"line":24,"column":12},"end":{"line":24,"column":23}},{"start":{"line":24,"column":27},"end":{"line":24,"column":38}}],"line":24},"2":{"loc":{"start":{"line":30,"column":8},"end":{"line":32,"column":9}},"type":"if","locations":[{"start":{"line":30,"column":8},"end":{"line":32,"column":9}},{"start":{},"end":{}}],"line":30},"3":{"loc":{"start":{"line":30,"column":12},"end":{"line":30,"column":45}},"type":"binary-expr","locations":[{"start":{"line":30,"column":12},"end":{"line":30,"column":26}},{"start":{"line":30,"column":30},"end":{"line":30,"column":45}}],"line":30},"4":{"loc":{"start":{"line":41,"column":8},"end":{"line":43,"column":9}},"type":"if","locations":[{"start":{"line":41,"column":8},"end":{"line":43,"column":9}},{"start":{},"end":{}}],"line":41},"5":{"loc":{"start":{"line":50,"column":15},"end":{"line":50,"column":64}},"type":"binary-expr","locations":[{"start":{"line":50,"column":15},"end":{"line":50,"column":29}},{"start":{"line":50,"column":33},"end":{"line":50,"column":64}}],"line":50},"6":{"loc":{"start":{"line":56,"column":15},"end":{"line":56,"column":93}},"type":"binary-expr","locations":[{"start":{"line":56,"column":15},"end":{"line":56,"column":38}},{"start":{"line":56,"column":42},"end":{"line":56,"column":93}}],"line":56},"7":{"loc":{"start":{"line":63,"column":8},"end":{"line":65,"column":9}},"type":"if","locations":[{"start":{"line":63,"column":8},"end":{"line":65,"column":9}},{"start":{},"end":{}}],"line":63}},"s":{"0":1,"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0},"f":{"0":0,"1":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-editor/parser/footnote-parser.ts","sources":["C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-editor/parser/footnote-parser.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb;;;;;;;;;;;;GAYG;AACH,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9D,OAAO,CAAC,iBAAiB,GAAG,OAAO,CAAC,cAAc,GAAG,KAAK,CAAC,CAAC;AAC5D,MAAM,eAAe,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AACnD,yFAAyF;AACzF,OAAO,CAAC,cAAc,GAAG;IACrB,iDAAiD;IACjD,IAAI,EAAE,WAAW;IACjB,MAAM,EAAE,MAAM,EAAE,4CAA4C;IAC5D,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG;QAChB,IAAI,IAAI,KAAK,EAAE,IAAI,IAAI,KAAK,EAAE,EAAE,CAAC,CAAC,OAAO;YACrC,OAAO,CAAC,CAAC,CAAC;QACd,CAAC;QACD,MAAM,gBAAgB,GAAG,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC;QAC1C,sEAAsE;QACtE,MAAM,KAAK,GAAG,yBAAyB,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC;QAC/E,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC;YACpC,OAAO,CAAC,CAAC,CAAC;QACd,CAAC;QACD,+DAA+D;QAC/D,OAAO,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,EAAE,GAAG,EAAE,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;IAC3E,CAAC;CACJ,CAAC;AACF,OAAO,CAAC,iBAAiB,GAAG;IACxB,IAAI,EAAE,eAAe;IACrB,KAAK,CAAC,GAAG,EAAE,IAAI;QACX,MAAM,KAAK,GAAG,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjD,IAAI,KAAK,KAAK,IAAI,EAAE,CAAC;YACjB,OAAO,KAAK,CAAC;QACjB,CAAC;QACD,MAAM,OAAO,GAAG,GAAG,CAAC,SAAS,CAAC;QAC9B,MAAM,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,kBAAkB,EAAE,OAAO,EAAE,GAAG,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACxF,MAAM,IAAI,GAAG,GAAG,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;QAC7C,IAAI,EAAE,GAAG,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,wBAAwB;QACnE,MAAM,YAAY,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACxD,mFAAmF;QACnF,OAAO,GAAG,CAAC,QAAQ,EAAE,IAAI,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;YACvD,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC7B,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAC/B,CAAC;QACD,mDAAmD;QACnD,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,OAAO,YAAY,CAAC,MAAM,GAAG,CAAC,IAAI,YAAY,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC;YACpF,MAAM,QAAQ,GAAG,YAAY,CAAC,GAAG,EAAE,CAAC;YACpC,MAAM,GAAG,MAAM,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;QAC1C,CAAC;QACD,4EAA4E;QAC5E,yEAAyE;QACzE,YAAY;QACZ,IAAI,MAAM,GAAG,IAAI,EAAE,CAAC;YAChB,MAAM,GAAG,IAAI,CAAC;QAClB,CAAC;QACD,MAAM,QAAQ,GAAG,CAAC,CAAC,EAAE,eAAe,CAAC,YAAY,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,MAAM,EAAE,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;QACnG,MAAM,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,iBAAiB,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;QAClE,MAAM,OAAO,GAAG,GAAG,CAAC,GAAG,CAAC,aAAa,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;QACnE,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACxB,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ,CAAC","sourcesContent":["\"use strict\";\n/**\n * @ignore\n * BEGIN HEADER\n *\n * Contains:        Footnote Parser\n * CVM-Role:        InlineParser\n * Maintainer:      Hendrik Erz\n * License:         GNU GPL v3\n *\n * Description:     This inline parser adds footnote elements to the Lezer tree.\n *\n * END HEADER\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.footnoteRefParser = exports.footnoteParser = void 0;\nconst partial_parse_1 = require(\"./partial-parse\");\n// TODO: Docs for this: https://github.com/lezer-parser/markdown#user-content-blockparser\nexports.footnoteParser = {\n    // This parser should only match inline footnotes\n    name: 'footnotes',\n    before: 'Link', // [^1] will otherwise be detected as a link\n    parse(ctx, next, pos) {\n        if (next !== 91 && next !== 94) { // [, ^\n            return -1;\n        }\n        const relativePosition = pos - ctx.offset;\n        // Matches [^identifier] (alternative 1) and ^[inline] (alternative 2)\n        const match = /\\[\\^[^\\s]+?\\]|\\^\\[.+?\\]/.exec(ctx.text.slice(relativePosition));\n        if (match === null || match.index > 0) {\n            return -1;\n        }\n        // At this point we have a footnote and it's at the current pos\n        return ctx.addElement(ctx.elt('Footnote', pos, pos + match[0].length));\n    }\n};\nexports.footnoteRefParser = {\n    name: 'footnote-refs',\n    parse(ctx, line) {\n        const match = /^\\[\\^[^\\s]+\\]:\\s/.exec(line.text);\n        if (match === null) {\n            return false;\n        }\n        const refFrom = ctx.lineStart;\n        const label = ctx.elt('FootnoteRefLabel', refFrom, ctx.lineStart + match[0].length - 1);\n        const from = ctx.lineStart + match[0].length;\n        let to = ctx.lineStart + line.text.length; // One newline less here\n        const footnoteBody = [line.text.slice(match[0].length)];\n        // Everything at least indented by 4 spaces OR empty lines belong to this paragraph\n        while (ctx.nextLine() && /^\\s{4,}|^\\s*$/.test(line.text)) {\n            footnoteBody.push(line.text);\n            to += line.text.length + 1;\n        }\n        // Remove trailing empty lines from the body itself\n        let bodyTo = to;\n        while (footnoteBody.length > 0 && footnoteBody[footnoteBody.length - 1].trim() === '') {\n            const lastline = footnoteBody.pop();\n            bodyTo = bodyTo - lastline.length - 1;\n        }\n        // Since footnotes can be empty, the above while loop will substract one too\n        // much from empty footnotes (so that bodyTo = from - 1). Here we correct\n        // for that.\n        if (bodyTo < from) {\n            bodyTo = from;\n        }\n        const treeElem = (0, partial_parse_1.partialParse)(ctx, ctx.parser, footnoteBody.join('\\n'), from);\n        const body = ctx.elt('FootnoteRefBody', from, bodyTo, [treeElem]);\n        const wrapper = ctx.elt('FootnoteRef', refFrom, to, [label, body]);\n        ctx.addElement(wrapper);\n        return true;\n    }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzovVXNlcnMvSm9zaCBFL0RvY3VtZW50cy9aZXR0bHItc3dlbmc0MzEvc291cmNlL2NvbW1vbi9tb2R1bGVzL21hcmtkb3duLWVkaXRvci9wYXJzZXIvZm9vdG5vdGUtcGFyc2VyLnRzIiwic291cmNlcyI6WyJDOi9Vc2Vycy9Kb3NoIEUvRG9jdW1lbnRzL1pldHRsci1zd2VuZzQzMS9zb3VyY2UvY29tbW9uL21vZHVsZXMvbWFya2Rvd24tZWRpdG9yL3BhcnNlci9mb290bm90ZS1wYXJzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7R0FZRzs7O0FBR0gsbURBQThDO0FBRTlDLHlGQUF5RjtBQUM1RSxRQUFBLGNBQWMsR0FBaUI7SUFDMUMsaURBQWlEO0lBQ2pELElBQUksRUFBRSxXQUFXO0lBQ2pCLE1BQU0sRUFBRSxNQUFNLEVBQUUsNENBQTRDO0lBQzVELEtBQUssQ0FBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUc7UUFDbkIsSUFBSSxJQUFJLEtBQUssRUFBRSxJQUFJLElBQUksS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU87WUFDdkMsT0FBTyxDQUFDLENBQUMsQ0FBQTtRQUNYLENBQUM7UUFFRCxNQUFNLGdCQUFnQixHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFBO1FBQ3pDLHNFQUFzRTtRQUN0RSxNQUFNLEtBQUssR0FBRyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFBO1FBRTlFLElBQUksS0FBSyxLQUFLLElBQUksSUFBSSxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQ3RDLE9BQU8sQ0FBQyxDQUFDLENBQUE7UUFDWCxDQUFDO1FBRUQsK0RBQStEO1FBQy9ELE9BQU8sR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUUsR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFBO0lBQ3hFLENBQUM7Q0FDRixDQUFBO0FBRVksUUFBQSxpQkFBaUIsR0FBZ0I7SUFDNUMsSUFBSSxFQUFFLGVBQWU7SUFDckIsS0FBSyxDQUFFLEdBQUcsRUFBRSxJQUFJO1FBQ2QsTUFBTSxLQUFLLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNoRCxJQUFJLEtBQUssS0FBSyxJQUFJLEVBQUUsQ0FBQztZQUNuQixPQUFPLEtBQUssQ0FBQTtRQUNkLENBQUM7UUFFRCxNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFBO1FBRTdCLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsT0FBTyxFQUFFLEdBQUcsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQTtRQUV2RixNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUE7UUFDNUMsSUFBSSxFQUFFLEdBQUcsR0FBRyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQSxDQUFDLHdCQUF3QjtRQUVsRSxNQUFNLFlBQVksR0FBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFBO1FBRWpFLG1GQUFtRjtRQUNuRixPQUFPLEdBQUcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQ3pELFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQzVCLEVBQUUsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUE7UUFDNUIsQ0FBQztRQUVELG1EQUFtRDtRQUNuRCxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUE7UUFDZixPQUFPLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLFlBQVksQ0FBQyxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDO1lBQ3RGLE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxHQUFHLEVBQVksQ0FBQTtZQUM3QyxNQUFNLEdBQUcsTUFBTSxHQUFHLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFBO1FBQ3ZDLENBQUM7UUFFRCw0RUFBNEU7UUFDNUUseUVBQXlFO1FBQ3pFLFlBQVk7UUFDWixJQUFJLE1BQU0sR0FBRyxJQUFJLEVBQUUsQ0FBQztZQUNsQixNQUFNLEdBQUcsSUFBSSxDQUFBO1FBQ2YsQ0FBQztRQUVELE1BQU0sUUFBUSxHQUFHLElBQUEsNEJBQVksRUFBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQzdFLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7UUFFakUsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFFLEtBQUssRUFBRSxJQUFJLENBQUUsQ0FBQyxDQUFBO1FBQ3BFLEdBQUcsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUE7UUFFdkIsT0FBTyxJQUFJLENBQUE7SUFDYixDQUFDO0NBQ0YsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAaWdub3JlXHJcbiAqIEJFR0lOIEhFQURFUlxyXG4gKlxyXG4gKiBDb250YWluczogICAgICAgIEZvb3Rub3RlIFBhcnNlclxyXG4gKiBDVk0tUm9sZTogICAgICAgIElubGluZVBhcnNlclxyXG4gKiBNYWludGFpbmVyOiAgICAgIEhlbmRyaWsgRXJ6XHJcbiAqIExpY2Vuc2U6ICAgICAgICAgR05VIEdQTCB2M1xyXG4gKlxyXG4gKiBEZXNjcmlwdGlvbjogICAgIFRoaXMgaW5saW5lIHBhcnNlciBhZGRzIGZvb3Rub3RlIGVsZW1lbnRzIHRvIHRoZSBMZXplciB0cmVlLlxyXG4gKlxyXG4gKiBFTkQgSEVBREVSXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgdHlwZSBJbmxpbmVQYXJzZXIsIHR5cGUgQmxvY2tQYXJzZXIgfSBmcm9tICdAbGV6ZXIvbWFya2Rvd24nXHJcbmltcG9ydCB7IHBhcnRpYWxQYXJzZSB9IGZyb20gJy4vcGFydGlhbC1wYXJzZSdcclxuXHJcbi8vIFRPRE86IERvY3MgZm9yIHRoaXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9sZXplci1wYXJzZXIvbWFya2Rvd24jdXNlci1jb250ZW50LWJsb2NrcGFyc2VyXHJcbmV4cG9ydCBjb25zdCBmb290bm90ZVBhcnNlcjogSW5saW5lUGFyc2VyID0ge1xyXG4gIC8vIFRoaXMgcGFyc2VyIHNob3VsZCBvbmx5IG1hdGNoIGlubGluZSBmb290bm90ZXNcclxuICBuYW1lOiAnZm9vdG5vdGVzJyxcclxuICBiZWZvcmU6ICdMaW5rJywgLy8gW14xXSB3aWxsIG90aGVyd2lzZSBiZSBkZXRlY3RlZCBhcyBhIGxpbmtcclxuICBwYXJzZSAoY3R4LCBuZXh0LCBwb3MpIHtcclxuICAgIGlmIChuZXh0ICE9PSA5MSAmJiBuZXh0ICE9PSA5NCkgeyAvLyBbLCBeXHJcbiAgICAgIHJldHVybiAtMVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJlbGF0aXZlUG9zaXRpb24gPSBwb3MgLSBjdHgub2Zmc2V0XHJcbiAgICAvLyBNYXRjaGVzIFteaWRlbnRpZmllcl0gKGFsdGVybmF0aXZlIDEpIGFuZCBeW2lubGluZV0gKGFsdGVybmF0aXZlIDIpXHJcbiAgICBjb25zdCBtYXRjaCA9IC9cXFtcXF5bXlxcc10rP1xcXXxcXF5cXFsuKz9cXF0vLmV4ZWMoY3R4LnRleHQuc2xpY2UocmVsYXRpdmVQb3NpdGlvbikpXHJcblxyXG4gICAgaWYgKG1hdGNoID09PSBudWxsIHx8IG1hdGNoLmluZGV4ID4gMCkge1xyXG4gICAgICByZXR1cm4gLTFcclxuICAgIH1cclxuXHJcbiAgICAvLyBBdCB0aGlzIHBvaW50IHdlIGhhdmUgYSBmb290bm90ZSBhbmQgaXQncyBhdCB0aGUgY3VycmVudCBwb3NcclxuICAgIHJldHVybiBjdHguYWRkRWxlbWVudChjdHguZWx0KCdGb290bm90ZScsIHBvcywgcG9zICsgbWF0Y2hbMF0ubGVuZ3RoKSlcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBmb290bm90ZVJlZlBhcnNlcjogQmxvY2tQYXJzZXIgPSB7XHJcbiAgbmFtZTogJ2Zvb3Rub3RlLXJlZnMnLFxyXG4gIHBhcnNlIChjdHgsIGxpbmUpIHtcclxuICAgIGNvbnN0IG1hdGNoID0gL15cXFtcXF5bXlxcc10rXFxdOlxccy8uZXhlYyhsaW5lLnRleHQpXHJcbiAgICBpZiAobWF0Y2ggPT09IG51bGwpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcmVmRnJvbSA9IGN0eC5saW5lU3RhcnRcclxuXHJcbiAgICBjb25zdCBsYWJlbCA9IGN0eC5lbHQoJ0Zvb3Rub3RlUmVmTGFiZWwnLCByZWZGcm9tLCBjdHgubGluZVN0YXJ0ICsgbWF0Y2hbMF0ubGVuZ3RoIC0gMSlcclxuXHJcbiAgICBjb25zdCBmcm9tID0gY3R4LmxpbmVTdGFydCArIG1hdGNoWzBdLmxlbmd0aFxyXG4gICAgbGV0IHRvID0gY3R4LmxpbmVTdGFydCArIGxpbmUudGV4dC5sZW5ndGggLy8gT25lIG5ld2xpbmUgbGVzcyBoZXJlXHJcblxyXG4gICAgY29uc3QgZm9vdG5vdGVCb2R5OiBzdHJpbmdbXSA9IFtsaW5lLnRleHQuc2xpY2UobWF0Y2hbMF0ubGVuZ3RoKV1cclxuXHJcbiAgICAvLyBFdmVyeXRoaW5nIGF0IGxlYXN0IGluZGVudGVkIGJ5IDQgc3BhY2VzIE9SIGVtcHR5IGxpbmVzIGJlbG9uZyB0byB0aGlzIHBhcmFncmFwaFxyXG4gICAgd2hpbGUgKGN0eC5uZXh0TGluZSgpICYmIC9eXFxzezQsfXxeXFxzKiQvLnRlc3QobGluZS50ZXh0KSkge1xyXG4gICAgICBmb290bm90ZUJvZHkucHVzaChsaW5lLnRleHQpXHJcbiAgICAgIHRvICs9IGxpbmUudGV4dC5sZW5ndGggKyAxXHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmVtb3ZlIHRyYWlsaW5nIGVtcHR5IGxpbmVzIGZyb20gdGhlIGJvZHkgaXRzZWxmXHJcbiAgICBsZXQgYm9keVRvID0gdG9cclxuICAgIHdoaWxlIChmb290bm90ZUJvZHkubGVuZ3RoID4gMCAmJiBmb290bm90ZUJvZHlbZm9vdG5vdGVCb2R5Lmxlbmd0aCAtIDFdLnRyaW0oKSA9PT0gJycpIHtcclxuICAgICAgY29uc3QgbGFzdGxpbmUgPSBmb290bm90ZUJvZHkucG9wKCkgYXMgc3RyaW5nXHJcbiAgICAgIGJvZHlUbyA9IGJvZHlUbyAtIGxhc3RsaW5lLmxlbmd0aCAtIDFcclxuICAgIH1cclxuXHJcbiAgICAvLyBTaW5jZSBmb290bm90ZXMgY2FuIGJlIGVtcHR5LCB0aGUgYWJvdmUgd2hpbGUgbG9vcCB3aWxsIHN1YnN0cmFjdCBvbmUgdG9vXHJcbiAgICAvLyBtdWNoIGZyb20gZW1wdHkgZm9vdG5vdGVzIChzbyB0aGF0IGJvZHlUbyA9IGZyb20gLSAxKS4gSGVyZSB3ZSBjb3JyZWN0XHJcbiAgICAvLyBmb3IgdGhhdC5cclxuICAgIGlmIChib2R5VG8gPCBmcm9tKSB7XHJcbiAgICAgIGJvZHlUbyA9IGZyb21cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB0cmVlRWxlbSA9IHBhcnRpYWxQYXJzZShjdHgsIGN0eC5wYXJzZXIsIGZvb3Rub3RlQm9keS5qb2luKCdcXG4nKSwgZnJvbSlcclxuICAgIGNvbnN0IGJvZHkgPSBjdHguZWx0KCdGb290bm90ZVJlZkJvZHknLCBmcm9tLCBib2R5VG8sIFt0cmVlRWxlbV0pXHJcblxyXG4gICAgY29uc3Qgd3JhcHBlciA9IGN0eC5lbHQoJ0Zvb3Rub3RlUmVmJywgcmVmRnJvbSwgdG8sIFsgbGFiZWwsIGJvZHkgXSlcclxuICAgIGN0eC5hZGRFbGVtZW50KHdyYXBwZXIpXHJcblxyXG4gICAgcmV0dXJuIHRydWVcclxuICB9XHJcbn1cclxuIl19"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"e4b304a5ceeff76636ecd86e2f5a68dd446c9a26","contentHash":"3ca4ad6814d71b8fc71cb0db560a38fca8906cfd1bbecc63d27006e64a5e724e"},"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-editor\\parser\\partial-parse.ts":{"path":"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-editor\\parser\\partial-parse.ts","statementMap":{"0":{"start":{"line":16,"column":0},"end":{"line":16,"column":62}},"1":{"start":{"line":17,"column":0},"end":{"line":17,"column":36}},"2":{"start":{"line":18,"column":17},"end":{"line":18,"column":41}},"3":{"start":{"line":37,"column":22},"end":{"line":37,"column":40}},"4":{"start":{"line":42,"column":19},"end":{"line":42,"column":45}},"5":{"start":{"line":43,"column":23},"end":{"line":43,"column":44}},"6":{"start":{"line":44,"column":4},"end":{"line":46,"column":5}},"7":{"start":{"line":45,"column":8},"end":{"line":45,"column":47}},"8":{"start":{"line":47,"column":4},"end":{"line":47,"column":20}}},"fnMap":{"0":{"name":"partialParse","decl":{"start":{"line":36,"column":9},"end":{"line":36,"column":21}},"loc":{"start":{"line":36,"column":49},"end":{"line":48,"column":1}},"line":36}},"branchMap":{"0":{"loc":{"start":{"line":44,"column":4},"end":{"line":46,"column":5}},"type":"if","locations":[{"start":{"line":44,"column":4},"end":{"line":46,"column":5}},{"start":{},"end":{}}],"line":44}},"s":{"0":1,"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"f":{"0":0},"b":{"0":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-editor/parser/partial-parse.ts","sources":["C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-editor/parser/partial-parse.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb;;;;;;;;;;;;;GAaG;AACH,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9D,OAAO,CAAC,YAAY,GAAG,YAAY,CAAC;AACpC,MAAM,QAAQ,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AAC1C;;;;;;;;;;;;;;;;GAgBG;AACH,SAAS,YAAY,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM;IAC3C,MAAM,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACrC,4EAA4E;IAC5E,4EAA4E;IAC5E,yEAAyE;IACzE,aAAa;IACb,IAAI,QAAQ,GAAG,GAAG,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;IAC1C,MAAM,UAAU,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IACzC,IAAI,UAAU,YAAY,QAAQ,CAAC,IAAI,EAAE,CAAC;QACtC,QAAQ,GAAG,GAAG,CAAC,GAAG,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IAC3C,CAAC;IACD,OAAO,QAAQ,CAAC;AACpB,CAAC","sourcesContent":["\"use strict\";\n/**\n * @ignore\n * BEGIN HEADER\n *\n * Contains:        Partial Parse\n * CVM-Role:        Utility Function\n * Maintainer:      Hendrik Erz\n * License:         GNU GPL v3\n *\n * Description:     Given a parser function, this utility function renders a\n *                  document part and returns the partial tree for that part.\n *\n * END HEADER\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.partialParse = partialParse;\nconst common_1 = require(\"@lezer/common\");\n/**\n * This function parses the given `text` using a `parser` of your choice and\n * returns an `Element` that you can attach to a @lezer/markdown tree. This\n * helps if you need to parse a piece of text inside a document with a known\n * language but have to wrap it into some custom element. NOTE: Only to be used\n * within a block or inline parser within the main Markdown parser!\n *\n * @param   {BlockContext|InlineContext}  ctx     The context\n * @param   {Parser}                      parser  Either a Lezer parser or a\n *                                                StreamParser\n * @param   {string}                      text    The text to be parsed\n * @param   {number}                      offset  The offset in the document\n *                                                where `text` begins\n *\n * @return  {Element}                             A detached child tree for you\n *                                                to hook up.\n */\nfunction partialParse(ctx, parser, text, offset) {\n    const innerTree = parser.parse(text);\n    // Here we detach the syntax tree from the containing `Document` node, since\n    // a parser expects that it needs to parse a full document. However, a child\n    // `Document` element may or may not cause problems so we take it off its\n    // root here.\n    let treeElem = ctx.elt(innerTree, offset);\n    const firstChild = innerTree.children[0];\n    if (firstChild instanceof common_1.Tree) {\n        treeElem = ctx.elt(firstChild, offset);\n    }\n    return treeElem;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzovVXNlcnMvSm9zaCBFL0RvY3VtZW50cy9aZXR0bHItc3dlbmc0MzEvc291cmNlL2NvbW1vbi9tb2R1bGVzL21hcmtkb3duLWVkaXRvci9wYXJzZXIvcGFydGlhbC1wYXJzZS50cyIsInNvdXJjZXMiOlsiQzovVXNlcnMvSm9zaCBFL0RvY3VtZW50cy9aZXR0bHItc3dlbmc0MzEvc291cmNlL2NvbW1vbi9tb2R1bGVzL21hcmtkb3duLWVkaXRvci9wYXJzZXIvcGFydGlhbC1wYXJzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7R0FhRzs7QUFzQkgsb0NBYUM7QUFqQ0QsMENBQWlEO0FBR2pEOzs7Ozs7Ozs7Ozs7Ozs7O0dBZ0JHO0FBQ0gsU0FBZ0IsWUFBWSxDQUFFLEdBQStCLEVBQUUsTUFBYyxFQUFFLElBQVksRUFBRSxNQUFjO0lBQ3pHLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDcEMsNEVBQTRFO0lBQzVFLDRFQUE0RTtJQUM1RSx5RUFBeUU7SUFDekUsYUFBYTtJQUNiLElBQUksUUFBUSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQ3pDLE1BQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDeEMsSUFBSSxVQUFVLFlBQVksYUFBSSxFQUFFLENBQUM7UUFDL0IsUUFBUSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQ3hDLENBQUM7SUFFRCxPQUFPLFFBQVEsQ0FBQTtBQUNqQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBpZ25vcmVcclxuICogQkVHSU4gSEVBREVSXHJcbiAqXHJcbiAqIENvbnRhaW5zOiAgICAgICAgUGFydGlhbCBQYXJzZVxyXG4gKiBDVk0tUm9sZTogICAgICAgIFV0aWxpdHkgRnVuY3Rpb25cclxuICogTWFpbnRhaW5lcjogICAgICBIZW5kcmlrIEVyelxyXG4gKiBMaWNlbnNlOiAgICAgICAgIEdOVSBHUEwgdjNcclxuICpcclxuICogRGVzY3JpcHRpb246ICAgICBHaXZlbiBhIHBhcnNlciBmdW5jdGlvbiwgdGhpcyB1dGlsaXR5IGZ1bmN0aW9uIHJlbmRlcnMgYVxyXG4gKiAgICAgICAgICAgICAgICAgIGRvY3VtZW50IHBhcnQgYW5kIHJldHVybnMgdGhlIHBhcnRpYWwgdHJlZSBmb3IgdGhhdCBwYXJ0LlxyXG4gKlxyXG4gKiBFTkQgSEVBREVSXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgdHlwZSBQYXJzZXIsIFRyZWUgfSBmcm9tICdAbGV6ZXIvY29tbW9uJ1xyXG5pbXBvcnQgeyB0eXBlIEJsb2NrQ29udGV4dCwgdHlwZSBJbmxpbmVDb250ZXh0LCB0eXBlIEVsZW1lbnQgfSBmcm9tICdAbGV6ZXIvbWFya2Rvd24nXHJcblxyXG4vKipcclxuICogVGhpcyBmdW5jdGlvbiBwYXJzZXMgdGhlIGdpdmVuIGB0ZXh0YCB1c2luZyBhIGBwYXJzZXJgIG9mIHlvdXIgY2hvaWNlIGFuZFxyXG4gKiByZXR1cm5zIGFuIGBFbGVtZW50YCB0aGF0IHlvdSBjYW4gYXR0YWNoIHRvIGEgQGxlemVyL21hcmtkb3duIHRyZWUuIFRoaXNcclxuICogaGVscHMgaWYgeW91IG5lZWQgdG8gcGFyc2UgYSBwaWVjZSBvZiB0ZXh0IGluc2lkZSBhIGRvY3VtZW50IHdpdGggYSBrbm93blxyXG4gKiBsYW5ndWFnZSBidXQgaGF2ZSB0byB3cmFwIGl0IGludG8gc29tZSBjdXN0b20gZWxlbWVudC4gTk9URTogT25seSB0byBiZSB1c2VkXHJcbiAqIHdpdGhpbiBhIGJsb2NrIG9yIGlubGluZSBwYXJzZXIgd2l0aGluIHRoZSBtYWluIE1hcmtkb3duIHBhcnNlciFcclxuICpcclxuICogQHBhcmFtICAge0Jsb2NrQ29udGV4dHxJbmxpbmVDb250ZXh0fSAgY3R4ICAgICBUaGUgY29udGV4dFxyXG4gKiBAcGFyYW0gICB7UGFyc2VyfSAgICAgICAgICAgICAgICAgICAgICBwYXJzZXIgIEVpdGhlciBhIExlemVyIHBhcnNlciBvciBhXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RyZWFtUGFyc2VyXHJcbiAqIEBwYXJhbSAgIHtzdHJpbmd9ICAgICAgICAgICAgICAgICAgICAgIHRleHQgICAgVGhlIHRleHQgdG8gYmUgcGFyc2VkXHJcbiAqIEBwYXJhbSAgIHtudW1iZXJ9ICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCAgVGhlIG9mZnNldCBpbiB0aGUgZG9jdW1lbnRcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVyZSBgdGV4dGAgYmVnaW5zXHJcbiAqXHJcbiAqIEByZXR1cm4gIHtFbGVtZW50fSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQSBkZXRhY2hlZCBjaGlsZCB0cmVlIGZvciB5b3VcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBob29rIHVwLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHBhcnRpYWxQYXJzZSAoY3R4OiBCbG9ja0NvbnRleHR8SW5saW5lQ29udGV4dCwgcGFyc2VyOiBQYXJzZXIsIHRleHQ6IHN0cmluZywgb2Zmc2V0OiBudW1iZXIpOiBFbGVtZW50IHtcclxuICBjb25zdCBpbm5lclRyZWUgPSBwYXJzZXIucGFyc2UodGV4dClcclxuICAvLyBIZXJlIHdlIGRldGFjaCB0aGUgc3ludGF4IHRyZWUgZnJvbSB0aGUgY29udGFpbmluZyBgRG9jdW1lbnRgIG5vZGUsIHNpbmNlXHJcbiAgLy8gYSBwYXJzZXIgZXhwZWN0cyB0aGF0IGl0IG5lZWRzIHRvIHBhcnNlIGEgZnVsbCBkb2N1bWVudC4gSG93ZXZlciwgYSBjaGlsZFxyXG4gIC8vIGBEb2N1bWVudGAgZWxlbWVudCBtYXkgb3IgbWF5IG5vdCBjYXVzZSBwcm9ibGVtcyBzbyB3ZSB0YWtlIGl0IG9mZiBpdHNcclxuICAvLyByb290IGhlcmUuXHJcbiAgbGV0IHRyZWVFbGVtID0gY3R4LmVsdChpbm5lclRyZWUsIG9mZnNldClcclxuICBjb25zdCBmaXJzdENoaWxkID0gaW5uZXJUcmVlLmNoaWxkcmVuWzBdXHJcbiAgaWYgKGZpcnN0Q2hpbGQgaW5zdGFuY2VvZiBUcmVlKSB7XHJcbiAgICB0cmVlRWxlbSA9IGN0eC5lbHQoZmlyc3RDaGlsZCwgb2Zmc2V0KVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRyZWVFbGVtXHJcbn1cclxuIl19"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"8af080bccb69e4326f51e77588e8d0b39e30e74c","contentHash":"38c7a8c209e723cfcad5a3d4bf5b347d7434ce46cd6aa31c8ca805f25af8bb6d"},"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-editor\\parser\\frontmatter-parser.ts":{"path":"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-editor\\parser\\frontmatter-parser.ts","statementMap":{"0":{"start":{"line":15,"column":0},"end":{"line":15,"column":62}},"1":{"start":{"line":16,"column":0},"end":{"line":16,"column":35}},"2":{"start":{"line":17,"column":0},"end":{"line":17,"column":38}},"3":{"start":{"line":18,"column":17},"end":{"line":18,"column":41}},"4":{"start":{"line":19,"column":20},"end":{"line":19,"column":52}},"5":{"start":{"line":24,"column":19},"end":{"line":24,"column":58}},"6":{"start":{"line":25,"column":4},"end":{"line":32,"column":7}},"7":{"start":{"line":26,"column":8},"end":{"line":31,"column":9}},"8":{"start":{"line":27,"column":12},"end":{"line":27,"column":78}},"9":{"start":{"line":27,"column":46},"end":{"line":27,"column":75}},"10":{"start":{"line":30,"column":12},"end":{"line":30,"column":24}},"11":{"start":{"line":39,"column":0},"end":{"line":90,"column":2}},"12":{"start":{"line":49,"column":8},"end":{"line":51,"column":9}},"13":{"start":{"line":50,"column":12},"end":{"line":50,"column":25}},"14":{"start":{"line":56,"column":26},"end":{"line":56,"column":28}},"15":{"start":{"line":57,"column":8},"end":{"line":59,"column":9}},"16":{"start":{"line":58,"column":12},"end":{"line":58,"column":38}},"17":{"start":{"line":60,"column":8},"end":{"line":65,"column":9}},"18":{"start":{"line":64,"column":12},"end":{"line":64,"column":25}},"19":{"start":{"line":70,"column":8},"end":{"line":72,"column":9}},"20":{"start":{"line":71,"column":12},"end":{"line":71,"column":25}},"21":{"start":{"line":78,"column":28},"end":{"line":82,"column":10}},"22":{"start":{"line":86,"column":8},"end":{"line":86,"column":23}},"23":{"start":{"line":87,"column":8},"end":{"line":87,"column":36}},"24":{"start":{"line":88,"column":8},"end":{"line":88,"column":20}}},"fnMap":{"0":{"name":"yamlCodeParse","decl":{"start":{"line":23,"column":9},"end":{"line":23,"column":22}},"loc":{"start":{"line":23,"column":25},"end":{"line":33,"column":1}},"line":23},"1":{"name":"(anonymous_1)","decl":{"start":{"line":25,"column":36},"end":{"line":25,"column":37}},"loc":{"start":{"line":25,"column":53},"end":{"line":32,"column":5}},"line":25},"2":{"name":"(anonymous_2)","decl":{"start":{"line":27,"column":38},"end":{"line":27,"column":39}},"loc":{"start":{"line":27,"column":46},"end":{"line":27,"column":75}},"line":27},"3":{"name":"(anonymous_3)","decl":{"start":{"line":46,"column":11},"end":{"line":46,"column":12}},"loc":{"start":{"line":46,"column":26},"end":{"line":89,"column":5}},"line":46}},"branchMap":{"0":{"loc":{"start":{"line":26,"column":8},"end":{"line":31,"column":9}},"type":"if","locations":[{"start":{"line":26,"column":8},"end":{"line":31,"column":9}},{"start":{"line":29,"column":13},"end":{"line":31,"column":9}}],"line":26},"1":{"loc":{"start":{"line":49,"column":8},"end":{"line":51,"column":9}},"type":"if","locations":[{"start":{"line":49,"column":8},"end":{"line":51,"column":9}},{"start":{},"end":{}}],"line":49},"2":{"loc":{"start":{"line":49,"column":12},"end":{"line":49,"column":54}},"type":"binary-expr","locations":[{"start":{"line":49,"column":12},"end":{"line":49,"column":31}},{"start":{"line":49,"column":35},"end":{"line":49,"column":54}}],"line":49},"3":{"loc":{"start":{"line":57,"column":15},"end":{"line":57,"column":68}},"type":"binary-expr","locations":[{"start":{"line":57,"column":15},"end":{"line":57,"column":29}},{"start":{"line":57,"column":33},"end":{"line":57,"column":68}}],"line":57},"4":{"loc":{"start":{"line":60,"column":8},"end":{"line":65,"column":9}},"type":"if","locations":[{"start":{"line":60,"column":8},"end":{"line":65,"column":9}},{"start":{},"end":{}}],"line":60},"5":{"loc":{"start":{"line":70,"column":8},"end":{"line":72,"column":9}},"type":"if","locations":[{"start":{"line":70,"column":8},"end":{"line":72,"column":9}},{"start":{},"end":{}}],"line":70},"6":{"loc":{"start":{"line":70,"column":12},"end":{"line":70,"column":62}},"type":"binary-expr","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":32}},{"start":{"line":70,"column":36},"end":{"line":70,"column":62}}],"line":70}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0},"f":{"0":0,"1":0,"2":0,"3":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-editor/parser/frontmatter-parser.ts","sources":["C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-editor/parser/frontmatter-parser.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @ignore\n * BEGIN HEADER\n *\n * Contains:        Frontmatter Parser\n * CVM-Role:        InlineParser\n * Maintainer:      Hendrik Erz\n * License:         GNU GPL v3\n *\n * Description:     This block parser adds YAML frontmatter syntax tags.\n *\n * END HEADER\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.frontmatterParser = void 0;\nexports.yamlCodeParse = yamlCodeParse;\nconst common_1 = require(\"@lezer/common\");\nconst lang_yaml_1 = require(\"@codemirror/lang-yaml\");\n// Adapted from: https://github.com/lezer-parser/markdown/blob/main/src/nest.ts\n// This function looks out for parsed frontmatter nodes and starts an inner\n// parse to add syntax highlighting to these.\nfunction yamlCodeParse() {\n    const parser = (0, lang_yaml_1.yaml)().language.parser;\n    return (0, common_1.parseMixed)((node, input) => {\n        if (node.type.name === 'YAMLFrontmatter') {\n            return { parser, overlay: node => node.type.name === 'CodeText' };\n        }\n        else {\n            return null;\n        }\n    });\n}\n/**\n * A BlockParser that looks out for frontmatter blocks and wraps them in a\n * YAMLFrontmatter and CodeText node. The parsing of the actual contents is done\n * with a separate parse wrapper (see above)\n */\nexports.frontmatterParser = {\n    // We need to give the parser a name. Since it should only parse YAML frontmatters,\n    // here we go.\n    name: 'frontmatter',\n    // It must run before the HorizontalRule block parser since the delimiters\n    // can also be interpreted as horizontal rules.\n    before: 'HorizontalRule',\n    parse: (ctx, line) => {\n        // This parser is inspired by the BlockParsers defined in\n        // @lezer/markdown/src/markdown.ts\n        if (line.text !== '---' || ctx.lineStart !== 0) {\n            return false;\n        }\n        // We have a possible YAML frontmatter. Now we need to look for the end of\n        // the frontmatter (i.e. look for a line that is either --- or ...).\n        // Meanwhile, we'll be collecting all lines encountered so that we can parse\n        // them into a YAML AST.\n        const yamlLines = [];\n        while (ctx.nextLine() && !/^(?:-{3}|\\.{3})$/.test(line.text)) {\n            yamlLines.push(line.text);\n        }\n        if (!/^(?:-{3}|\\.{3})$/.test(line.text)) {\n            // The parser has collected the full rest of the document. This means\n            // the frontmatter never stopped. In order to maintain readability, we\n            // simply abort parsing.\n            return false;\n        }\n        // A final check: A frontmatter is allowed to be empty, but it is NOT a\n        // valid document if there is whitespace at the top (i.e. no blank lines\n        // between the delimiters and the frontmatter content). Note that whitespace\n        // *after* the frontmatter content is allowed.\n        if (yamlLines.length > 0 && yamlLines[0].trim() === '') {\n            return false;\n        }\n        // At this point we have a correct and full YAML frontmatter, we know where\n        // it starts and we know where it ends. In order to simplify creating the\n        // required AST, we defer to letting the YAML parser parse this thing into\n        // a tree that we can then simply convert into the format consumed by\n        // Codemirror.\n        const wrapperNode = ctx.elt('YAMLFrontmatter', 0, ctx.lineStart + 3, [\n            ctx.elt('YAMLFrontmatterStart', 0, 3),\n            ctx.elt('CodeText', 4, ctx.lineStart - 1),\n            ctx.elt('YAMLFrontmatterEnd', ctx.lineStart, ctx.lineStart + 3)\n        ]);\n        // Now that we are certain that we have a frontmatter, we must \"consume\" the\n        // final line of the frontmatter so that the HorizontalRule parser cannot\n        // detect this as a HorizontalRule (if the frontmatter ends with ---)\n        ctx.nextLine();\n        ctx.addElement(wrapperNode);\n        return true; // Signal that we've parsed this block\n    }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"00f2deccb3e04e50866b6ea8e466847823f065e6","contentHash":"5d87fdc9fa1932a8860b90a7686ff2afe81b047284ded8e00e735de509c5ee2c"},"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-editor\\parser\\math-parser.ts":{"path":"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-editor\\parser\\math-parser.ts","statementMap":{"0":{"start":{"line":16,"column":0},"end":{"line":16,"column":62}},"1":{"start":{"line":17,"column":0},"end":{"line":17,"column":60}},"2":{"start":{"line":18,"column":19},"end":{"line":18,"column":50}},"3":{"start":{"line":19,"column":17},"end":{"line":19,"column":41}},"4":{"start":{"line":20,"column":15},"end":{"line":20,"column":60}},"5":{"start":{"line":21,"column":24},"end":{"line":21,"column":50}},"6":{"start":{"line":22,"column":17},"end":{"line":22,"column":66}},"7":{"start":{"line":23,"column":0},"end":{"line":52,"column":2}},"8":{"start":{"line":27,"column":8},"end":{"line":29,"column":9}},"9":{"start":{"line":28,"column":12},"end":{"line":28,"column":22}},"10":{"start":{"line":30,"column":29},"end":{"line":30,"column":106}},"11":{"start":{"line":32,"column":33},"end":{"line":32,"column":49}},"12":{"start":{"line":33,"column":8},"end":{"line":33,"column":50}},"13":{"start":{"line":35,"column":22},"end":{"line":35,"column":49}},"14":{"start":{"line":37,"column":8},"end":{"line":39,"column":9}},"15":{"start":{"line":38,"column":12},"end":{"line":38,"column":22}},"16":{"start":{"line":41,"column":31},"end":{"line":41,"column":43}},"17":{"start":{"line":42,"column":21},"end":{"line":42,"column":24}},"18":{"start":{"line":43,"column":27},"end":{"line":43,"column":80}},"19":{"start":{"line":44,"column":8},"end":{"line":44,"column":32}},"20":{"start":{"line":45,"column":25},"end":{"line":45,"column":92}},"21":{"start":{"line":46,"column":8},"end":{"line":46,"column":34}},"22":{"start":{"line":47,"column":8},"end":{"line":47,"column":28}},"23":{"start":{"line":48,"column":8},"end":{"line":48,"column":77}},"24":{"start":{"line":49,"column":28},"end":{"line":49,"column":90}},"25":{"start":{"line":50,"column":8},"end":{"line":50,"column":43}},"26":{"start":{"line":53,"column":0},"end":{"line":100,"column":2}},"27":{"start":{"line":58,"column":28},"end":{"line":58,"column":44}},"28":{"start":{"line":61,"column":8},"end":{"line":63,"column":9}},"29":{"start":{"line":62,"column":12},"end":{"line":62,"column":25}},"30":{"start":{"line":65,"column":30},"end":{"line":65,"column":32}},"31":{"start":{"line":67,"column":26},"end":{"line":67,"column":39}},"32":{"start":{"line":68,"column":21},"end":{"line":68,"column":57}},"33":{"start":{"line":69,"column":8},"end":{"line":71,"column":9}},"34":{"start":{"line":70,"column":12},"end":{"line":70,"column":42}},"35":{"start":{"line":72,"column":8},"end":{"line":77,"column":9}},"36":{"start":{"line":76,"column":12},"end":{"line":76,"column":25}},"37":{"start":{"line":80,"column":25},"end":{"line":80,"column":49}},"38":{"start":{"line":81,"column":26},"end":{"line":81,"column":57}},"39":{"start":{"line":83,"column":27},"end":{"line":83,"column":48}},"40":{"start":{"line":84,"column":23},"end":{"line":84,"column":47}},"41":{"start":{"line":85,"column":8},"end":{"line":87,"column":9}},"42":{"start":{"line":86,"column":12},"end":{"line":86,"column":49}},"43":{"start":{"line":89,"column":28},"end":{"line":93,"column":10}},"44":{"start":{"line":94,"column":8},"end":{"line":94,"column":36}},"45":{"start":{"line":97,"column":8},"end":{"line":97,"column":23}},"46":{"start":{"line":98,"column":8},"end":{"line":98,"column":20}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":26,"column":11},"end":{"line":26,"column":12}},"loc":{"start":{"line":26,"column":31},"end":{"line":51,"column":5}},"line":26},"1":{"name":"(anonymous_1)","decl":{"start":{"line":57,"column":11},"end":{"line":57,"column":12}},"loc":{"start":{"line":57,"column":26},"end":{"line":99,"column":5}},"line":57}},"branchMap":{"0":{"loc":{"start":{"line":27,"column":8},"end":{"line":29,"column":9}},"type":"if","locations":[{"start":{"line":27,"column":8},"end":{"line":29,"column":9}},{"start":{},"end":{}}],"line":27},"1":{"loc":{"start":{"line":37,"column":8},"end":{"line":39,"column":9}},"type":"if","locations":[{"start":{"line":37,"column":8},"end":{"line":39,"column":9}},{"start":{},"end":{}}],"line":37},"2":{"loc":{"start":{"line":37,"column":12},"end":{"line":37,"column":60}},"type":"binary-expr","locations":[{"start":{"line":37,"column":12},"end":{"line":37,"column":26}},{"start":{"line":37,"column":30},"end":{"line":37,"column":60}}],"line":37},"3":{"loc":{"start":{"line":61,"column":8},"end":{"line":63,"column":9}},"type":"if","locations":[{"start":{"line":61,"column":8},"end":{"line":63,"column":9}},{"start":{},"end":{}}],"line":61},"4":{"loc":{"start":{"line":69,"column":15},"end":{"line":69,"column":61}},"type":"binary-expr","locations":[{"start":{"line":69,"column":15},"end":{"line":69,"column":29}},{"start":{"line":69,"column":33},"end":{"line":69,"column":61}}],"line":69},"5":{"loc":{"start":{"line":72,"column":8},"end":{"line":77,"column":9}},"type":"if","locations":[{"start":{"line":72,"column":8},"end":{"line":77,"column":9}},{"start":{},"end":{}}],"line":72},"6":{"loc":{"start":{"line":85,"column":8},"end":{"line":87,"column":9}},"type":"if","locations":[{"start":{"line":85,"column":8},"end":{"line":87,"column":9}},{"start":{},"end":{}}],"line":85}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0},"f":{"0":0,"1":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-editor/parser/math-parser.ts","sources":["C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-editor/parser/math-parser.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @ignore\n * BEGIN HEADER\n *\n * Contains:        Math Parser\n * CVM-Role:        InlineParser, BlockParser\n * Maintainer:      Hendrik Erz\n * License:         GNU GPL v3\n *\n * Description:     This module provides an inline and a block parser for both\n *                  inline and block math.\n *\n * END HEADER\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.blockMathParser = exports.inlineMathParser = void 0;\nconst language_1 = require(\"@codemirror/language\");\nconst common_1 = require(\"@lezer/common\");\nconst stex_1 = require(\"@codemirror/legacy-modes/mode/stex\");\nconst partial_parse_1 = require(\"./partial-parse\");\nconst stexLang = language_1.StreamLanguage.define(stex_1.stexMath);\nexports.inlineMathParser = {\n    // This parser should only match inline-math (we have to divide that here)\n    name: 'inlineMath',\n    parse: (ctx, next, pos) => {\n        if (next !== 36) { // $\n            return -1;\n        }\n        const inlineMathRE = /(?<![\\\\$])(?<dollar>\\${1,2})(?![\\s$])(?<eq>.+?)(?<![\\s\\\\])\\k<dollar>(?!\\d)/g;\n        // Set the lastIndex to the relative position where we're currently parsing ...\n        const relativePosition = pos - ctx.offset;\n        inlineMathRE.lastIndex = relativePosition;\n        // .. attempt a match ...\n        const match = inlineMathRE.exec(ctx.text);\n        // ... check that we had one, and that it is at the very start of the string ...\n        if (match === null || match.index > relativePosition) {\n            return -1; // There was either no match, or we're not yet there\n        }\n        // ... and work through the match.\n        const { eq, dollar } = match.groups;\n        let curPos = pos;\n        const childNodes = [ctx.elt('CodeMark', curPos, curPos + dollar.length)];\n        curPos += dollar.length;\n        const treeElem = (0, partial_parse_1.partialParse)(ctx, stexLang.parser, eq, curPos);\n        childNodes.push(treeElem);\n        curPos += eq.length;\n        childNodes.push(ctx.elt('CodeMark', curPos, curPos + dollar.length));\n        const wrapperElem = ctx.elt('InlineCode', pos, curPos + dollar.length, childNodes);\n        return ctx.addElement(wrapperElem);\n    }\n};\nexports.blockMathParser = {\n    // We need to give the parser a name. Since it should only parse YAML frontmatters,\n    // here we go.\n    name: 'blockMath',\n    parse: (ctx, line) => {\n        const blockMathRE = /^(\\s*\\$\\$)\\s*$/;\n        // This parser is inspired by the BlockParsers defined in\n        // @lezer/markdown/src/markdown.ts\n        if (!blockMathRE.test(line.text)) {\n            return false;\n        }\n        // We have a possible math block\n        const equationLines = [];\n        // We also need the position at which the block ends\n        const startFrom = ctx.lineStart;\n        const from = ctx.lineStart + line.text.length + 1;\n        while (ctx.nextLine() && !blockMathRE.test(line.text)) {\n            equationLines.push(line.text);\n        }\n        if (!blockMathRE.test(line.text)) {\n            // The parser has collected the full rest of the document. This means\n            // the math block never stopped. In order to maintain readability, we\n            // simply abort parsing.\n            return false;\n        }\n        // Let the stex mode parse the block into a tree and create a new element\n        // from that tree.\n        const equation = equationLines.join('\\n');\n        const innerTree = stexLang.parser.parse(equation);\n        // Here we detach the syntax tree from the containing `Document` node\n        const firstChild = innerTree.children[0];\n        let treeElem = ctx.elt(innerTree, from);\n        if (firstChild instanceof common_1.Tree) {\n            treeElem = ctx.elt(firstChild, from);\n        }\n        // Now create the wrapper\n        const wrapperNode = ctx.elt('FencedCode', startFrom, ctx.lineStart + line.text.length, [\n            ctx.elt('CodeMark', startFrom, from - 1), // Ignore the newline char (to ensure the math renderer can differentiate math blocks from code blocks)\n            ctx.elt('CodeText', from, from + equation.length, [treeElem]),\n            ctx.elt('CodeMark', Math.max(from + equation.length, ctx.lineStart), ctx.lineStart + line.text.length)\n        ]);\n        ctx.addElement(wrapperNode);\n        // Ensure the closing code mark is also contained within this block. NOTE:\n        // Needs to be done AFTER we have used the line info to create the widget!\n        ctx.nextLine();\n        return true; // Signal that we've parsed this block\n    }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"7c50da7308c65542ea0073e930051b64fb7f83e0","contentHash":"5b7e6d598a4d08189803225e1374f0ddb96903b0c05eb1bcfc1fec4245129dc2"},"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-editor\\parser\\sloppy-parser.ts":{"path":"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-editor\\parser\\sloppy-parser.ts","statementMap":{"0":{"start":{"line":23,"column":0},"end":{"line":23,"column":62}},"1":{"start":{"line":24,"column":0},"end":{"line":24,"column":30}},"2":{"start":{"line":25,"column":24},"end":{"line":25,"column":60}},"3":{"start":{"line":26,"column":17},"end":{"line":26,"column":106}},"4":{"start":{"line":27,"column":0},"end":{"line":130,"column":2}},"5":{"start":{"line":31,"column":8},"end":{"line":33,"column":9}},"6":{"start":{"line":32,"column":12},"end":{"line":32,"column":22}},"7":{"start":{"line":34,"column":28},"end":{"line":34,"column":50}},"8":{"start":{"line":35,"column":31},"end":{"line":35,"column":47}},"9":{"start":{"line":36,"column":30},"end":{"line":36,"column":60}},"10":{"start":{"line":37,"column":22},"end":{"line":37,"column":53}},"11":{"start":{"line":38,"column":23},"end":{"line":38,"column":34}},"12":{"start":{"line":39,"column":8},"end":{"line":41,"column":9}},"13":{"start":{"line":40,"column":12},"end":{"line":40,"column":22}},"14":{"start":{"line":48,"column":25},"end":{"line":48,"column":27}},"15":{"start":{"line":50,"column":19},"end":{"line":50,"column":22}},"16":{"start":{"line":51,"column":17},"end":{"line":51,"column":25}},"17":{"start":{"line":52,"column":8},"end":{"line":52,"column":53}},"18":{"start":{"line":53,"column":8},"end":{"line":55,"column":9}},"19":{"start":{"line":54,"column":12},"end":{"line":54,"column":61}},"20":{"start":{"line":57,"column":8},"end":{"line":57,"column":18}},"21":{"start":{"line":58,"column":8},"end":{"line":58,"column":67}},"22":{"start":{"line":62,"column":26},"end":{"line":62,"column":76}},"23":{"start":{"line":63,"column":21},"end":{"line":63,"column":46}},"24":{"start":{"line":64,"column":23},"end":{"line":64,"column":36}},"25":{"start":{"line":65,"column":30},"end":{"line":65,"column":32}},"26":{"start":{"line":66,"column":8},"end":{"line":81,"column":32}},"27":{"start":{"line":72,"column":12},"end":{"line":80,"column":13}},"28":{"start":{"line":73,"column":35},"end":{"line":73,"column":57}},"29":{"start":{"line":74,"column":16},"end":{"line":78,"column":17}},"30":{"start":{"line":76,"column":20},"end":{"line":76,"column":97}},"31":{"start":{"line":77,"column":20},"end":{"line":77,"column":60}},"32":{"start":{"line":79,"column":16},"end":{"line":79,"column":22}},"33":{"start":{"line":82,"column":8},"end":{"line":82,"column":69}},"34":{"start":{"line":84,"column":8},"end":{"line":84,"column":18}},"35":{"start":{"line":85,"column":8},"end":{"line":85,"column":22}},"36":{"start":{"line":86,"column":8},"end":{"line":86,"column":53}},"37":{"start":{"line":87,"column":8},"end":{"line":87,"column":57}},"38":{"start":{"line":89,"column":8},"end":{"line":89,"column":18}},"39":{"start":{"line":90,"column":23},"end":{"line":90,"column":24}},"40":{"start":{"line":91,"column":8},"end":{"line":100,"column":9}},"41":{"start":{"line":92,"column":22},"end":{"line":92,"column":54}},"42":{"start":{"line":93,"column":12},"end":{"line":98,"column":13}},"43":{"start":{"line":94,"column":16},"end":{"line":94,"column":27}},"44":{"start":{"line":96,"column":17},"end":{"line":98,"column":13}},"45":{"start":{"line":97,"column":16},"end":{"line":97,"column":27}},"46":{"start":{"line":99,"column":12},"end":{"line":99,"column":17}},"47":{"start":{"line":101,"column":8},"end":{"line":103,"column":9}},"48":{"start":{"line":102,"column":12},"end":{"line":102,"column":22}},"49":{"start":{"line":106,"column":18},"end":{"line":106,"column":68}},"50":{"start":{"line":107,"column":8},"end":{"line":126,"column":9}},"51":{"start":{"line":109,"column":12},"end":{"line":109,"column":45}},"52":{"start":{"line":110,"column":12},"end":{"line":110,"column":52}},"53":{"start":{"line":111,"column":12},"end":{"line":111,"column":26}},"54":{"start":{"line":112,"column":12},"end":{"line":112,"column":26}},"55":{"start":{"line":113,"column":12},"end":{"line":113,"column":57}},"56":{"start":{"line":114,"column":32},"end":{"line":114,"column":75}},"57":{"start":{"line":115,"column":12},"end":{"line":115,"column":22}},"58":{"start":{"line":116,"column":12},"end":{"line":116,"column":36}},"59":{"start":{"line":117,"column":12},"end":{"line":117,"column":58}},"60":{"start":{"line":118,"column":12},"end":{"line":118,"column":22}},"61":{"start":{"line":119,"column":12},"end":{"line":119,"column":26}},"62":{"start":{"line":120,"column":12},"end":{"line":120,"column":57}},"63":{"start":{"line":121,"column":12},"end":{"line":121,"column":61}},"64":{"start":{"line":124,"column":12},"end":{"line":124,"column":56}},"65":{"start":{"line":125,"column":12},"end":{"line":125,"column":59}},"66":{"start":{"line":127,"column":24},"end":{"line":127,"column":77}},"67":{"start":{"line":128,"column":8},"end":{"line":128,"column":39}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":30,"column":11},"end":{"line":30,"column":12}},"loc":{"start":{"line":30,"column":31},"end":{"line":129,"column":5}},"line":30}},"branchMap":{"0":{"loc":{"start":{"line":31,"column":8},"end":{"line":33,"column":9}},"type":"if","locations":[{"start":{"line":31,"column":8},"end":{"line":33,"column":9}},{"start":{},"end":{}}],"line":31},"1":{"loc":{"start":{"line":31,"column":12},"end":{"line":31,"column":38}},"type":"binary-expr","locations":[{"start":{"line":31,"column":12},"end":{"line":31,"column":23}},{"start":{"line":31,"column":27},"end":{"line":31,"column":38}}],"line":31},"2":{"loc":{"start":{"line":39,"column":8},"end":{"line":41,"column":9}},"type":"if","locations":[{"start":{"line":39,"column":8},"end":{"line":41,"column":9}},{"start":{},"end":{}}],"line":39},"3":{"loc":{"start":{"line":53,"column":8},"end":{"line":55,"column":9}},"type":"if","locations":[{"start":{"line":53,"column":8},"end":{"line":55,"column":9}},{"start":{},"end":{}}],"line":53},"4":{"loc":{"start":{"line":72,"column":12},"end":{"line":80,"column":13}},"type":"if","locations":[{"start":{"line":72,"column":12},"end":{"line":80,"column":13}},{"start":{},"end":{}}],"line":72},"5":{"loc":{"start":{"line":91,"column":15},"end":{"line":91,"column":64}},"type":"binary-expr","locations":[{"start":{"line":91,"column":15},"end":{"line":91,"column":27}},{"start":{"line":91,"column":31},"end":{"line":91,"column":64}}],"line":91},"6":{"loc":{"start":{"line":93,"column":12},"end":{"line":98,"column":13}},"type":"if","locations":[{"start":{"line":93,"column":12},"end":{"line":98,"column":13}},{"start":{"line":96,"column":17},"end":{"line":98,"column":13}}],"line":93},"7":{"loc":{"start":{"line":96,"column":17},"end":{"line":98,"column":13}},"type":"if","locations":[{"start":{"line":96,"column":17},"end":{"line":98,"column":13}},{"start":{},"end":{}}],"line":96},"8":{"loc":{"start":{"line":101,"column":8},"end":{"line":103,"column":9}},"type":"if","locations":[{"start":{"line":101,"column":8},"end":{"line":103,"column":9}},{"start":{},"end":{}}],"line":101},"9":{"loc":{"start":{"line":107,"column":8},"end":{"line":126,"column":9}},"type":"if","locations":[{"start":{"line":107,"column":8},"end":{"line":126,"column":9}},{"start":{"line":123,"column":13},"end":{"line":126,"column":9}}],"line":107},"10":{"loc":{"start":{"line":127,"column":32},"end":{"line":127,"column":57}},"type":"cond-expr","locations":[{"start":{"line":127,"column":41},"end":{"line":127,"column":47}},{"start":{"line":127,"column":50},"end":{"line":127,"column":57}}],"line":127}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0},"f":{"0":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-editor/parser/sloppy-parser.ts","sources":["C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-editor/parser/sloppy-parser.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @ignore\n * BEGIN HEADER\n *\n * Contains:        Image and Link parser\n * CVM-Role:        View\n * Maintainer:      Hendrik Erz\n * License:         GNU GPL v3\n *\n * Description:     A small parser that can parse images and links that,\n *                  contrary to the built-in parser, allows spaces and non-\n *                  encoded characters in URLs. While this is the correct\n *                  behavior, Markdown has to deal with many local images and\n *                  links, and in there it's quite annoying either to have to\n *                  replace all spaces with %20, or have the images not work.\n *                  Here we basically implement a more \"sloppy\" parser that\n *                  gives our users the ability to paste readable, non-URL-\n *                  encoded file paths.\n *\n * END HEADER\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sloppyParser = void 0;\nconst lang_markdown_1 = require(\"@codemirror/lang-markdown\");\nconst mdParser = (0, lang_markdown_1.markdown)({ base: lang_markdown_1.markdownLanguage }).language.parser;\nexports.sloppyParser = {\n    name: 'sloppy-parser', // Could be a fancy restaurant name or a bad one for a photographer\n    before: 'Link',\n    parse: (ctx, next, pos) => {\n        if (next !== 33 && next !== 91) { // 33 == !, 91 == [\n            return -1;\n        }\n        const imgOrLinkRE = /^!?\\[[^\\]]+\\]\\(.+\\)/i;\n        const relativeOffset = pos - ctx.offset;\n        const relativeSlice = ctx.text.slice(relativeOffset);\n        const match = imgOrLinkRE.exec(relativeSlice);\n        const isLink = next === 91;\n        if (match === null) {\n            return -1;\n        }\n        // NOTE: Since Markdown links can contain brackets, we cannot do this with\n        // a RegExp-only solution (we could, but that might render us vulnerable to\n        // infinite loops in the RegExp engine if done improperly). Henceforth, we\n        // use RegExp only to detect whether there's an actually valid link at the\n        // current context position. Next, we literally go char by char to find all\n        // the elements we need\n        const children = [];\n        // Code Marks: ![\n        let from = pos;\n        let to = from + 1;\n        children.push(ctx.elt('LinkMark', from, to));\n        if (!isLink) {\n            children.push(ctx.elt('LinkMark', ++from, ++to));\n        }\n        // Alt-text\n        from = to;\n        to = from + ctx.text.slice(from - ctx.offset).indexOf(']');\n        // The ALT-text can contain inline content (cf.\n        // https://spec.commonmark.org/0.30/#example-515) so we have to run an\n        // additional inline parse on it.\n        const linkLabel = ctx.text.slice(from - ctx.offset, to - ctx.offset);\n        const tree = mdParser.parse(linkLabel);\n        const cursor = tree.cursor();\n        const labelChildren = [];\n        do {\n            // ALT text can only contain inline nodes, but the parser will wrap\n            // everything in both a Document and a Paragraph b/c it sees its as a\n            // standalone document. Since the ALT text can only contain inline\n            // elements, we skip the \"Document\" wrapper and only extract the children\n            // of the next \"Paragraph\" element.\n            if (cursor.name === 'Paragraph') {\n                let currentChild = cursor.node.firstChild;\n                while (currentChild !== null) {\n                    // ctx.elt luckily also takes in an entire Tree, saving us a recursion\n                    labelChildren.push(ctx.elt(currentChild.toTree(), from + currentChild.from));\n                    currentChild = currentChild.nextSibling;\n                }\n                break;\n            }\n        } while (cursor.next());\n        children.push(ctx.elt('LinkLabel', from, to, labelChildren));\n        // Code Marks: ](\n        from = to;\n        to = from + 1;\n        children.push(ctx.elt('LinkMark', from, to));\n        children.push(ctx.elt('LinkMark', ++from, ++to));\n        // Perform our bracket matching magic ✨\n        from = to;\n        let brackets = 1; // Count the opening bracket\n        while (brackets > 0 && to < ctx.offset + ctx.text.length) {\n            const c = ctx.text.charAt(to - ctx.offset);\n            if (c === '(') {\n                brackets++;\n            }\n            else if (c === ')') {\n                brackets--;\n            }\n            to++;\n        }\n        if (brackets > 0) {\n            return -1; // The link didn't end until the end of the line\n        }\n        // Now, `to` points after the final bracket. The next check we have to do is\n        // see if there's a title inside.\n        let url = ctx.text.slice(from - ctx.offset, to - ctx.offset);\n        if (/\".+\"\\)$/.test(url)) {\n            // We have a title\n            to = from + url.indexOf('\"') - 1;\n            children.push(ctx.elt('URL', from, to));\n            from = to + 1;\n            to = from + 1;\n            children.push(ctx.elt('LinkMark', from, to));\n            const titleLength = url.lastIndexOf('\"') - url.indexOf('\"') - 1;\n            from = to;\n            to = from + titleLength;\n            children.push(ctx.elt('LinkTitle', from, to));\n            from = to;\n            to = from + 1;\n            children.push(ctx.elt('LinkMark', from, to));\n            children.push(ctx.elt('LinkMark', ++from, ++to));\n        }\n        else {\n            children.push(ctx.elt('URL', from, to - 1));\n            children.push(ctx.elt('LinkMark', to - 1, to));\n        }\n        const wrapper = ctx.elt(isLink ? 'Link' : 'Image', pos, to, children);\n        return ctx.addElement(wrapper);\n    }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"922f96d42246401dc3a0ac49a530b07208e5606a","contentHash":"aed5470cebf3465191ac95c5247550d7b1cf51b2e06d5f5bfa283f60acd38467"},"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-editor\\parser\\pandoc-table-parser.ts":{"path":"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-editor\\parser\\pandoc-table-parser.ts","statementMap":{"0":{"start":{"line":21,"column":0},"end":{"line":21,"column":62}},"1":{"start":{"line":22,"column":0},"end":{"line":22,"column":59}},"2":{"start":{"line":24,"column":15},"end":{"line":24,"column":39}},"3":{"start":{"line":25,"column":21},"end":{"line":25,"column":32}},"4":{"start":{"line":26,"column":19},"end":{"line":26,"column":34}},"5":{"start":{"line":27,"column":22},"end":{"line":27,"column":32}},"6":{"start":{"line":39,"column":17},"end":{"line":39,"column":19}},"7":{"start":{"line":42,"column":15},"end":{"line":42,"column":18}},"8":{"start":{"line":43,"column":13},"end":{"line":43,"column":34}},"9":{"start":{"line":44,"column":4},"end":{"line":67,"column":5}},"10":{"start":{"line":45,"column":8},"end":{"line":45,"column":32}},"11":{"start":{"line":46,"column":28},"end":{"line":46,"column":49}},"12":{"start":{"line":47,"column":8},"end":{"line":65,"column":9}},"13":{"start":{"line":48,"column":24},"end":{"line":48,"column":59}},"14":{"start":{"line":49,"column":12},"end":{"line":49,"column":60}},"15":{"start":{"line":53,"column":29},"end":{"line":53,"column":72}},"16":{"start":{"line":54,"column":27},"end":{"line":54,"column":35}},"17":{"start":{"line":55,"column":25},"end":{"line":55,"column":33}},"18":{"start":{"line":56,"column":12},"end":{"line":63,"column":13}},"19":{"start":{"line":57,"column":16},"end":{"line":61,"column":17}},"20":{"start":{"line":58,"column":20},"end":{"line":58,"column":74}},"21":{"start":{"line":59,"column":20},"end":{"line":59,"column":81}},"22":{"start":{"line":60,"column":20},"end":{"line":60,"column":38}},"23":{"start":{"line":62,"column":16},"end":{"line":62,"column":25}},"24":{"start":{"line":64,"column":12},"end":{"line":64,"column":63}},"25":{"start":{"line":66,"column":8},"end":{"line":66,"column":22}},"26":{"start":{"line":68,"column":4},"end":{"line":68,"column":44}},"27":{"start":{"line":81,"column":17},"end":{"line":81,"column":19}},"28":{"start":{"line":85,"column":15},"end":{"line":85,"column":18}},"29":{"start":{"line":86,"column":13},"end":{"line":86,"column":34}},"30":{"start":{"line":87,"column":22},"end":{"line":87,"column":26}},"31":{"start":{"line":88,"column":23},"end":{"line":88,"column":28}},"32":{"start":{"line":89,"column":4},"end":{"line":120,"column":5}},"33":{"start":{"line":90,"column":8},"end":{"line":90,"column":36}},"34":{"start":{"line":91,"column":8},"end":{"line":97,"column":9}},"35":{"start":{"line":92,"column":26},"end":{"line":92,"column":61}},"36":{"start":{"line":93,"column":12},"end":{"line":93,"column":62}},"37":{"start":{"line":94,"column":12},"end":{"line":94,"column":33}},"38":{"start":{"line":95,"column":12},"end":{"line":95,"column":22}},"39":{"start":{"line":96,"column":12},"end":{"line":96,"column":21}},"40":{"start":{"line":98,"column":25},"end":{"line":98,"column":27}},"41":{"start":{"line":99,"column":23},"end":{"line":99,"column":27}},"42":{"start":{"line":100,"column":21},"end":{"line":100,"column":25}},"43":{"start":{"line":101,"column":8},"end":{"line":113,"column":9}},"44":{"start":{"line":102,"column":12},"end":{"line":111,"column":13}},"45":{"start":{"line":103,"column":29},"end":{"line":103,"column":70}},"46":{"start":{"line":104,"column":16},"end":{"line":104,"column":63}},"47":{"start":{"line":105,"column":16},"end":{"line":105,"column":77}},"48":{"start":{"line":106,"column":16},"end":{"line":106,"column":38}},"49":{"start":{"line":108,"column":17},"end":{"line":111,"column":13}},"50":{"start":{"line":109,"column":16},"end":{"line":109,"column":81}},"51":{"start":{"line":110,"column":16},"end":{"line":110,"column":27}},"52":{"start":{"line":112,"column":12},"end":{"line":112,"column":21}},"53":{"start":{"line":114,"column":8},"end":{"line":114,"column":59}},"54":{"start":{"line":115,"column":8},"end":{"line":115,"column":18}},"55":{"start":{"line":116,"column":8},"end":{"line":119,"column":9}},"56":{"start":{"line":117,"column":12},"end":{"line":117,"column":32}},"57":{"start":{"line":118,"column":12},"end":{"line":118,"column":32}},"58":{"start":{"line":121,"column":4},"end":{"line":121,"column":44}},"59":{"start":{"line":123,"column":0},"end":{"line":146,"column":2}},"60":{"start":{"line":127,"column":8},"end":{"line":129,"column":9}},"61":{"start":{"line":128,"column":12},"end":{"line":128,"column":25}},"62":{"start":{"line":132,"column":22},"end":{"line":132,"column":33}},"63":{"start":{"line":133,"column":22},"end":{"line":133,"column":35}},"64":{"start":{"line":135,"column":8},"end":{"line":137,"column":9}},"65":{"start":{"line":136,"column":12},"end":{"line":136,"column":34}},"66":{"start":{"line":138,"column":8},"end":{"line":140,"column":9}},"67":{"start":{"line":139,"column":12},"end":{"line":139,"column":25}},"68":{"start":{"line":141,"column":20},"end":{"line":141,"column":52}},"69":{"start":{"line":142,"column":20},"end":{"line":142,"column":58}},"70":{"start":{"line":143,"column":8},"end":{"line":143,"column":28}},"71":{"start":{"line":144,"column":8},"end":{"line":144,"column":20}},"72":{"start":{"line":147,"column":23},"end":{"line":177,"column":1}},"73":{"start":{"line":151,"column":8},"end":{"line":151,"column":21}},"74":{"start":{"line":156,"column":22},"end":{"line":156,"column":46}},"75":{"start":{"line":157,"column":8},"end":{"line":159,"column":9}},"76":{"start":{"line":158,"column":12},"end":{"line":158,"column":25}},"77":{"start":{"line":160,"column":8},"end":{"line":162,"column":9}},"78":{"start":{"line":161,"column":12},"end":{"line":161,"column":25}},"79":{"start":{"line":164,"column":8},"end":{"line":171,"column":9}},"80":{"start":{"line":164,"column":21},"end":{"line":164,"column":22}},"81":{"start":{"line":165,"column":12},"end":{"line":167,"column":13}},"82":{"start":{"line":166,"column":16},"end":{"line":166,"column":25}},"83":{"start":{"line":168,"column":12},"end":{"line":170,"column":13}},"84":{"start":{"line":169,"column":16},"end":{"line":169,"column":29}},"85":{"start":{"line":173,"column":20},"end":{"line":173,"column":92}},"86":{"start":{"line":174,"column":8},"end":{"line":174,"column":38}},"87":{"start":{"line":175,"column":8},"end":{"line":175,"column":20}},"88":{"start":{"line":178,"column":0},"end":{"line":193,"column":2}},"89":{"start":{"line":181,"column":8},"end":{"line":191,"column":9}},"90":{"start":{"line":187,"column":12},"end":{"line":187,"column":34}},"91":{"start":{"line":190,"column":12},"end":{"line":190,"column":24}}},"fnMap":{"0":{"name":"parseGridTable","decl":{"start":{"line":38,"column":9},"end":{"line":38,"column":23}},"loc":{"start":{"line":38,"column":46},"end":{"line":69,"column":1}},"line":38},"1":{"name":"parsePipeTable","decl":{"start":{"line":80,"column":9},"end":{"line":80,"column":23}},"loc":{"start":{"line":80,"column":46},"end":{"line":122,"column":1}},"line":80},"2":{"name":"(anonymous_2)","decl":{"start":{"line":125,"column":11},"end":{"line":125,"column":12}},"loc":{"start":{"line":125,"column":26},"end":{"line":145,"column":5}},"line":125},"3":{"name":"(anonymous_3)","decl":{"start":{"line":148,"column":4},"end":{"line":148,"column":5}},"loc":{"start":{"line":148,"column":30},"end":{"line":152,"column":5}},"line":148},"4":{"name":"(anonymous_4)","decl":{"start":{"line":153,"column":4},"end":{"line":153,"column":5}},"loc":{"start":{"line":153,"column":22},"end":{"line":176,"column":5}},"line":153},"5":{"name":"(anonymous_5)","decl":{"start":{"line":180,"column":4},"end":{"line":180,"column":5}},"loc":{"start":{"line":180,"column":20},"end":{"line":192,"column":5}},"line":180}},"branchMap":{"0":{"loc":{"start":{"line":47,"column":8},"end":{"line":65,"column":9}},"type":"if","locations":[{"start":{"line":47,"column":8},"end":{"line":65,"column":9}},{"start":{"line":51,"column":13},"end":{"line":65,"column":9}}],"line":47},"1":{"loc":{"start":{"line":57,"column":16},"end":{"line":61,"column":17}},"type":"if","locations":[{"start":{"line":57,"column":16},"end":{"line":61,"column":17}},{"start":{},"end":{}}],"line":57},"2":{"loc":{"start":{"line":91,"column":8},"end":{"line":97,"column":9}},"type":"if","locations":[{"start":{"line":91,"column":8},"end":{"line":97,"column":9}},{"start":{},"end":{}}],"line":91},"3":{"loc":{"start":{"line":102,"column":12},"end":{"line":111,"column":13}},"type":"if","locations":[{"start":{"line":102,"column":12},"end":{"line":111,"column":13}},{"start":{"line":108,"column":17},"end":{"line":111,"column":13}}],"line":102},"4":{"loc":{"start":{"line":102,"column":16},"end":{"line":102,"column":43}},"type":"binary-expr","locations":[{"start":{"line":102,"column":16},"end":{"line":102,"column":26}},{"start":{"line":102,"column":30},"end":{"line":102,"column":43}}],"line":102},"5":{"loc":{"start":{"line":103,"column":29},"end":{"line":103,"column":70}},"type":"cond-expr","locations":[{"start":{"line":103,"column":43},"end":{"line":103,"column":56}},{"start":{"line":103,"column":59},"end":{"line":103,"column":70}}],"line":103},"6":{"loc":{"start":{"line":108,"column":17},"end":{"line":111,"column":13}},"type":"if","locations":[{"start":{"line":108,"column":17},"end":{"line":111,"column":13}},{"start":{},"end":{}}],"line":108},"7":{"loc":{"start":{"line":108,"column":21},"end":{"line":108,"column":52}},"type":"binary-expr","locations":[{"start":{"line":108,"column":21},"end":{"line":108,"column":31}},{"start":{"line":108,"column":35},"end":{"line":108,"column":52}}],"line":108},"8":{"loc":{"start":{"line":116,"column":8},"end":{"line":119,"column":9}},"type":"if","locations":[{"start":{"line":116,"column":8},"end":{"line":119,"column":9}},{"start":{},"end":{}}],"line":116},"9":{"loc":{"start":{"line":127,"column":8},"end":{"line":129,"column":9}},"type":"if","locations":[{"start":{"line":127,"column":8},"end":{"line":129,"column":9}},{"start":{},"end":{}}],"line":127},"10":{"loc":{"start":{"line":135,"column":15},"end":{"line":135,"column":94}},"type":"binary-expr","locations":[{"start":{"line":135,"column":15},"end":{"line":135,"column":29}},{"start":{"line":135,"column":34},"end":{"line":135,"column":60}},{"start":{"line":135,"column":64},"end":{"line":135,"column":93}}],"line":135},"11":{"loc":{"start":{"line":138,"column":8},"end":{"line":140,"column":9}},"type":"if","locations":[{"start":{"line":138,"column":8},"end":{"line":140,"column":9}},{"start":{},"end":{}}],"line":138},"12":{"loc":{"start":{"line":157,"column":8},"end":{"line":159,"column":9}},"type":"if","locations":[{"start":{"line":157,"column":8},"end":{"line":159,"column":9}},{"start":{},"end":{}}],"line":157},"13":{"loc":{"start":{"line":160,"column":8},"end":{"line":162,"column":9}},"type":"if","locations":[{"start":{"line":160,"column":8},"end":{"line":162,"column":9}},{"start":{},"end":{}}],"line":160},"14":{"loc":{"start":{"line":165,"column":12},"end":{"line":167,"column":13}},"type":"if","locations":[{"start":{"line":165,"column":12},"end":{"line":167,"column":13}},{"start":{},"end":{}}],"line":165},"15":{"loc":{"start":{"line":168,"column":12},"end":{"line":170,"column":13}},"type":"if","locations":[{"start":{"line":168,"column":12},"end":{"line":170,"column":13}},{"start":{},"end":{}}],"line":168},"16":{"loc":{"start":{"line":181,"column":8},"end":{"line":191,"column":9}},"type":"if","locations":[{"start":{"line":181,"column":8},"end":{"line":191,"column":9}},{"start":{"line":189,"column":13},"end":{"line":191,"column":9}}],"line":181}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":1,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":1,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":1,"89":0,"90":0,"91":0},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-editor/parser/pandoc-table-parser.ts","sources":["C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-editor/parser/pandoc-table-parser.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @ignore\n * BEGIN HEADER\n *\n * Contains:        Pandoc table Parser\n * CVM-Role:        Block Parser\n * Maintainer:      Hendrik Erz\n * License:         GNU GPL v3\n *\n * Description:     Since the default Markdown mode only offers limited support\n *                  for tables, this parser ensures we detect any kind of table\n *                  supported by Pandoc in a given document. The exception are\n *                  simple tables, both because they are hard to detect and as\n *                  other parsers will always take precedence. Tl;DR: Use pipe\n *                  or grid tables instead. That's what we have the TableEditor\n *                  for.\n *\n * END HEADER\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pipeTableParser = exports.gridTableParser = void 0;\n// Group 1: ^| table contents |$; Group 2: some text | with pipes in between\nconst pipeRE = /^(\\|.+?\\|)$|(.+?\\|.+?)/;\nconst pipeHeaderRE = /^[|+:-]+$/;\nconst gridLineRE = /^\\+[-=+:]+\\+$/;\nconst gridContentRE = /^\\|.+\\|$/;\n/**\n * Parses a grid table and returns a subtree that can be used for syntax highlighting\n *\n * @param   {BlockContext}  ctx    The context\n * @param   {number}        pos    Where the table starts in the document\n * @param   {number}        end    Where the table ends in the document\n * @param   {string[]}      lines  The list of lines belonging to the table\n *\n * @return  {Element}              The subtree\n */\nfunction parseGridTable(ctx, pos, end, lines) {\n    const rows = [];\n    // Grid Tables alternate between separator lines and content lines. Content\n    // lines can span multiple rows\n    let from = pos;\n    let to = pos + lines[0].length;\n    for (const line of lines) {\n        to = from + line.length;\n        const isSeparator = gridLineRE.test(line);\n        if (isSeparator) {\n            const sep = ctx.elt('TableDelimiter', from, to);\n            rows.push(ctx.elt('TableRow', from, to, [sep]));\n        }\n        else {\n            // Content line -> move through the line and mark delimiters as we see them\n            const children = [ctx.elt('TableDelimiter', from, from + 1)];\n            let cellFrom = from + 1;\n            let cellTo = cellFrom;\n            for (const ch of line.substring(1)) {\n                if (ch === '|') {\n                    children.push(ctx.elt('TableCell', cellFrom, cellTo));\n                    children.push(ctx.elt('TableDelimiter', cellTo, cellTo + 1));\n                    cellFrom = cellTo;\n                }\n                cellTo++;\n            }\n            rows.push(ctx.elt('TableRow', from, to, children));\n        }\n        from = to + 1;\n    }\n    return ctx.elt('Table', pos, end, rows);\n}\n/**\n * Parses a pipe table and returns a subtree that can be used for syntax highlighting\n *\n * @param   {BlockContext}  ctx    The context\n * @param   {number}        pos    Where the table starts in the document\n * @param   {number}        end    Where the table ends in the document\n * @param   {string[]}      lines  The list of lines belonging to the table\n *\n * @return  {Element}              The subtree\n */\nfunction parsePipeTable(ctx, pos, end, lines) {\n    const rows = [];\n    // For pipe tables, the first row is always the header, the second always the\n    // delimiter, afterwards only content cells.\n    // const header = ctx.elt('TableHeader')\n    let from = pos;\n    let to = pos + lines[0].length;\n    let isFirstLine = true;\n    let isHeaderLine = false;\n    for (const line of lines) {\n        to = from + line.length + 1;\n        if (isHeaderLine) {\n            const delim = ctx.elt('TableDelimiter', from, to);\n            rows.push(ctx.elt('TableRow', from, to, [delim]));\n            isHeaderLine = false;\n            from = to;\n            continue;\n        }\n        const children = [];\n        let cellFrom = from;\n        let cellTo = from;\n        for (const ch of line) {\n            if (ch === '|' && cellTo > from) {\n                const type = isFirstLine ? 'TableHeader' : 'TableCell';\n                children.push(ctx.elt(type, cellFrom, cellTo));\n                children.push(ctx.elt('TableDelimiter', cellTo, cellTo + 1));\n                cellFrom = cellTo + 1;\n            }\n            else if (ch === '|' && cellFrom === from) {\n                children.push(ctx.elt('TableDelimiter', cellFrom, cellFrom + 1));\n                cellFrom++;\n            }\n            cellTo++;\n        }\n        rows.push(ctx.elt('TableRow', from, to, children));\n        from = to;\n        if (isFirstLine) {\n            isHeaderLine = true;\n            isFirstLine = false;\n        }\n    }\n    return ctx.elt('Table', pos, end, rows);\n}\nexports.gridTableParser = {\n    name: 'grid-table',\n    parse: (ctx, line) => {\n        // Let's begin with the easiest thing to detect: grid tables\n        if (!gridLineRE.test(line.text)) {\n            return false;\n        }\n        // We have a potential grid table. The end of the table is being marked by\n        // the last line that matches a grid line.\n        const lines = [line.text];\n        const start = ctx.lineStart;\n        // We have alternating lines with +---+ and | cell |\n        while (ctx.nextLine() && (gridLineRE.test(line.text) || gridContentRE.test(line.text))) {\n            lines.push(line.text);\n        }\n        if (lines.length < 3) {\n            return false; // Grid tables must span at least three lines\n        }\n        const end = ctx.lineStart + line.text.length;\n        const elt = parseGridTable(ctx, start, end, lines);\n        ctx.addElement(elt);\n        return true;\n    }\n};\nconst pipeLeafParser = {\n    nextLine(ctx, line, leaf) {\n        // Pipe tables are only finished on empty lines, i.e. we don't have to do\n        // any logic in here.\n        return false;\n    },\n    finish(ctx, leaf) {\n        // Called when there is an empty line, or something similar. At this point\n        // we need to check that whatever is in the leaf block is a valid pipe table\n        const lines = leaf.content.split('\\n');\n        if (lines.length < 3) {\n            return false; // Pipe tables must have at least three lines\n        }\n        if (!pipeHeaderRE.test(lines[1])) {\n            return false; // Second line must be a pipe table header\n        }\n        // All other lines must conform to pipeRE\n        for (let i = 0; i < lines.length; i++) {\n            if (i === 1) {\n                continue;\n            }\n            if (!pipeRE.test(lines[i])) {\n                return false;\n            }\n        }\n        // Construct the pipe table\n        const elt = parsePipeTable(ctx, leaf.start, leaf.start + leaf.content.length, lines);\n        ctx.addLeafElement(leaf, elt);\n        return true;\n    }\n};\nexports.pipeTableParser = {\n    name: 'pipe-table',\n    leaf(ctx, leaf) {\n        if (pipeRE.test(leaf.content)) {\n            // NOTE: This will not detect \"full\" or \"regular\" pipe tables, since these\n            // will already be handled by the GFM table parser. This parser therefore\n            // basically only takes care of the \"ugly\" pipe tables (where the outer\n            // pipes are omitted). So don't wonder if out of your test pipe tables\n            // only some are detected, that's the reason.\n            return pipeLeafParser;\n        }\n        else {\n            return null;\n        }\n    }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"490d7ea59c06c25738190272a17b4669da8da8a4","contentHash":"0768f737cb8d04ba01fcc298ebfc933cfc3f4255929ac4e462753f54fc5254e7"},"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-editor\\parser\\zkn-link-parser.ts":{"path":"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-editor\\parser\\zkn-link-parser.ts","statementMap":{"0":{"start":{"line":15,"column":0},"end":{"line":15,"column":62}},"1":{"start":{"line":16,"column":0},"end":{"line":16,"column":31}},"2":{"start":{"line":18,"column":22},"end":{"line":66,"column":1}},"3":{"start":{"line":19,"column":4},"end":{"line":65,"column":6}},"4":{"start":{"line":24,"column":34},"end":{"line":24,"column":50}},"5":{"start":{"line":25,"column":31},"end":{"line":25,"column":60}},"6":{"start":{"line":26,"column":12},"end":{"line":28,"column":13}},"7":{"start":{"line":27,"column":16},"end":{"line":27,"column":26}},"8":{"start":{"line":29,"column":12},"end":{"line":31,"column":13}},"9":{"start":{"line":30,"column":16},"end":{"line":30,"column":26}},"10":{"start":{"line":32,"column":25},"end":{"line":32,"column":28}},"11":{"start":{"line":33,"column":23},"end":{"line":33,"column":58}},"12":{"start":{"line":35,"column":30},"end":{"line":35,"column":33}},"13":{"start":{"line":36,"column":28},"end":{"line":36,"column":41}},"14":{"start":{"line":38,"column":28},"end":{"line":38,"column":58}},"15":{"start":{"line":39,"column":26},"end":{"line":39,"column":37}},"16":{"start":{"line":41,"column":29},"end":{"line":44,"column":13}},"17":{"start":{"line":46,"column":32},"end":{"line":46,"column":39}},"18":{"start":{"line":47,"column":30},"end":{"line":47,"column":37}},"19":{"start":{"line":48,"column":29},"end":{"line":48,"column":93}},"20":{"start":{"line":49,"column":28},"end":{"line":49,"column":49}},"21":{"start":{"line":53,"column":12},"end":{"line":61,"column":13}},"22":{"start":{"line":55,"column":35},"end":{"line":55,"column":115}},"23":{"start":{"line":56,"column":16},"end":{"line":56,"column":300}},"24":{"start":{"line":60,"column":16},"end":{"line":60,"column":89}},"25":{"start":{"line":62,"column":28},"end":{"line":62,"column":66}},"26":{"start":{"line":63,"column":12},"end":{"line":63,"column":43}},"27":{"start":{"line":67,"column":0},"end":{"line":67,"column":38}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":18,"column":22},"end":{"line":18,"column":23}},"loc":{"start":{"line":18,"column":40},"end":{"line":66,"column":1}},"line":18},"1":{"name":"(anonymous_1)","decl":{"start":{"line":23,"column":15},"end":{"line":23,"column":16}},"loc":{"start":{"line":23,"column":35},"end":{"line":64,"column":9}},"line":23}},"branchMap":{"0":{"loc":{"start":{"line":26,"column":12},"end":{"line":28,"column":13}},"type":"if","locations":[{"start":{"line":26,"column":12},"end":{"line":28,"column":13}},{"start":{},"end":{}}],"line":26},"1":{"loc":{"start":{"line":29,"column":12},"end":{"line":31,"column":13}},"type":"if","locations":[{"start":{"line":29,"column":12},"end":{"line":31,"column":13}},{"start":{},"end":{}}],"line":29},"2":{"loc":{"start":{"line":53,"column":12},"end":{"line":61,"column":13}},"type":"if","locations":[{"start":{"line":53,"column":12},"end":{"line":61,"column":13}},{"start":{"line":58,"column":17},"end":{"line":61,"column":13}}],"line":53},"3":{"loc":{"start":{"line":53,"column":16},"end":{"line":53,"column":54}},"type":"binary-expr","locations":[{"start":{"line":53,"column":16},"end":{"line":53,"column":27}},{"start":{"line":53,"column":31},"end":{"line":53,"column":54}}],"line":53},"4":{"loc":{"start":{"line":55,"column":36},"end":{"line":55,"column":97}},"type":"cond-expr","locations":[{"start":{"line":55,"column":75},"end":{"line":55,"column":81}},{"start":{"line":55,"column":84},"end":{"line":55,"column":97}}],"line":55},"5":{"loc":{"start":{"line":55,"column":36},"end":{"line":55,"column":72}},"type":"binary-expr","locations":[{"start":{"line":55,"column":36},"end":{"line":55,"column":51}},{"start":{"line":55,"column":55},"end":{"line":55,"column":72}}],"line":55},"6":{"loc":{"start":{"line":56,"column":46},"end":{"line":56,"column":92}},"type":"cond-expr","locations":[{"start":{"line":56,"column":59},"end":{"line":56,"column":73}},{"start":{"line":56,"column":76},"end":{"line":56,"column":92}}],"line":56},"7":{"loc":{"start":{"line":56,"column":213},"end":{"line":56,"column":259}},"type":"cond-expr","locations":[{"start":{"line":56,"column":226},"end":{"line":56,"column":242}},{"start":{"line":56,"column":245},"end":{"line":56,"column":259}}],"line":56}},"s":{"0":1,"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1},"f":{"0":0,"1":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-editor/parser/zkn-link-parser.ts","sources":["C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-editor/parser/zkn-link-parser.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @ignore\n * BEGIN HEADER\n *\n * Contains:        Zettelkasten Link Parser\n * CVM-Role:        InlineParser\n * Maintainer:      Hendrik Erz\n * License:         GNU GPL v3\n *\n * Description:     A small parser that adds Zettelkasten link elements to the tree.\n *\n * END HEADER\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.zknLinkParser = void 0;\n// This parser adds Zettelkasten links to the syntax tree.\nconst zknLinkParser = function (config) {\n    return {\n        // This parser should only match citations\n        name: 'zkn-links',\n        before: 'Link', // In case of default [[links]], the inner brackets would be detected as links\n        parse: (ctx, next, pos) => {\n            const currentOffset = pos - ctx.offset;\n            const restOfLine = ctx.text.slice(currentOffset);\n            if (!restOfLine.startsWith('[[')) {\n                return -1;\n            }\n            if (restOfLine.indexOf(']]') < 2) {\n                return -1;\n            }\n            const from = pos;\n            const to = from + restOfLine.indexOf(']]') + 2;\n            // [[\n            const startFrom = pos;\n            const startTo = startFrom + 2;\n            // ]]\n            const endFrom = pos + restOfLine.indexOf(']]');\n            const endTo = endFrom + 2;\n            // Populate the children array\n            const children = [\n                ctx.elt('CodeMark', startFrom, startTo),\n                ctx.elt('CodeMark', endFrom, endTo)\n            ];\n            // Link contents\n            const contentFrom = startTo;\n            const contentTo = endFrom;\n            const contents = ctx.text.slice(contentFrom - ctx.offset, contentTo - ctx.offset);\n            const pipeIdx = contents.indexOf('|');\n            // NOTE: In order to avoid either empty links or empty titles and having\n            // to deal with these edge cases, we disallow putting pipes at either the\n            // beginning or the end of a link.\n            if (pipeIdx > 0 && !contents.endsWith('|')) {\n                // The link contains both a link and a title.\n                const titleFirst = (config === null || config === void 0 ? void 0 : config.format) === 'title|link';\n                children.splice(1, 0, ctx.elt(titleFirst ? 'ZknLinkTitle' : 'ZknLinkContent', contentFrom, contentFrom + pipeIdx), ctx.elt('ZknLinkPipe', contentFrom + pipeIdx, contentFrom + pipeIdx + 1), ctx.elt(titleFirst ? 'ZknLinkContent' : 'ZknLinkTitle', contentFrom + pipeIdx + 1, contentTo));\n            }\n            else {\n                // The link equals the title, no pipe found\n                children.splice(1, 0, ctx.elt('ZknLinkContent', contentFrom, contentTo));\n            }\n            const wrapper = ctx.elt('ZknLink', from, to, children);\n            return ctx.addElement(wrapper);\n        }\n    };\n};\nexports.zknLinkParser = zknLinkParser;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzovVXNlcnMvSm9zaCBFL0RvY3VtZW50cy9aZXR0bHItc3dlbmc0MzEvc291cmNlL2NvbW1vbi9tb2R1bGVzL21hcmtkb3duLWVkaXRvci9wYXJzZXIvemtuLWxpbmstcGFyc2VyLnRzIiwic291cmNlcyI6WyJDOi9Vc2Vycy9Kb3NoIEUvRG9jdW1lbnRzL1pldHRsci1zd2VuZzQzMS9zb3VyY2UvY29tbW9uL21vZHVsZXMvbWFya2Rvd24tZWRpdG9yL3BhcnNlci96a24tbGluay1wYXJzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7R0FZRzs7O0FBcUJILDBEQUEwRDtBQUNuRCxNQUFNLGFBQWEsR0FBRyxVQUFVLE1BQTRCO0lBQ2pFLE9BQU87UUFDTCwwQ0FBMEM7UUFDMUMsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLE1BQU0sRUFBRSw4RUFBOEU7UUFDOUYsS0FBSyxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUN4QixNQUFNLGFBQWEsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQTtZQUN0QyxNQUFNLFVBQVUsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQTtZQUNoRCxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO2dCQUNqQyxPQUFPLENBQUMsQ0FBQyxDQUFBO1lBQ1gsQ0FBQztZQUVELElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztnQkFDakMsT0FBTyxDQUFDLENBQUMsQ0FBQTtZQUNYLENBQUM7WUFFRCxNQUFNLElBQUksR0FBRyxHQUFHLENBQUE7WUFDaEIsTUFBTSxFQUFFLEdBQUcsSUFBSSxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBRTlDLEtBQUs7WUFDTCxNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUE7WUFDckIsTUFBTSxPQUFPLEdBQUcsU0FBUyxHQUFHLENBQUMsQ0FBQTtZQUU3QixLQUFLO1lBQ0wsTUFBTSxPQUFPLEdBQUcsR0FBRyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDOUMsTUFBTSxLQUFLLEdBQUcsT0FBTyxHQUFHLENBQUMsQ0FBQTtZQUV6Qiw4QkFBOEI7WUFDOUIsTUFBTSxRQUFRLEdBQUc7Z0JBQ2YsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQztnQkFDdkMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQzthQUNwQyxDQUFBO1lBRUQsZ0JBQWdCO1lBQ2hCLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQTtZQUMzQixNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUE7WUFDekIsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsU0FBUyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtZQUVqRixNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQ3JDLHdFQUF3RTtZQUN4RSx5RUFBeUU7WUFDekUsa0NBQWtDO1lBQ2xDLElBQUksT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztnQkFDM0MsNkNBQTZDO2dCQUM3QyxNQUFNLFVBQVUsR0FBRyxDQUFBLE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxNQUFNLE1BQUssWUFBWSxDQUFBO2dCQUNsRCxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQ2xCLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxXQUFXLEdBQUcsT0FBTyxDQUFDLEVBQzNGLEdBQUcsQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLFdBQVcsR0FBRyxPQUFPLEVBQUUsV0FBVyxHQUFHLE9BQU8sR0FBRyxDQUFDLENBQUMsRUFDeEUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxjQUFjLEVBQUUsV0FBVyxHQUFHLE9BQU8sR0FBRyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQzlGLENBQUE7WUFDSCxDQUFDO2lCQUFNLENBQUM7Z0JBQ04sMkNBQTJDO2dCQUMzQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQTtZQUMxRSxDQUFDO1lBRUQsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQTtZQUV0RCxPQUFPLEdBQUcsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDaEMsQ0FBQztLQUNGLENBQUE7QUFDSCxDQUFDLENBQUE7QUE1RFksUUFBQSxhQUFhLGlCQTREekIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGlnbm9yZVxyXG4gKiBCRUdJTiBIRUFERVJcclxuICpcclxuICogQ29udGFpbnM6ICAgICAgICBaZXR0ZWxrYXN0ZW4gTGluayBQYXJzZXJcclxuICogQ1ZNLVJvbGU6ICAgICAgICBJbmxpbmVQYXJzZXJcclxuICogTWFpbnRhaW5lcjogICAgICBIZW5kcmlrIEVyelxyXG4gKiBMaWNlbnNlOiAgICAgICAgIEdOVSBHUEwgdjNcclxuICpcclxuICogRGVzY3JpcHRpb246ICAgICBBIHNtYWxsIHBhcnNlciB0aGF0IGFkZHMgWmV0dGVsa2FzdGVuIGxpbmsgZWxlbWVudHMgdG8gdGhlIHRyZWUuXHJcbiAqXHJcbiAqIEVORCBIRUFERVJcclxuICovXHJcblxyXG5pbXBvcnQgeyB0eXBlIElubGluZVBhcnNlciB9IGZyb20gJ0BsZXplci9tYXJrZG93bidcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgWmtuTGlua1BhcnNlckNvbmZpZyB7XHJcbiAgLyoqXHJcbiAgICogRGVzY3JpYmVzIHdoZXRoZXIgaW50ZXJuYWwgWmV0dGVsa2FzdGVuL1dpa2ktTGlua3Mgc2hvdWxkIGZvbGxvdyB0aGUgZm9ybWF0XHJcbiAgICogYFtbbGlua3x0aXRsZV1dYCwgb3IgYFtbdGl0bGV8bGlua11dYC4gSWYgbm90IHByb3ZpZGVkLCB0aGUgcGFyc2VyIGZhbGxzXHJcbiAgICogYmFjayB0byB0aGUgZGVmYXVsdCBgW1tsaW5rfHRpdGxlXV1gLlxyXG4gICAqXHJcbiAgICogKiBUaGUgYFtbbGlua3x0aXRsZV1dYCBzeW50YXggaXMgdXNlZCBieTpcclxuICAgKiAgICogT2JzaWRpYW5cclxuICAgKiAgICogV2lraXBlZGlhIChNZWRpYVdpa2kpXHJcbiAgICogICAqIFZpbVdpa2lcclxuICAgKiAgICogT3JnbW9kZVxyXG4gICAqICogVGhlIGBbW3RpdGxlfGxpbmtdXWAgc3ludGF4IGlzIHVzZWQgYnk6XHJcbiAgICogICAqIEdpdEh1YlxyXG4gICAqL1xyXG4gIGZvcm1hdD86ICdsaW5rfHRpdGxlJ3wndGl0bGV8bGluaydcclxufVxyXG5cclxuLy8gVGhpcyBwYXJzZXIgYWRkcyBaZXR0ZWxrYXN0ZW4gbGlua3MgdG8gdGhlIHN5bnRheCB0cmVlLlxyXG5leHBvcnQgY29uc3QgemtuTGlua1BhcnNlciA9IGZ1bmN0aW9uIChjb25maWc/OiBaa25MaW5rUGFyc2VyQ29uZmlnKTogSW5saW5lUGFyc2VyIHtcclxuICByZXR1cm4ge1xyXG4gICAgLy8gVGhpcyBwYXJzZXIgc2hvdWxkIG9ubHkgbWF0Y2ggY2l0YXRpb25zXHJcbiAgICBuYW1lOiAnemtuLWxpbmtzJyxcclxuICAgIGJlZm9yZTogJ0xpbmsnLCAvLyBJbiBjYXNlIG9mIGRlZmF1bHQgW1tsaW5rc11dLCB0aGUgaW5uZXIgYnJhY2tldHMgd291bGQgYmUgZGV0ZWN0ZWQgYXMgbGlua3NcclxuICAgIHBhcnNlOiAoY3R4LCBuZXh0LCBwb3MpID0+IHtcclxuICAgICAgY29uc3QgY3VycmVudE9mZnNldCA9IHBvcyAtIGN0eC5vZmZzZXRcclxuICAgICAgY29uc3QgcmVzdE9mTGluZSA9IGN0eC50ZXh0LnNsaWNlKGN1cnJlbnRPZmZzZXQpXHJcbiAgICAgIGlmICghcmVzdE9mTGluZS5zdGFydHNXaXRoKCdbWycpKSB7XHJcbiAgICAgICAgcmV0dXJuIC0xXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChyZXN0T2ZMaW5lLmluZGV4T2YoJ11dJykgPCAyKSB7XHJcbiAgICAgICAgcmV0dXJuIC0xXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGZyb20gPSBwb3NcclxuICAgICAgY29uc3QgdG8gPSBmcm9tICsgcmVzdE9mTGluZS5pbmRleE9mKCddXScpICsgMlxyXG5cclxuICAgICAgLy8gW1tcclxuICAgICAgY29uc3Qgc3RhcnRGcm9tID0gcG9zXHJcbiAgICAgIGNvbnN0IHN0YXJ0VG8gPSBzdGFydEZyb20gKyAyXHJcblxyXG4gICAgICAvLyBdXVxyXG4gICAgICBjb25zdCBlbmRGcm9tID0gcG9zICsgcmVzdE9mTGluZS5pbmRleE9mKCddXScpXHJcbiAgICAgIGNvbnN0IGVuZFRvID0gZW5kRnJvbSArIDJcclxuXHJcbiAgICAgIC8vIFBvcHVsYXRlIHRoZSBjaGlsZHJlbiBhcnJheVxyXG4gICAgICBjb25zdCBjaGlsZHJlbiA9IFtcclxuICAgICAgICBjdHguZWx0KCdDb2RlTWFyaycsIHN0YXJ0RnJvbSwgc3RhcnRUbyksXHJcbiAgICAgICAgY3R4LmVsdCgnQ29kZU1hcmsnLCBlbmRGcm9tLCBlbmRUbylcclxuICAgICAgXVxyXG5cclxuICAgICAgLy8gTGluayBjb250ZW50c1xyXG4gICAgICBjb25zdCBjb250ZW50RnJvbSA9IHN0YXJ0VG9cclxuICAgICAgY29uc3QgY29udGVudFRvID0gZW5kRnJvbVxyXG4gICAgICBjb25zdCBjb250ZW50cyA9IGN0eC50ZXh0LnNsaWNlKGNvbnRlbnRGcm9tIC0gY3R4Lm9mZnNldCwgY29udGVudFRvIC0gY3R4Lm9mZnNldClcclxuXHJcbiAgICAgIGNvbnN0IHBpcGVJZHggPSBjb250ZW50cy5pbmRleE9mKCd8JylcclxuICAgICAgLy8gTk9URTogSW4gb3JkZXIgdG8gYXZvaWQgZWl0aGVyIGVtcHR5IGxpbmtzIG9yIGVtcHR5IHRpdGxlcyBhbmQgaGF2aW5nXHJcbiAgICAgIC8vIHRvIGRlYWwgd2l0aCB0aGVzZSBlZGdlIGNhc2VzLCB3ZSBkaXNhbGxvdyBwdXR0aW5nIHBpcGVzIGF0IGVpdGhlciB0aGVcclxuICAgICAgLy8gYmVnaW5uaW5nIG9yIHRoZSBlbmQgb2YgYSBsaW5rLlxyXG4gICAgICBpZiAocGlwZUlkeCA+IDAgJiYgIWNvbnRlbnRzLmVuZHNXaXRoKCd8JykpIHtcclxuICAgICAgICAvLyBUaGUgbGluayBjb250YWlucyBib3RoIGEgbGluayBhbmQgYSB0aXRsZS5cclxuICAgICAgICBjb25zdCB0aXRsZUZpcnN0ID0gY29uZmlnPy5mb3JtYXQgPT09ICd0aXRsZXxsaW5rJ1xyXG4gICAgICAgIGNoaWxkcmVuLnNwbGljZSgxLCAwLFxyXG4gICAgICAgICAgY3R4LmVsdCh0aXRsZUZpcnN0ID8gJ1prbkxpbmtUaXRsZScgOiAnWmtuTGlua0NvbnRlbnQnLCBjb250ZW50RnJvbSwgY29udGVudEZyb20gKyBwaXBlSWR4KSxcclxuICAgICAgICAgIGN0eC5lbHQoJ1prbkxpbmtQaXBlJywgY29udGVudEZyb20gKyBwaXBlSWR4LCBjb250ZW50RnJvbSArIHBpcGVJZHggKyAxKSxcclxuICAgICAgICAgIGN0eC5lbHQodGl0bGVGaXJzdCA/ICdaa25MaW5rQ29udGVudCcgOiAnWmtuTGlua1RpdGxlJywgY29udGVudEZyb20gKyBwaXBlSWR4ICsgMSwgY29udGVudFRvKVxyXG4gICAgICAgIClcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBUaGUgbGluayBlcXVhbHMgdGhlIHRpdGxlLCBubyBwaXBlIGZvdW5kXHJcbiAgICAgICAgY2hpbGRyZW4uc3BsaWNlKDEsIDAsIGN0eC5lbHQoJ1prbkxpbmtDb250ZW50JywgY29udGVudEZyb20sIGNvbnRlbnRUbykpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IHdyYXBwZXIgPSBjdHguZWx0KCdaa25MaW5rJywgZnJvbSwgdG8sIGNoaWxkcmVuKVxyXG5cclxuICAgICAgcmV0dXJuIGN0eC5hZGRFbGVtZW50KHdyYXBwZXIpXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ=="]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"bb6e2d32d468640c7e170dd16ce85b24a81bd559","contentHash":"599b5c39330c64b863b51baadf630faa2cef2640ac10f989dd4e5d2c75dcebe1"},"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-editor\\parser\\pandoc-attributes-parser.ts":{"path":"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-editor\\parser\\pandoc-attributes-parser.ts","statementMap":{"0":{"start":{"line":22,"column":0},"end":{"line":22,"column":62}},"1":{"start":{"line":23,"column":0},"end":{"line":23,"column":40}},"2":{"start":{"line":27,"column":0},"end":{"line":55,"column":2}},"3":{"start":{"line":30,"column":8},"end":{"line":32,"column":9}},"4":{"start":{"line":31,"column":12},"end":{"line":31,"column":22}},"5":{"start":{"line":33,"column":8},"end":{"line":35,"column":9}},"6":{"start":{"line":34,"column":12},"end":{"line":34,"column":22}},"7":{"start":{"line":37,"column":31},"end":{"line":37,"column":47}},"8":{"start":{"line":38,"column":8},"end":{"line":40,"column":9}},"9":{"start":{"line":39,"column":12},"end":{"line":39,"column":22}},"10":{"start":{"line":41,"column":20},"end":{"line":41,"column":58}},"11":{"start":{"line":45,"column":34},"end":{"line":45,"column":89}},"12":{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},"13":{"start":{"line":47,"column":12},"end":{"line":47,"column":22}},"14":{"start":{"line":49,"column":27},"end":{"line":52,"column":10}},"15":{"start":{"line":53,"column":8},"end":{"line":53,"column":82}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":29,"column":11},"end":{"line":29,"column":12}},"loc":{"start":{"line":29,"column":31},"end":{"line":54,"column":5}},"line":29}},"branchMap":{"0":{"loc":{"start":{"line":30,"column":8},"end":{"line":32,"column":9}},"type":"if","locations":[{"start":{"line":30,"column":8},"end":{"line":32,"column":9}},{"start":{},"end":{}}],"line":30},"1":{"loc":{"start":{"line":33,"column":8},"end":{"line":35,"column":9}},"type":"if","locations":[{"start":{"line":33,"column":8},"end":{"line":35,"column":9}},{"start":{},"end":{}}],"line":33},"2":{"loc":{"start":{"line":38,"column":8},"end":{"line":40,"column":9}},"type":"if","locations":[{"start":{"line":38,"column":8},"end":{"line":40,"column":9}},{"start":{},"end":{}}],"line":38},"3":{"loc":{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},"type":"if","locations":[{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},{"start":{},"end":{}}],"line":46},"4":{"loc":{"start":{"line":46,"column":12},"end":{"line":46,"column":73}},"type":"binary-expr","locations":[{"start":{"line":46,"column":12},"end":{"line":46,"column":51}},{"start":{"line":46,"column":55},"end":{"line":46,"column":73}}],"line":46}},"s":{"0":1,"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"f":{"0":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-editor/parser/pandoc-attributes-parser.ts","sources":["C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-editor/parser/pandoc-attributes-parser.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb;;;;;;;;;;;;;;;;;;;GAmBG;AACH,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9D,OAAO,CAAC,sBAAsB,GAAG,KAAK,CAAC,CAAC;AACxC;;GAEG;AACH,OAAO,CAAC,sBAAsB,GAAG;IAC7B,IAAI,EAAE,mBAAmB;IACzB,KAAK,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE;QACtB,IAAI,IAAI,KAAK,GAAG,EAAE,CAAC,CAAC,YAAY;YAC5B,OAAO,CAAC,CAAC,CAAC;QACd,CAAC;QACD,IAAI,GAAG,KAAK,GAAG,CAAC,MAAM,EAAE,CAAC;YACrB,OAAO,CAAC,CAAC,CAAC,CAAC,+CAA+C;QAC9D,CAAC;QACD,qCAAqC;QACrC,MAAM,cAAc,GAAG,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC;QACxC,IAAI,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,cAAc,EAAE,CAAC;YAC1C,OAAO,CAAC,CAAC,CAAC;QACd,CAAC;QACD,MAAM,GAAG,GAAG,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACnD,2EAA2E;QAC3E,4EAA4E;QAC5E,oDAAoD;QACpD,MAAM,iBAAiB,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAClF,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAChE,OAAO,CAAC,CAAC,CAAC;QACd,CAAC;QACD,MAAM,UAAU,GAAG,GAAG,CAAC,GAAG,CAAC,YAAY,EAAE,GAAG,EAAE,GAAG,EAAE;YAC/C,GAAG,CAAC,GAAG,CAAC,UAAU,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC;YACjC,GAAG,CAAC,GAAG,CAAC,UAAU,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,CAAC;SACpC,CAAC,CAAC;QACH,OAAO,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,iBAAiB,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAC9E,CAAC;CACJ,CAAC","sourcesContent":["\"use strict\";\n/**\n * @ignore\n * BEGIN HEADER\n *\n * Contains:        Pandoc Attributes parser\n * CVM-Role:        View\n * Maintainer:      Hendrik Erz\n * License:         GNU GPL v3\n *\n * Description:     Pandoc supports attributes for various elements in order to\n *                  add metadata to elements. For example, headers can receive a\n *                  custom identifier by specifying it in curly braces\n *                  afterwards, code-blocks can receive more metadata by\n *                  wrapping the info string in curly braces, and images can\n *                  receive specific width and height metrics. This inline\n *                  parser here parses these into tree elements that can then be\n *                  styled.\n *\n * END HEADER\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pandocAttributesParser = void 0;\n/**\n * Parses Pandoc attribute strings (e.g. `{.unnumbered}`) in the code\n */\nexports.pandocAttributesParser = {\n    name: 'pandoc-attributes',\n    parse: (ctx, next, pos) => {\n        if (next !== 123) { // 123 === {\n            return -1;\n        }\n        if (pos === ctx.offset) {\n            return -1; // Curly brackets must only *follow* something.\n        }\n        // Ensure a matching closing bracket.\n        const relativeOffset = pos - ctx.offset;\n        if (ctx.text.indexOf('}') <= relativeOffset) {\n            return -1;\n        }\n        const end = ctx.offset + ctx.text.indexOf('}') + 1;\n        // Final check: Pandoc attributes must be either the last thing on the line\n        // (then they basically apply to the whole line, i.e. with code block meta),\n        // or directly preceeded by a non-whitespace symbol.\n        const isWhitespaceAfter = /^\\s*$/.test(ctx.text.slice(ctx.text.indexOf('}') + 1));\n        if (/\\s/.test(ctx.text[relativeOffset - 1]) && !isWhitespaceAfter) {\n            return -1;\n        }\n        const inlineCode = ctx.elt('InlineCode', pos, end, [\n            ctx.elt('CodeMark', pos, pos + 1),\n            ctx.elt('CodeMark', end - 1, end)\n        ]);\n        return ctx.addElement(ctx.elt('PandocAttribute', pos, end, [inlineCode]));\n    }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzovVXNlcnMvSm9zaCBFL0RvY3VtZW50cy9aZXR0bHItc3dlbmc0MzEvc291cmNlL2NvbW1vbi9tb2R1bGVzL21hcmtkb3duLWVkaXRvci9wYXJzZXIvcGFuZG9jLWF0dHJpYnV0ZXMtcGFyc2VyLnRzIiwic291cmNlcyI6WyJDOi9Vc2Vycy9Kb3NoIEUvRG9jdW1lbnRzL1pldHRsci1zd2VuZzQzMS9zb3VyY2UvY29tbW9uL21vZHVsZXMvbWFya2Rvd24tZWRpdG9yL3BhcnNlci9wYW5kb2MtYXR0cmlidXRlcy1wYXJzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBbUJHOzs7QUFJSDs7R0FFRztBQUNVLFFBQUEsc0JBQXNCLEdBQWlCO0lBQ2xELElBQUksRUFBRSxtQkFBbUI7SUFDekIsS0FBSyxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUN4QixJQUFJLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQyxDQUFDLFlBQVk7WUFDOUIsT0FBTyxDQUFDLENBQUMsQ0FBQTtRQUNYLENBQUM7UUFFRCxJQUFJLEdBQUcsS0FBSyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDdkIsT0FBTyxDQUFDLENBQUMsQ0FBQSxDQUFDLCtDQUErQztRQUMzRCxDQUFDO1FBRUQscUNBQXFDO1FBQ3JDLE1BQU0sY0FBYyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFBO1FBQ3ZDLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksY0FBYyxFQUFFLENBQUM7WUFDNUMsT0FBTyxDQUFDLENBQUMsQ0FBQTtRQUNYLENBQUM7UUFFRCxNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUVsRCwyRUFBMkU7UUFDM0UsNEVBQTRFO1FBQzVFLG9EQUFvRDtRQUNwRCxNQUFNLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNqRixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDbEUsT0FBTyxDQUFDLENBQUMsQ0FBQTtRQUNYLENBQUM7UUFFRCxNQUFNLFVBQVUsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFO1lBQ2pELEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQ2pDLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDO1NBQ2xDLENBQUMsQ0FBQTtRQUVGLE9BQU8sR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDM0UsQ0FBQztDQUNGLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGlnbm9yZVxyXG4gKiBCRUdJTiBIRUFERVJcclxuICpcclxuICogQ29udGFpbnM6ICAgICAgICBQYW5kb2MgQXR0cmlidXRlcyBwYXJzZXJcclxuICogQ1ZNLVJvbGU6ICAgICAgICBWaWV3XHJcbiAqIE1haW50YWluZXI6ICAgICAgSGVuZHJpayBFcnpcclxuICogTGljZW5zZTogICAgICAgICBHTlUgR1BMIHYzXHJcbiAqXHJcbiAqIERlc2NyaXB0aW9uOiAgICAgUGFuZG9jIHN1cHBvcnRzIGF0dHJpYnV0ZXMgZm9yIHZhcmlvdXMgZWxlbWVudHMgaW4gb3JkZXIgdG9cclxuICogICAgICAgICAgICAgICAgICBhZGQgbWV0YWRhdGEgdG8gZWxlbWVudHMuIEZvciBleGFtcGxlLCBoZWFkZXJzIGNhbiByZWNlaXZlIGFcclxuICogICAgICAgICAgICAgICAgICBjdXN0b20gaWRlbnRpZmllciBieSBzcGVjaWZ5aW5nIGl0IGluIGN1cmx5IGJyYWNlc1xyXG4gKiAgICAgICAgICAgICAgICAgIGFmdGVyd2FyZHMsIGNvZGUtYmxvY2tzIGNhbiByZWNlaXZlIG1vcmUgbWV0YWRhdGEgYnlcclxuICogICAgICAgICAgICAgICAgICB3cmFwcGluZyB0aGUgaW5mbyBzdHJpbmcgaW4gY3VybHkgYnJhY2VzLCBhbmQgaW1hZ2VzIGNhblxyXG4gKiAgICAgICAgICAgICAgICAgIHJlY2VpdmUgc3BlY2lmaWMgd2lkdGggYW5kIGhlaWdodCBtZXRyaWNzLiBUaGlzIGlubGluZVxyXG4gKiAgICAgICAgICAgICAgICAgIHBhcnNlciBoZXJlIHBhcnNlcyB0aGVzZSBpbnRvIHRyZWUgZWxlbWVudHMgdGhhdCBjYW4gdGhlbiBiZVxyXG4gKiAgICAgICAgICAgICAgICAgIHN0eWxlZC5cclxuICpcclxuICogRU5EIEhFQURFUlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IHR5cGUgSW5saW5lUGFyc2VyIH0gZnJvbSAnQGxlemVyL21hcmtkb3duJ1xyXG5cclxuLyoqXHJcbiAqIFBhcnNlcyBQYW5kb2MgYXR0cmlidXRlIHN0cmluZ3MgKGUuZy4gYHsudW5udW1iZXJlZH1gKSBpbiB0aGUgY29kZVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHBhbmRvY0F0dHJpYnV0ZXNQYXJzZXI6IElubGluZVBhcnNlciA9IHtcclxuICBuYW1lOiAncGFuZG9jLWF0dHJpYnV0ZXMnLFxyXG4gIHBhcnNlOiAoY3R4LCBuZXh0LCBwb3MpID0+IHtcclxuICAgIGlmIChuZXh0ICE9PSAxMjMpIHsgLy8gMTIzID09PSB7XHJcbiAgICAgIHJldHVybiAtMVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChwb3MgPT09IGN0eC5vZmZzZXQpIHtcclxuICAgICAgcmV0dXJuIC0xIC8vIEN1cmx5IGJyYWNrZXRzIG11c3Qgb25seSAqZm9sbG93KiBzb21ldGhpbmcuXHJcbiAgICB9XHJcblxyXG4gICAgLy8gRW5zdXJlIGEgbWF0Y2hpbmcgY2xvc2luZyBicmFja2V0LlxyXG4gICAgY29uc3QgcmVsYXRpdmVPZmZzZXQgPSBwb3MgLSBjdHgub2Zmc2V0XHJcbiAgICBpZiAoY3R4LnRleHQuaW5kZXhPZignfScpIDw9IHJlbGF0aXZlT2Zmc2V0KSB7XHJcbiAgICAgIHJldHVybiAtMVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGVuZCA9IGN0eC5vZmZzZXQgKyBjdHgudGV4dC5pbmRleE9mKCd9JykgKyAxXHJcblxyXG4gICAgLy8gRmluYWwgY2hlY2s6IFBhbmRvYyBhdHRyaWJ1dGVzIG11c3QgYmUgZWl0aGVyIHRoZSBsYXN0IHRoaW5nIG9uIHRoZSBsaW5lXHJcbiAgICAvLyAodGhlbiB0aGV5IGJhc2ljYWxseSBhcHBseSB0byB0aGUgd2hvbGUgbGluZSwgaS5lLiB3aXRoIGNvZGUgYmxvY2sgbWV0YSksXHJcbiAgICAvLyBvciBkaXJlY3RseSBwcmVjZWVkZWQgYnkgYSBub24td2hpdGVzcGFjZSBzeW1ib2wuXHJcbiAgICBjb25zdCBpc1doaXRlc3BhY2VBZnRlciA9IC9eXFxzKiQvLnRlc3QoY3R4LnRleHQuc2xpY2UoY3R4LnRleHQuaW5kZXhPZignfScpICsgMSkpXHJcbiAgICBpZiAoL1xccy8udGVzdChjdHgudGV4dFtyZWxhdGl2ZU9mZnNldCAtIDFdKSAmJiAhaXNXaGl0ZXNwYWNlQWZ0ZXIpIHtcclxuICAgICAgcmV0dXJuIC0xXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaW5saW5lQ29kZSA9IGN0eC5lbHQoJ0lubGluZUNvZGUnLCBwb3MsIGVuZCwgW1xyXG4gICAgICBjdHguZWx0KCdDb2RlTWFyaycsIHBvcywgcG9zICsgMSksXHJcbiAgICAgIGN0eC5lbHQoJ0NvZGVNYXJrJywgZW5kIC0gMSwgZW5kKVxyXG4gICAgXSlcclxuXHJcbiAgICByZXR1cm4gY3R4LmFkZEVsZW1lbnQoY3R4LmVsdCgnUGFuZG9jQXR0cmlidXRlJywgcG9zLCBlbmQsIFtpbmxpbmVDb2RlXSkpXHJcbiAgfVxyXG59XHJcbiJdfQ=="]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ef9e2cea273ad37a76cb70502ced98ec386dc88d","contentHash":"1ff0b3e72ba371583eaf8c1be4a7e146dee5a9b674e9718b3bb112207f388fae"},"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-editor\\parser\\highlight-parser.ts":{"path":"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-editor\\parser\\highlight-parser.ts","statementMap":{"0":{"start":{"line":15,"column":0},"end":{"line":15,"column":62}},"1":{"start":{"line":16,"column":0},"end":{"line":16,"column":33}},"2":{"start":{"line":17,"column":22},"end":{"line":20,"column":1}},"3":{"start":{"line":29,"column":17},"end":{"line":29,"column":39}},"4":{"start":{"line":33,"column":4},"end":{"line":33,"column":43}},"5":{"start":{"line":35,"column":0},"end":{"line":62,"column":2}},"6":{"start":{"line":39,"column":8},"end":{"line":41,"column":9}},"7":{"start":{"line":40,"column":12},"end":{"line":40,"column":22}},"8":{"start":{"line":43,"column":8},"end":{"line":45,"column":9}},"9":{"start":{"line":44,"column":12},"end":{"line":44,"column":22}},"10":{"start":{"line":54,"column":20},"end":{"line":54,"column":38}},"11":{"start":{"line":55,"column":20},"end":{"line":55,"column":39}},"12":{"start":{"line":56,"column":28},"end":{"line":56,"column":98}},"13":{"start":{"line":57,"column":27},"end":{"line":57,"column":98}},"14":{"start":{"line":58,"column":26},"end":{"line":58,"column":52}},"15":{"start":{"line":59,"column":26},"end":{"line":59,"column":36}},"16":{"start":{"line":60,"column":8},"end":{"line":60,"column":83}}},"fnMap":{"0":{"name":"allowedSurroundingChar","decl":{"start":{"line":28,"column":9},"end":{"line":28,"column":31}},"loc":{"start":{"line":28,"column":35},"end":{"line":34,"column":1}},"line":28},"1":{"name":"(anonymous_1)","decl":{"start":{"line":37,"column":11},"end":{"line":37,"column":12}},"loc":{"start":{"line":37,"column":31},"end":{"line":61,"column":5}},"line":37}},"branchMap":{"0":{"loc":{"start":{"line":39,"column":8},"end":{"line":41,"column":9}},"type":"if","locations":[{"start":{"line":39,"column":8},"end":{"line":41,"column":9}},{"start":{},"end":{}}],"line":39},"1":{"loc":{"start":{"line":39,"column":12},"end":{"line":39,"column":46}},"type":"binary-expr","locations":[{"start":{"line":39,"column":12},"end":{"line":39,"column":23}},{"start":{"line":39,"column":35},"end":{"line":39,"column":46}}],"line":39},"2":{"loc":{"start":{"line":43,"column":8},"end":{"line":45,"column":9}},"type":"if","locations":[{"start":{"line":43,"column":8},"end":{"line":45,"column":9}},{"start":{},"end":{}}],"line":43},"3":{"loc":{"start":{"line":43,"column":12},"end":{"line":43,"column":57}},"type":"binary-expr","locations":[{"start":{"line":43,"column":12},"end":{"line":43,"column":27}},{"start":{"line":43,"column":31},"end":{"line":43,"column":57}}],"line":43},"4":{"loc":{"start":{"line":56,"column":28},"end":{"line":56,"column":98}},"type":"binary-expr","locations":[{"start":{"line":56,"column":28},"end":{"line":56,"column":31}},{"start":{"line":56,"column":36},"end":{"line":56,"column":52}},{"start":{"line":56,"column":56},"end":{"line":56,"column":97}}],"line":56},"5":{"loc":{"start":{"line":57,"column":27},"end":{"line":57,"column":98}},"type":"binary-expr","locations":[{"start":{"line":57,"column":27},"end":{"line":57,"column":30}},{"start":{"line":57,"column":35},"end":{"line":57,"column":52}},{"start":{"line":57,"column":56},"end":{"line":57,"column":97}}],"line":57},"6":{"loc":{"start":{"line":58,"column":26},"end":{"line":58,"column":52}},"type":"binary-expr","locations":[{"start":{"line":58,"column":26},"end":{"line":58,"column":37}},{"start":{"line":58,"column":41},"end":{"line":58,"column":52}}],"line":58}},"s":{"0":1,"1":1,"2":1,"3":0,"4":0,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"f":{"0":0,"1":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0],"5":[0,0,0],"6":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-editor/parser/highlight-parser.ts","sources":["C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-editor/parser/highlight-parser.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb;;;;;;;;;;;;GAYG;AACH,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9D,OAAO,CAAC,eAAe,GAAG,KAAK,CAAC,CAAC;AACjC,MAAM,aAAa,GAAG;IAClB,OAAO,EAAE,kBAAkB;IAC3B,IAAI,EAAE,eAAe,CAAC,2EAA2E;CACpG,CAAC;AACF;;;;;;GAMG;AACH,SAAS,sBAAsB,CAAC,CAAC;IAC7B,MAAM,IAAI,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IACpC,8EAA8E;IAC9E,4EAA4E;IAC5E,6BAA6B;IAC7B,OAAO,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC3C,CAAC;AACD,OAAO,CAAC,eAAe,GAAG;IACtB,IAAI,EAAE,YAAY;IAClB,KAAK,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE;QACtB,wDAAwD;QACxD,IAAI,IAAI,KAAK,EAAE,CAAC,OAAO,IAAI,IAAI,KAAK,EAAE,CAAC,OAAO,EAAE,CAAC;YAC7C,OAAO,CAAC,CAAC,CAAC;QACd,CAAC;QACD,sDAAsD;QACtD,IAAI,GAAG,KAAK,GAAG,CAAC,GAAG,IAAI,IAAI,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC;YAChD,OAAO,CAAC,CAAC,CAAC;QACd,CAAC;QACD,4EAA4E;QAC5E,0EAA0E;QAC1E,0EAA0E;QAC1E,0EAA0E;QAC1E,yEAAyE;QACzE,2EAA2E;QAC3E,yEAAyE;QACzE,gBAAgB;QAChB,MAAM,GAAG,GAAG,GAAG,KAAK,GAAG,CAAC,MAAM,CAAC;QAC/B,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC;QAChC,MAAM,WAAW,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,MAAM,IAAI,sBAAsB,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3F,MAAM,UAAU,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,sBAAsB,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3F,MAAM,SAAS,GAAG,WAAW,IAAI,CAAC,UAAU,CAAC;QAC7C,MAAM,SAAS,GAAG,UAAU,CAAC;QAC7B,OAAO,GAAG,CAAC,YAAY,CAAC,aAAa,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;IAC/E,CAAC;CACJ,CAAC","sourcesContent":["\"use strict\";\n/**\n * @ignore\n * BEGIN HEADER\n *\n * Contains:        Citation Parser\n * CVM-Role:        InlineParser\n * Maintainer:      Hendrik Erz\n * License:         GNU GPL v3\n *\n * Description:     This inline parser adds highlight elements to the tree\n *\n * END HEADER\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.highlightParser = void 0;\nconst MarkDelimiter = {\n    resolve: 'HighlightContent',\n    mark: 'HighlightMark' // No specific syntax node (for now due to backwards compatibility reasons)\n};\n/**\n * Determines if the provided char is allowed to surround highlighting marks\n *\n * @param   {number}   c  The char code\n *\n * @return  {boolean}     Whether it's allowed before/after a highlight mark\n */\nfunction allowedSurroundingChar(c) {\n    const char = String.fromCharCode(c);\n    // Regex matches whitespace (Z), non-word-characters (math, currentcy; S), and\n    // general punctuation characters. NOTE: Partially \"stolen\" and adapted from\n    // the Lezer Markdown parser.\n    return /\\p{Z}|\\p{S}|\\p{P}/u.test(char);\n}\nexports.highlightParser = {\n    name: 'highlights',\n    parse: (ctx, next, pos) => {\n        // The next char must be either a colon or an equal sign\n        if (next !== 58 /* : */ && next !== 61 /* = */) {\n            return -1;\n        }\n        // The one following `next` must be the same character\n        if (pos === ctx.end || next !== ctx.char(pos + 1)) {\n            return -1;\n        }\n        // A highlight marker is considered opening if it is at the beginning of the\n        // line (bol) or is preceded by whitespace or any punctuation or generally\n        // non-word characters. Furthermore, it must not be followed by whitespace\n        // (or punctuation/certain chars) and not be at the end of the line (eol).\n        // For a highlight marker to be considered closing, it needs the opposite\n        // requirements. This is why we need both checks (because otherwise closing\n        // tags would allow preceding whitespace which would prompt Pandoc not to\n        // render them).\n        const bol = pos === ctx.offset;\n        const eol = pos + 2 === ctx.end;\n        const validBefore = bol || (pos > ctx.offset && allowedSurroundingChar(ctx.char(pos - 1)));\n        const validAfter = eol || (pos + 1 < ctx.end && allowedSurroundingChar(ctx.char(pos + 2)));\n        const isOpening = validBefore && !validAfter;\n        const isClosing = validAfter;\n        return ctx.addDelimiter(MarkDelimiter, pos, pos + 2, isOpening, isClosing);\n    }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzovVXNlcnMvSm9zaCBFL0RvY3VtZW50cy9aZXR0bHItc3dlbmc0MzEvc291cmNlL2NvbW1vbi9tb2R1bGVzL21hcmtkb3duLWVkaXRvci9wYXJzZXIvaGlnaGxpZ2h0LXBhcnNlci50cyIsInNvdXJjZXMiOlsiQzovVXNlcnMvSm9zaCBFL0RvY3VtZW50cy9aZXR0bHItc3dlbmc0MzEvc291cmNlL2NvbW1vbi9tb2R1bGVzL21hcmtkb3duLWVkaXRvci9wYXJzZXIvaGlnaGxpZ2h0LXBhcnNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7OztHQVlHOzs7QUFJSCxNQUFNLGFBQWEsR0FBa0I7SUFDbkMsT0FBTyxFQUFFLGtCQUFrQjtJQUMzQixJQUFJLEVBQUUsZUFBZSxDQUFDLDJFQUEyRTtDQUNsRyxDQUFBO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsU0FBUyxzQkFBc0IsQ0FBRSxDQUFTO0lBQ3hDLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDbkMsOEVBQThFO0lBQzlFLDRFQUE0RTtJQUM1RSw2QkFBNkI7SUFDN0IsT0FBTyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDeEMsQ0FBQztBQUVZLFFBQUEsZUFBZSxHQUFpQjtJQUMzQyxJQUFJLEVBQUUsWUFBWTtJQUNsQixLQUFLLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQ3hCLHdEQUF3RDtRQUN4RCxJQUFJLElBQUksS0FBSyxFQUFFLENBQUMsT0FBTyxJQUFJLElBQUksS0FBSyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDL0MsT0FBTyxDQUFDLENBQUMsQ0FBQTtRQUNYLENBQUM7UUFFRCxzREFBc0Q7UUFDdEQsSUFBSSxHQUFHLEtBQUssR0FBRyxDQUFDLEdBQUcsSUFBSSxJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUNsRCxPQUFPLENBQUMsQ0FBQyxDQUFBO1FBQ1gsQ0FBQztRQUVELDRFQUE0RTtRQUM1RSwwRUFBMEU7UUFDMUUsMEVBQTBFO1FBQzFFLDBFQUEwRTtRQUMxRSx5RUFBeUU7UUFDekUsMkVBQTJFO1FBQzNFLHlFQUF5RTtRQUN6RSxnQkFBZ0I7UUFDaEIsTUFBTSxHQUFHLEdBQUcsR0FBRyxLQUFLLEdBQUcsQ0FBQyxNQUFNLENBQUE7UUFDOUIsTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFBO1FBQy9CLE1BQU0sV0FBVyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxJQUFJLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUMxRixNQUFNLFVBQVUsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLElBQUksc0JBQXNCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBRTFGLE1BQU0sU0FBUyxHQUFHLFdBQVcsSUFBSSxDQUFDLFVBQVUsQ0FBQTtRQUM1QyxNQUFNLFNBQVMsR0FBRyxVQUFVLENBQUE7UUFFNUIsT0FBTyxHQUFHLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxHQUFHLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUE7SUFDNUUsQ0FBQztDQUNGLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGlnbm9yZVxyXG4gKiBCRUdJTiBIRUFERVJcclxuICpcclxuICogQ29udGFpbnM6ICAgICAgICBDaXRhdGlvbiBQYXJzZXJcclxuICogQ1ZNLVJvbGU6ICAgICAgICBJbmxpbmVQYXJzZXJcclxuICogTWFpbnRhaW5lcjogICAgICBIZW5kcmlrIEVyelxyXG4gKiBMaWNlbnNlOiAgICAgICAgIEdOVSBHUEwgdjNcclxuICpcclxuICogRGVzY3JpcHRpb246ICAgICBUaGlzIGlubGluZSBwYXJzZXIgYWRkcyBoaWdobGlnaHQgZWxlbWVudHMgdG8gdGhlIHRyZWVcclxuICpcclxuICogRU5EIEhFQURFUlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IHR5cGUgSW5saW5lUGFyc2VyLCB0eXBlIERlbGltaXRlclR5cGUgfSBmcm9tICdAbGV6ZXIvbWFya2Rvd24nXHJcblxyXG5jb25zdCBNYXJrRGVsaW1pdGVyOiBEZWxpbWl0ZXJUeXBlID0ge1xyXG4gIHJlc29sdmU6ICdIaWdobGlnaHRDb250ZW50JyxcclxuICBtYXJrOiAnSGlnaGxpZ2h0TWFyaycgLy8gTm8gc3BlY2lmaWMgc3ludGF4IG5vZGUgKGZvciBub3cgZHVlIHRvIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHJlYXNvbnMpXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBwcm92aWRlZCBjaGFyIGlzIGFsbG93ZWQgdG8gc3Vycm91bmQgaGlnaGxpZ2h0aW5nIG1hcmtzXHJcbiAqXHJcbiAqIEBwYXJhbSAgIHtudW1iZXJ9ICAgYyAgVGhlIGNoYXIgY29kZVxyXG4gKlxyXG4gKiBAcmV0dXJuICB7Ym9vbGVhbn0gICAgIFdoZXRoZXIgaXQncyBhbGxvd2VkIGJlZm9yZS9hZnRlciBhIGhpZ2hsaWdodCBtYXJrXHJcbiAqL1xyXG5mdW5jdGlvbiBhbGxvd2VkU3Vycm91bmRpbmdDaGFyIChjOiBudW1iZXIpOiBib29sZWFuIHtcclxuICBjb25zdCBjaGFyID0gU3RyaW5nLmZyb21DaGFyQ29kZShjKVxyXG4gIC8vIFJlZ2V4IG1hdGNoZXMgd2hpdGVzcGFjZSAoWiksIG5vbi13b3JkLWNoYXJhY3RlcnMgKG1hdGgsIGN1cnJlbnRjeTsgUyksIGFuZFxyXG4gIC8vIGdlbmVyYWwgcHVuY3R1YXRpb24gY2hhcmFjdGVycy4gTk9URTogUGFydGlhbGx5IFwic3RvbGVuXCIgYW5kIGFkYXB0ZWQgZnJvbVxyXG4gIC8vIHRoZSBMZXplciBNYXJrZG93biBwYXJzZXIuXHJcbiAgcmV0dXJuIC9cXHB7Wn18XFxwe1N9fFxccHtQfS91LnRlc3QoY2hhcilcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGhpZ2hsaWdodFBhcnNlcjogSW5saW5lUGFyc2VyID0ge1xyXG4gIG5hbWU6ICdoaWdobGlnaHRzJyxcclxuICBwYXJzZTogKGN0eCwgbmV4dCwgcG9zKSA9PiB7XHJcbiAgICAvLyBUaGUgbmV4dCBjaGFyIG11c3QgYmUgZWl0aGVyIGEgY29sb24gb3IgYW4gZXF1YWwgc2lnblxyXG4gICAgaWYgKG5leHQgIT09IDU4IC8qIDogKi8gJiYgbmV4dCAhPT0gNjEgLyogPSAqLykge1xyXG4gICAgICByZXR1cm4gLTFcclxuICAgIH1cclxuXHJcbiAgICAvLyBUaGUgb25lIGZvbGxvd2luZyBgbmV4dGAgbXVzdCBiZSB0aGUgc2FtZSBjaGFyYWN0ZXJcclxuICAgIGlmIChwb3MgPT09IGN0eC5lbmQgfHwgbmV4dCAhPT0gY3R4LmNoYXIocG9zICsgMSkpIHtcclxuICAgICAgcmV0dXJuIC0xXHJcbiAgICB9XHJcblxyXG4gICAgLy8gQSBoaWdobGlnaHQgbWFya2VyIGlzIGNvbnNpZGVyZWQgb3BlbmluZyBpZiBpdCBpcyBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZVxyXG4gICAgLy8gbGluZSAoYm9sKSBvciBpcyBwcmVjZWRlZCBieSB3aGl0ZXNwYWNlIG9yIGFueSBwdW5jdHVhdGlvbiBvciBnZW5lcmFsbHlcclxuICAgIC8vIG5vbi13b3JkIGNoYXJhY3RlcnMuIEZ1cnRoZXJtb3JlLCBpdCBtdXN0IG5vdCBiZSBmb2xsb3dlZCBieSB3aGl0ZXNwYWNlXHJcbiAgICAvLyAob3IgcHVuY3R1YXRpb24vY2VydGFpbiBjaGFycykgYW5kIG5vdCBiZSBhdCB0aGUgZW5kIG9mIHRoZSBsaW5lIChlb2wpLlxyXG4gICAgLy8gRm9yIGEgaGlnaGxpZ2h0IG1hcmtlciB0byBiZSBjb25zaWRlcmVkIGNsb3NpbmcsIGl0IG5lZWRzIHRoZSBvcHBvc2l0ZVxyXG4gICAgLy8gcmVxdWlyZW1lbnRzLiBUaGlzIGlzIHdoeSB3ZSBuZWVkIGJvdGggY2hlY2tzIChiZWNhdXNlIG90aGVyd2lzZSBjbG9zaW5nXHJcbiAgICAvLyB0YWdzIHdvdWxkIGFsbG93IHByZWNlZGluZyB3aGl0ZXNwYWNlIHdoaWNoIHdvdWxkIHByb21wdCBQYW5kb2Mgbm90IHRvXHJcbiAgICAvLyByZW5kZXIgdGhlbSkuXHJcbiAgICBjb25zdCBib2wgPSBwb3MgPT09IGN0eC5vZmZzZXRcclxuICAgIGNvbnN0IGVvbCA9IHBvcyArIDIgPT09IGN0eC5lbmRcclxuICAgIGNvbnN0IHZhbGlkQmVmb3JlID0gYm9sIHx8IChwb3MgPiBjdHgub2Zmc2V0ICYmIGFsbG93ZWRTdXJyb3VuZGluZ0NoYXIoY3R4LmNoYXIocG9zIC0gMSkpKVxyXG4gICAgY29uc3QgdmFsaWRBZnRlciA9IGVvbCB8fCAocG9zICsgMSA8IGN0eC5lbmQgJiYgYWxsb3dlZFN1cnJvdW5kaW5nQ2hhcihjdHguY2hhcihwb3MgKyAyKSkpXHJcblxyXG4gICAgY29uc3QgaXNPcGVuaW5nID0gdmFsaWRCZWZvcmUgJiYgIXZhbGlkQWZ0ZXJcclxuICAgIGNvbnN0IGlzQ2xvc2luZyA9IHZhbGlkQWZ0ZXJcclxuXHJcbiAgICByZXR1cm4gY3R4LmFkZERlbGltaXRlcihNYXJrRGVsaW1pdGVyLCBwb3MsIHBvcyArIDIsIGlzT3BlbmluZywgaXNDbG9zaW5nKVxyXG4gIH1cclxufVxyXG4iXX0="]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"8493cc0be275ea80a2107ecccd44ee2438cd59aa","contentHash":"0e1e60b3908683b52b81860d80caae99389d52fc2083504f7a136363e56bf189"},"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-editor\\parser\\zkn-tag-parser.ts":{"path":"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-editor\\parser\\zkn-tag-parser.ts","statementMap":{"0":{"start":{"line":15,"column":0},"end":{"line":15,"column":62}},"1":{"start":{"line":16,"column":0},"end":{"line":16,"column":30}},"2":{"start":{"line":18,"column":27},"end":{"line":18,"column":48}},"3":{"start":{"line":19,"column":14},"end":{"line":19,"column":71}},"4":{"start":{"line":20,"column":0},"end":{"line":44,"column":2}},"5":{"start":{"line":23,"column":8},"end":{"line":25,"column":9}},"6":{"start":{"line":24,"column":12},"end":{"line":24,"column":22}},"7":{"start":{"line":27,"column":8},"end":{"line":29,"column":9}},"8":{"start":{"line":28,"column":12},"end":{"line":28,"column":22}},"9":{"start":{"line":30,"column":30},"end":{"line":30,"column":46}},"10":{"start":{"line":31,"column":27},"end":{"line":31,"column":56}},"11":{"start":{"line":32,"column":22},"end":{"line":32,"column":44}},"12":{"start":{"line":33,"column":8},"end":{"line":35,"column":9}},"13":{"start":{"line":34,"column":12},"end":{"line":34,"column":22}},"14":{"start":{"line":36,"column":20},"end":{"line":36,"column":41}},"15":{"start":{"line":40,"column":24},"end":{"line":40,"column":58}},"16":{"start":{"line":41,"column":20},"end":{"line":41,"column":58}},"17":{"start":{"line":42,"column":8},"end":{"line":42,"column":35}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":22,"column":11},"end":{"line":22,"column":12}},"loc":{"start":{"line":22,"column":31},"end":{"line":43,"column":5}},"line":22}},"branchMap":{"0":{"loc":{"start":{"line":23,"column":8},"end":{"line":25,"column":9}},"type":"if","locations":[{"start":{"line":23,"column":8},"end":{"line":25,"column":9}},{"start":{},"end":{}}],"line":23},"1":{"loc":{"start":{"line":27,"column":8},"end":{"line":29,"column":9}},"type":"if","locations":[{"start":{"line":27,"column":8},"end":{"line":29,"column":9}},{"start":{},"end":{}}],"line":27},"2":{"loc":{"start":{"line":27,"column":12},"end":{"line":27,"column":85}},"type":"binary-expr","locations":[{"start":{"line":27,"column":12},"end":{"line":27,"column":28}},{"start":{"line":27,"column":32},"end":{"line":27,"column":85}}],"line":27},"3":{"loc":{"start":{"line":33,"column":8},"end":{"line":35,"column":9}},"type":"if","locations":[{"start":{"line":33,"column":8},"end":{"line":35,"column":9}},{"start":{},"end":{}}],"line":33}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"f":{"0":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-editor/parser/zkn-tag-parser.ts","sources":["C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-editor/parser/zkn-tag-parser.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb;;;;;;;;;;;;GAYG;AACH,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9D,OAAO,CAAC,YAAY,GAAG,KAAK,CAAC,CAAC;AAC9B,oEAAoE;AACpE,MAAM,kBAAkB,GAAG,WAAW,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;AACjD,MAAM,KAAK,GAAG,yDAAyD,CAAC;AACxE,OAAO,CAAC,YAAY,GAAG;IACnB,IAAI,EAAE,UAAU;IAChB,KAAK,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE;QACtB,IAAI,IAAI,KAAK,EAAE,EAAE,CAAC,CAAC,IAAI;YACnB,OAAO,CAAC,CAAC,CAAC;QACd,CAAC;QACD,6BAA6B;QAC7B,IAAI,GAAG,GAAG,GAAG,CAAC,MAAM,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC;YAC5E,OAAO,CAAC,CAAC,CAAC;QACd,CAAC;QACD,MAAM,aAAa,GAAG,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC;QACvC,MAAM,UAAU,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QACjD,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACrC,IAAI,KAAK,KAAK,IAAI,EAAE,CAAC;YACjB,OAAO,CAAC,CAAC,CAAC;QACd,CAAC;QACD,MAAM,GAAG,GAAG,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;QAClC,2EAA2E;QAC3E,wDAAwD;QACxD,qDAAqD;QACrD,MAAM,OAAO,GAAG,GAAG,CAAC,GAAG,CAAC,eAAe,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QACnD,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;QACnD,OAAO,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;IAC/B,CAAC;CACJ,CAAC","sourcesContent":["\"use strict\";\n/**\n * @ignore\n * BEGIN HEADER\n *\n * Contains:        Zettelkasten Tag Parser\n * CVM-Role:        InlineParser\n * Maintainer:      Hendrik Erz\n * License:         GNU GPL v3\n *\n * Description:     A small parser that adds Zettelkasten tags to the tree.\n *\n * END HEADER\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.zknTagParser = void 0;\n// Any character allowed before a tag (the first are space and nbsp)\nconst allowedCharsBefore = '  \\t\\n({['.split('');\nconst tagRE = /^##?[^\\s,.:;…!?\"'`»«“”‘’—–@$%&*#^+~÷\\\\/|<=>[\\](){}]+#?/u;\nexports.zknTagParser = {\n    name: 'zkn-tags',\n    parse: (ctx, next, pos) => {\n        if (next !== 35) { // #\n            return -1;\n        }\n        // Check the character before\n        if (pos > ctx.offset && !allowedCharsBefore.includes(ctx.slice(pos - 1, pos))) {\n            return -1;\n        }\n        const currentOffset = pos - ctx.offset;\n        const restOfLine = ctx.text.slice(currentOffset);\n        const match = tagRE.exec(restOfLine);\n        if (match === null) {\n            return -1;\n        }\n        const end = pos + match[0].length;\n        // NOTE: Apparently syntax themes only style leaf nodes, not containers, so\n        // we'll wrap the whole tag into a single ZknTagContent.\n        // const markElem = ctx.elt('CodeMark', pos, pos + 1)\n        const content = ctx.elt('ZknTagContent', pos, end);\n        const tag = ctx.elt('ZknTag', pos, end, [content]);\n        return ctx.addElement(tag);\n    }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzovVXNlcnMvSm9zaCBFL0RvY3VtZW50cy9aZXR0bHItc3dlbmc0MzEvc291cmNlL2NvbW1vbi9tb2R1bGVzL21hcmtkb3duLWVkaXRvci9wYXJzZXIvemtuLXRhZy1wYXJzZXIudHMiLCJzb3VyY2VzIjpbIkM6L1VzZXJzL0pvc2ggRS9Eb2N1bWVudHMvWmV0dGxyLXN3ZW5nNDMxL3NvdXJjZS9jb21tb24vbW9kdWxlcy9tYXJrZG93bi1lZGl0b3IvcGFyc2VyL3prbi10YWctcGFyc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7O0dBWUc7OztBQUlILG9FQUFvRTtBQUNwRSxNQUFNLGtCQUFrQixHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUE7QUFDaEQsTUFBTSxLQUFLLEdBQUcseURBQXlELENBQUE7QUFFMUQsUUFBQSxZQUFZLEdBQWlCO0lBQ3hDLElBQUksRUFBRSxVQUFVO0lBQ2hCLEtBQUssRUFBRSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDeEIsSUFBSSxJQUFJLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJO1lBQ3JCLE9BQU8sQ0FBQyxDQUFDLENBQUE7UUFDWCxDQUFDO1FBRUQsNkJBQTZCO1FBQzdCLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUM5RSxPQUFPLENBQUMsQ0FBQyxDQUFBO1FBQ1gsQ0FBQztRQUVELE1BQU0sYUFBYSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFBO1FBQ3RDLE1BQU0sVUFBVSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFBO1FBRWhELE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDcEMsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFLENBQUM7WUFDbkIsT0FBTyxDQUFDLENBQUMsQ0FBQTtRQUNYLENBQUM7UUFFRCxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQTtRQUNqQywyRUFBMkU7UUFDM0Usd0RBQXdEO1FBQ3hELHFEQUFxRDtRQUNyRCxNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFDbEQsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUE7UUFDbEQsT0FBTyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQzVCLENBQUM7Q0FDRixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBpZ25vcmVcclxuICogQkVHSU4gSEVBREVSXHJcbiAqXHJcbiAqIENvbnRhaW5zOiAgICAgICAgWmV0dGVsa2FzdGVuIFRhZyBQYXJzZXJcclxuICogQ1ZNLVJvbGU6ICAgICAgICBJbmxpbmVQYXJzZXJcclxuICogTWFpbnRhaW5lcjogICAgICBIZW5kcmlrIEVyelxyXG4gKiBMaWNlbnNlOiAgICAgICAgIEdOVSBHUEwgdjNcclxuICpcclxuICogRGVzY3JpcHRpb246ICAgICBBIHNtYWxsIHBhcnNlciB0aGF0IGFkZHMgWmV0dGVsa2FzdGVuIHRhZ3MgdG8gdGhlIHRyZWUuXHJcbiAqXHJcbiAqIEVORCBIRUFERVJcclxuICovXHJcblxyXG5pbXBvcnQgeyB0eXBlIElubGluZVBhcnNlciB9IGZyb20gJ0BsZXplci9tYXJrZG93bidcclxuXHJcbi8vIEFueSBjaGFyYWN0ZXIgYWxsb3dlZCBiZWZvcmUgYSB0YWcgKHRoZSBmaXJzdCBhcmUgc3BhY2UgYW5kIG5ic3ApXHJcbmNvbnN0IGFsbG93ZWRDaGFyc0JlZm9yZSA9ICcgwqBcXHRcXG4oe1snLnNwbGl0KCcnKVxyXG5jb25zdCB0YWdSRSA9IC9eIyM/W15cXHMsLjo74oCmIT9cIidgwrvCq+KAnOKAneKAmOKAmeKAlOKAk0AkJSYqI14rfsO3XFxcXC98PD0+W1xcXSgpe31dKyM/L3VcclxuXHJcbmV4cG9ydCBjb25zdCB6a25UYWdQYXJzZXI6IElubGluZVBhcnNlciA9IHtcclxuICBuYW1lOiAnemtuLXRhZ3MnLFxyXG4gIHBhcnNlOiAoY3R4LCBuZXh0LCBwb3MpID0+IHtcclxuICAgIGlmIChuZXh0ICE9PSAzNSkgeyAvLyAjXHJcbiAgICAgIHJldHVybiAtMVxyXG4gICAgfVxyXG5cclxuICAgIC8vIENoZWNrIHRoZSBjaGFyYWN0ZXIgYmVmb3JlXHJcbiAgICBpZiAocG9zID4gY3R4Lm9mZnNldCAmJiAhYWxsb3dlZENoYXJzQmVmb3JlLmluY2x1ZGVzKGN0eC5zbGljZShwb3MgLSAxLCBwb3MpKSkge1xyXG4gICAgICByZXR1cm4gLTFcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjdXJyZW50T2Zmc2V0ID0gcG9zIC0gY3R4Lm9mZnNldFxyXG4gICAgY29uc3QgcmVzdE9mTGluZSA9IGN0eC50ZXh0LnNsaWNlKGN1cnJlbnRPZmZzZXQpXHJcblxyXG4gICAgY29uc3QgbWF0Y2ggPSB0YWdSRS5leGVjKHJlc3RPZkxpbmUpXHJcbiAgICBpZiAobWF0Y2ggPT09IG51bGwpIHtcclxuICAgICAgcmV0dXJuIC0xXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZW5kID0gcG9zICsgbWF0Y2hbMF0ubGVuZ3RoXHJcbiAgICAvLyBOT1RFOiBBcHBhcmVudGx5IHN5bnRheCB0aGVtZXMgb25seSBzdHlsZSBsZWFmIG5vZGVzLCBub3QgY29udGFpbmVycywgc29cclxuICAgIC8vIHdlJ2xsIHdyYXAgdGhlIHdob2xlIHRhZyBpbnRvIGEgc2luZ2xlIFprblRhZ0NvbnRlbnQuXHJcbiAgICAvLyBjb25zdCBtYXJrRWxlbSA9IGN0eC5lbHQoJ0NvZGVNYXJrJywgcG9zLCBwb3MgKyAxKVxyXG4gICAgY29uc3QgY29udGVudCA9IGN0eC5lbHQoJ1prblRhZ0NvbnRlbnQnLCBwb3MsIGVuZClcclxuICAgIGNvbnN0IHRhZyA9IGN0eC5lbHQoJ1prblRhZycsIHBvcywgZW5kLCBbY29udGVudF0pXHJcbiAgICByZXR1cm4gY3R4LmFkZEVsZW1lbnQodGFnKVxyXG4gIH1cclxufVxyXG4iXX0="]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"34b9e4a112adb37c8bdb38f1896aeb2b61aaa7aa","contentHash":"12de47a9b9a19abb14e5dc320b175d9e50b4ea2bee7145d6077b23fb9247e79c"},"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-utils\\markdown-ast\\index.ts":{"path":"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-utils\\markdown-ast\\index.ts","statementMap":{"0":{"start":{"line":35,"column":22},"end":{"line":37,"column":1}},"1":{"start":{"line":36,"column":4},"end":{"line":36,"column":62}},"2":{"start":{"line":38,"column":0},"end":{"line":38,"column":62}},"3":{"start":{"line":39,"column":0},"end":{"line":39,"column":30}},"4":{"start":{"line":40,"column":28},"end":{"line":40,"column":86}},"5":{"start":{"line":41,"column":27},"end":{"line":41,"column":56}},"6":{"start":{"line":42,"column":37},"end":{"line":42,"column":76}},"7":{"start":{"line":43,"column":28},"end":{"line":43,"column":58}},"8":{"start":{"line":44,"column":25},"end":{"line":44,"column":52}},"9":{"start":{"line":57,"column":4},"end":{"line":422,"column":5}},"10":{"start":{"line":62,"column":24},"end":{"line":62,"column":50}},"11":{"start":{"line":63,"column":24},"end":{"line":63,"column":44}},"12":{"start":{"line":64,"column":12},"end":{"line":73,"column":13}},"13":{"start":{"line":65,"column":16},"end":{"line":72,"column":18}},"14":{"start":{"line":74,"column":28},"end":{"line":85,"column":13}},"15":{"start":{"line":86,"column":26},"end":{"line":86,"column":54}},"16":{"start":{"line":87,"column":12},"end":{"line":92,"column":13}},"17":{"start":{"line":91,"column":16},"end":{"line":91,"column":147}},"18":{"start":{"line":93,"column":12},"end":{"line":93,"column":27}},"19":{"start":{"line":96,"column":28},"end":{"line":105,"column":13}},"20":{"start":{"line":106,"column":12},"end":{"line":106,"column":27}},"21":{"start":{"line":114,"column":25},"end":{"line":114,"column":52}},"22":{"start":{"line":115,"column":26},"end":{"line":115,"column":65}},"23":{"start":{"line":116,"column":28},"end":{"line":124,"column":13}},"24":{"start":{"line":125,"column":12},"end":{"line":125,"column":27}},"25":{"start":{"line":129,"column":25},"end":{"line":129,"column":52}},"26":{"start":{"line":130,"column":26},"end":{"line":130,"column":103}},"27":{"start":{"line":131,"column":28},"end":{"line":139,"column":13}},"28":{"start":{"line":140,"column":12},"end":{"line":140,"column":27}},"29":{"start":{"line":143,"column":28},"end":{"line":151,"column":13}},"30":{"start":{"line":152,"column":12},"end":{"line":152,"column":27}},"31":{"start":{"line":155,"column":29},"end":{"line":155,"column":75}},"32":{"start":{"line":156,"column":28},"end":{"line":164,"column":13}},"33":{"start":{"line":165,"column":12},"end":{"line":165,"column":27}},"34":{"start":{"line":168,"column":26},"end":{"line":168,"column":59}},"35":{"start":{"line":169,"column":25},"end":{"line":169,"column":57}},"36":{"start":{"line":170,"column":28},"end":{"line":178,"column":13}},"37":{"start":{"line":179,"column":12},"end":{"line":184,"column":13}},"38":{"start":{"line":180,"column":16},"end":{"line":180,"column":84}},"39":{"start":{"line":183,"column":16},"end":{"line":183,"column":31}},"40":{"start":{"line":187,"column":28},"end":{"line":194,"column":13}},"41":{"start":{"line":195,"column":12},"end":{"line":195,"column":80}},"42":{"start":{"line":198,"column":28},"end":{"line":208,"column":13}},"43":{"start":{"line":209,"column":12},"end":{"line":241,"column":13}},"44":{"start":{"line":210,"column":33},"end":{"line":218,"column":17}},"45":{"start":{"line":219,"column":33},"end":{"line":219,"column":58}},"46":{"start":{"line":220,"column":16},"end":{"line":232,"column":17}},"47":{"start":{"line":221,"column":20},"end":{"line":221,"column":57}},"48":{"start":{"line":222,"column":20},"end":{"line":222,"column":53}},"49":{"start":{"line":223,"column":35},"end":{"line":223,"column":99}},"50":{"start":{"line":224,"column":34},"end":{"line":224,"column":82}},"51":{"start":{"line":225,"column":20},"end":{"line":225,"column":45}},"52":{"start":{"line":226,"column":20},"end":{"line":231,"column":21}},"53":{"start":{"line":227,"column":24},"end":{"line":227,"column":50}},"54":{"start":{"line":228,"column":24},"end":{"line":230,"column":25}},"55":{"start":{"line":229,"column":28},"end":{"line":229,"column":54}},"56":{"start":{"line":234,"column":29},"end":{"line":234,"column":50}},"57":{"start":{"line":235,"column":35},"end":{"line":235,"column":85}},"58":{"start":{"line":236,"column":16},"end":{"line":239,"column":17}},"59":{"start":{"line":237,"column":33},"end":{"line":237,"column":83}},"60":{"start":{"line":238,"column":20},"end":{"line":238,"column":54}},"61":{"start":{"line":240,"column":16},"end":{"line":240,"column":98}},"62":{"start":{"line":242,"column":12},"end":{"line":242,"column":27}},"63":{"start":{"line":245,"column":28},"end":{"line":254,"column":13}},"64":{"start":{"line":255,"column":12},"end":{"line":282,"column":13}},"65":{"start":{"line":256,"column":33},"end":{"line":264,"column":17}},"66":{"start":{"line":265,"column":33},"end":{"line":265,"column":58}},"67":{"start":{"line":266,"column":16},"end":{"line":273,"column":17}},"68":{"start":{"line":267,"column":20},"end":{"line":267,"column":57}},"69":{"start":{"line":268,"column":20},"end":{"line":268,"column":53}},"70":{"start":{"line":269,"column":35},"end":{"line":269,"column":81}},"71":{"start":{"line":270,"column":20},"end":{"line":272,"column":21}},"72":{"start":{"line":271,"column":24},"end":{"line":271,"column":48}},"73":{"start":{"line":275,"column":29},"end":{"line":275,"column":50}},"74":{"start":{"line":276,"column":35},"end":{"line":276,"column":85}},"75":{"start":{"line":277,"column":16},"end":{"line":280,"column":17}},"76":{"start":{"line":278,"column":33},"end":{"line":278,"column":83}},"77":{"start":{"line":279,"column":20},"end":{"line":279,"column":54}},"78":{"start":{"line":281,"column":16},"end":{"line":281,"column":98}},"79":{"start":{"line":283,"column":12},"end":{"line":283,"column":27}},"80":{"start":{"line":287,"column":23},"end":{"line":287,"column":48}},"81":{"start":{"line":288,"column":25},"end":{"line":288,"column":50}},"82":{"start":{"line":289,"column":12},"end":{"line":296,"column":13}},"83":{"start":{"line":290,"column":33},"end":{"line":290,"column":71}},"84":{"start":{"line":291,"column":16},"end":{"line":295,"column":17}},"85":{"start":{"line":294,"column":20},"end":{"line":294,"column":32}},"86":{"start":{"line":297,"column":27},"end":{"line":297,"column":52}},"87":{"start":{"line":298,"column":28},"end":{"line":306,"column":13}},"88":{"start":{"line":307,"column":12},"end":{"line":307,"column":27}},"89":{"start":{"line":310,"column":27},"end":{"line":310,"column":52}},"90":{"start":{"line":311,"column":28},"end":{"line":318,"column":13}},"91":{"start":{"line":319,"column":12},"end":{"line":319,"column":27}},"92":{"start":{"line":322,"column":33},"end":{"line":322,"column":61}},"93":{"start":{"line":323,"column":28},"end":{"line":330,"column":13}},"94":{"start":{"line":331,"column":12},"end":{"line":331,"column":27}},"95":{"start":{"line":335,"column":28},"end":{"line":342,"column":13}},"96":{"start":{"line":343,"column":12},"end":{"line":343,"column":27}},"97":{"start":{"line":347,"column":28},"end":{"line":355,"column":13}},"98":{"start":{"line":356,"column":12},"end":{"line":356,"column":80}},"99":{"start":{"line":359,"column":28},"end":{"line":366,"column":13}},"100":{"start":{"line":367,"column":12},"end":{"line":367,"column":80}},"101":{"start":{"line":370,"column":28},"end":{"line":377,"column":13}},"102":{"start":{"line":378,"column":12},"end":{"line":378,"column":80}},"103":{"start":{"line":382,"column":12},"end":{"line":382,"column":74}},"104":{"start":{"line":384,"column":28},"end":{"line":384,"column":59}},"105":{"start":{"line":385,"column":12},"end":{"line":387,"column":13}},"106":{"start":{"line":386,"column":16},"end":{"line":386,"column":111}},"107":{"start":{"line":388,"column":26},"end":{"line":388,"column":103}},"108":{"start":{"line":389,"column":28},"end":{"line":397,"column":13}},"109":{"start":{"line":398,"column":12},"end":{"line":398,"column":27}},"110":{"start":{"line":401,"column":28},"end":{"line":408,"column":13}},"111":{"start":{"line":409,"column":12},"end":{"line":409,"column":27}},"112":{"start":{"line":412,"column":28},"end":{"line":419,"column":13}},"113":{"start":{"line":420,"column":12},"end":{"line":420,"column":80}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":35,"column":56},"end":{"line":35,"column":57}},"loc":{"start":{"line":35,"column":71},"end":{"line":37,"column":1}},"line":35},"1":{"name":"parseNode","decl":{"start":{"line":55,"column":9},"end":{"line":55,"column":18}},"loc":{"start":{"line":55,"column":35},"end":{"line":423,"column":1}},"line":55}},"branchMap":{"0":{"loc":{"start":{"line":35,"column":22},"end":{"line":37,"column":1}},"type":"binary-expr","locations":[{"start":{"line":35,"column":23},"end":{"line":35,"column":27}},{"start":{"line":35,"column":31},"end":{"line":35,"column":51}},{"start":{"line":35,"column":56},"end":{"line":37,"column":1}}],"line":35},"1":{"loc":{"start":{"line":36,"column":11},"end":{"line":36,"column":61}},"type":"cond-expr","locations":[{"start":{"line":36,"column":37},"end":{"line":36,"column":40}},{"start":{"line":36,"column":43},"end":{"line":36,"column":61}}],"line":36},"2":{"loc":{"start":{"line":36,"column":12},"end":{"line":36,"column":33}},"type":"binary-expr","locations":[{"start":{"line":36,"column":12},"end":{"line":36,"column":15}},{"start":{"line":36,"column":19},"end":{"line":36,"column":33}}],"line":36},"3":{"loc":{"start":{"line":57,"column":4},"end":{"line":422,"column":5}},"type":"switch","locations":[{"start":{"line":60,"column":8},"end":{"line":60,"column":21}},{"start":{"line":61,"column":8},"end":{"line":94,"column":9}},{"start":{"line":95,"column":8},"end":{"line":107,"column":9}},{"start":{"line":108,"column":8},"end":{"line":108,"column":27}},{"start":{"line":109,"column":8},"end":{"line":109,"column":27}},{"start":{"line":110,"column":8},"end":{"line":110,"column":27}},{"start":{"line":111,"column":8},"end":{"line":111,"column":27}},{"start":{"line":112,"column":8},"end":{"line":112,"column":27}},{"start":{"line":113,"column":8},"end":{"line":126,"column":9}},{"start":{"line":127,"column":8},"end":{"line":127,"column":30}},{"start":{"line":128,"column":8},"end":{"line":141,"column":9}},{"start":{"line":142,"column":8},"end":{"line":153,"column":9}},{"start":{"line":154,"column":8},"end":{"line":166,"column":9}},{"start":{"line":167,"column":8},"end":{"line":185,"column":9}},{"start":{"line":186,"column":8},"end":{"line":196,"column":9}},{"start":{"line":197,"column":8},"end":{"line":243,"column":9}},{"start":{"line":244,"column":8},"end":{"line":284,"column":9}},{"start":{"line":285,"column":8},"end":{"line":285,"column":26}},{"start":{"line":286,"column":8},"end":{"line":308,"column":9}},{"start":{"line":309,"column":8},"end":{"line":320,"column":9}},{"start":{"line":321,"column":8},"end":{"line":332,"column":9}},{"start":{"line":333,"column":8},"end":{"line":333,"column":23}},{"start":{"line":334,"column":8},"end":{"line":344,"column":9}},{"start":{"line":345,"column":8},"end":{"line":345,"column":24}},{"start":{"line":346,"column":8},"end":{"line":357,"column":9}},{"start":{"line":358,"column":8},"end":{"line":368,"column":9}},{"start":{"line":369,"column":8},"end":{"line":379,"column":9}},{"start":{"line":380,"column":8},"end":{"line":382,"column":74}},{"start":{"line":383,"column":8},"end":{"line":399,"column":9}},{"start":{"line":400,"column":8},"end":{"line":410,"column":9}},{"start":{"line":411,"column":8},"end":{"line":421,"column":9}}],"line":57},"4":{"loc":{"start":{"line":64,"column":12},"end":{"line":73,"column":13}},"type":"if","locations":[{"start":{"line":64,"column":12},"end":{"line":73,"column":13}},{"start":{},"end":{}}],"line":64},"5":{"loc":{"start":{"line":82,"column":21},"end":{"line":84,"column":118}},"type":"cond-expr","locations":[{"start":{"line":83,"column":22},"end":{"line":83,"column":118}},{"start":{"line":84,"column":22},"end":{"line":84,"column":118}}],"line":82},"6":{"loc":{"start":{"line":87,"column":12},"end":{"line":92,"column":13}},"type":"if","locations":[{"start":{"line":87,"column":12},"end":{"line":92,"column":13}},{"start":{},"end":{}}],"line":87},"7":{"loc":{"start":{"line":87,"column":16},"end":{"line":87,"column":49}},"type":"binary-expr","locations":[{"start":{"line":87,"column":16},"end":{"line":87,"column":28}},{"start":{"line":87,"column":32},"end":{"line":87,"column":49}}],"line":87},"8":{"loc":{"start":{"line":115,"column":26},"end":{"line":115,"column":65}},"type":"cond-expr","locations":[{"start":{"line":115,"column":42},"end":{"line":115,"column":61}},{"start":{"line":115,"column":64},"end":{"line":115,"column":65}}],"line":115},"9":{"loc":{"start":{"line":122,"column":64},"end":{"line":122,"column":165}},"type":"cond-expr","locations":[{"start":{"line":122,"column":151},"end":{"line":122,"column":153}},{"start":{"line":122,"column":156},"end":{"line":122,"column":165}}],"line":122},"10":{"loc":{"start":{"line":122,"column":64},"end":{"line":122,"column":148}},"type":"binary-expr","locations":[{"start":{"line":122,"column":64},"end":{"line":122,"column":131}},{"start":{"line":122,"column":135},"end":{"line":122,"column":148}}],"line":122},"11":{"loc":{"start":{"line":122,"column":70},"end":{"line":122,"column":121}},"type":"cond-expr","locations":[{"start":{"line":122,"column":105},"end":{"line":122,"column":111}},{"start":{"line":122,"column":114},"end":{"line":122,"column":121}}],"line":122},"12":{"loc":{"start":{"line":122,"column":70},"end":{"line":122,"column":102}},"type":"binary-expr","locations":[{"start":{"line":122,"column":70},"end":{"line":122,"column":83}},{"start":{"line":122,"column":87},"end":{"line":122,"column":102}}],"line":122},"13":{"loc":{"start":{"line":122,"column":195},"end":{"line":122,"column":296}},"type":"cond-expr","locations":[{"start":{"line":122,"column":282},"end":{"line":122,"column":284}},{"start":{"line":122,"column":287},"end":{"line":122,"column":296}}],"line":122},"14":{"loc":{"start":{"line":122,"column":195},"end":{"line":122,"column":279}},"type":"binary-expr","locations":[{"start":{"line":122,"column":195},"end":{"line":122,"column":262}},{"start":{"line":122,"column":266},"end":{"line":122,"column":279}}],"line":122},"15":{"loc":{"start":{"line":122,"column":201},"end":{"line":122,"column":252}},"type":"cond-expr","locations":[{"start":{"line":122,"column":236},"end":{"line":122,"column":242}},{"start":{"line":122,"column":245},"end":{"line":122,"column":252}}],"line":122},"16":{"loc":{"start":{"line":122,"column":201},"end":{"line":122,"column":233}},"type":"binary-expr","locations":[{"start":{"line":122,"column":201},"end":{"line":122,"column":214}},{"start":{"line":122,"column":218},"end":{"line":122,"column":233}}],"line":122},"17":{"loc":{"start":{"line":130,"column":26},"end":{"line":130,"column":103}},"type":"cond-expr","locations":[{"start":{"line":130,"column":98},"end":{"line":130,"column":99}},{"start":{"line":130,"column":102},"end":{"line":130,"column":103}}],"line":130},"18":{"loc":{"start":{"line":130,"column":26},"end":{"line":130,"column":95}},"type":"binary-expr","locations":[{"start":{"line":130,"column":26},"end":{"line":130,"column":39}},{"start":{"line":130,"column":43},"end":{"line":130,"column":95}}],"line":130},"19":{"loc":{"start":{"line":137,"column":64},"end":{"line":137,"column":165}},"type":"cond-expr","locations":[{"start":{"line":137,"column":151},"end":{"line":137,"column":153}},{"start":{"line":137,"column":156},"end":{"line":137,"column":165}}],"line":137},"20":{"loc":{"start":{"line":137,"column":64},"end":{"line":137,"column":148}},"type":"binary-expr","locations":[{"start":{"line":137,"column":64},"end":{"line":137,"column":131}},{"start":{"line":137,"column":135},"end":{"line":137,"column":148}}],"line":137},"21":{"loc":{"start":{"line":137,"column":70},"end":{"line":137,"column":121}},"type":"cond-expr","locations":[{"start":{"line":137,"column":105},"end":{"line":137,"column":111}},{"start":{"line":137,"column":114},"end":{"line":137,"column":121}}],"line":137},"22":{"loc":{"start":{"line":137,"column":70},"end":{"line":137,"column":102}},"type":"binary-expr","locations":[{"start":{"line":137,"column":70},"end":{"line":137,"column":83}},{"start":{"line":137,"column":87},"end":{"line":137,"column":102}}],"line":137},"23":{"loc":{"start":{"line":137,"column":206},"end":{"line":137,"column":307}},"type":"cond-expr","locations":[{"start":{"line":137,"column":295},"end":{"line":137,"column":297}},{"start":{"line":137,"column":300},"end":{"line":137,"column":307}}],"line":137},"24":{"loc":{"start":{"line":137,"column":206},"end":{"line":137,"column":292}},"type":"binary-expr","locations":[{"start":{"line":137,"column":206},"end":{"line":137,"column":275}},{"start":{"line":137,"column":279},"end":{"line":137,"column":292}}],"line":137},"25":{"loc":{"start":{"line":137,"column":212},"end":{"line":137,"column":265}},"type":"cond-expr","locations":[{"start":{"line":137,"column":247},"end":{"line":137,"column":253}},{"start":{"line":137,"column":256},"end":{"line":137,"column":265}}],"line":137},"26":{"loc":{"start":{"line":137,"column":212},"end":{"line":137,"column":244}},"type":"binary-expr","locations":[{"start":{"line":137,"column":212},"end":{"line":137,"column":225}},{"start":{"line":137,"column":229},"end":{"line":137,"column":244}}],"line":137},"27":{"loc":{"start":{"line":163,"column":23},"end":{"line":163,"column":101}},"type":"cond-expr","locations":[{"start":{"line":163,"column":48},"end":{"line":163,"column":90}},{"start":{"line":163,"column":93},"end":{"line":163,"column":101}}],"line":163},"28":{"loc":{"start":{"line":176,"column":23},"end":{"line":176,"column":93}},"type":"cond-expr","locations":[{"start":{"line":176,"column":40},"end":{"line":176,"column":88}},{"start":{"line":176,"column":91},"end":{"line":176,"column":93}}],"line":176},"29":{"loc":{"start":{"line":179,"column":12},"end":{"line":184,"column":13}},"type":"if","locations":[{"start":{"line":179,"column":12},"end":{"line":184,"column":13}},{"start":{"line":182,"column":17},"end":{"line":184,"column":13}}],"line":179},"30":{"loc":{"start":{"line":220,"column":16},"end":{"line":232,"column":17}},"type":"if","locations":[{"start":{"line":220,"column":16},"end":{"line":232,"column":17}},{"start":{},"end":{}}],"line":220},"31":{"loc":{"start":{"line":226,"column":20},"end":{"line":231,"column":21}},"type":"if","locations":[{"start":{"line":226,"column":20},"end":{"line":231,"column":21}},{"start":{},"end":{}}],"line":226},"32":{"loc":{"start":{"line":228,"column":24},"end":{"line":230,"column":25}},"type":"if","locations":[{"start":{"line":228,"column":24},"end":{"line":230,"column":25}},{"start":{},"end":{}}],"line":228},"33":{"loc":{"start":{"line":228,"column":28},"end":{"line":228,"column":58}},"type":"binary-expr","locations":[{"start":{"line":228,"column":28},"end":{"line":228,"column":41}},{"start":{"line":228,"column":45},"end":{"line":228,"column":58}}],"line":228},"34":{"loc":{"start":{"line":235,"column":35},"end":{"line":235,"column":85}},"type":"cond-expr","locations":[{"start":{"line":235,"column":51},"end":{"line":235,"column":78}},{"start":{"line":235,"column":81},"end":{"line":235,"column":85}}],"line":235},"35":{"loc":{"start":{"line":236,"column":16},"end":{"line":239,"column":17}},"type":"if","locations":[{"start":{"line":236,"column":16},"end":{"line":239,"column":17}},{"start":{},"end":{}}],"line":236},"36":{"loc":{"start":{"line":266,"column":16},"end":{"line":273,"column":17}},"type":"if","locations":[{"start":{"line":266,"column":16},"end":{"line":273,"column":17}},{"start":{},"end":{}}],"line":266},"37":{"loc":{"start":{"line":270,"column":20},"end":{"line":272,"column":21}},"type":"if","locations":[{"start":{"line":270,"column":20},"end":{"line":272,"column":21}},{"start":{},"end":{}}],"line":270},"38":{"loc":{"start":{"line":270,"column":24},"end":{"line":270,"column":74}},"type":"binary-expr","locations":[{"start":{"line":270,"column":24},"end":{"line":270,"column":38}},{"start":{"line":270,"column":42},"end":{"line":270,"column":56}},{"start":{"line":270,"column":60},"end":{"line":270,"column":74}}],"line":270},"39":{"loc":{"start":{"line":276,"column":35},"end":{"line":276,"column":85}},"type":"cond-expr","locations":[{"start":{"line":276,"column":51},"end":{"line":276,"column":78}},{"start":{"line":276,"column":81},"end":{"line":276,"column":85}}],"line":276},"40":{"loc":{"start":{"line":277,"column":16},"end":{"line":280,"column":17}},"type":"if","locations":[{"start":{"line":277,"column":16},"end":{"line":280,"column":17}},{"start":{},"end":{}}],"line":277},"41":{"loc":{"start":{"line":289,"column":12},"end":{"line":296,"column":13}},"type":"if","locations":[{"start":{"line":289,"column":12},"end":{"line":296,"column":13}},{"start":{},"end":{}}],"line":289},"42":{"loc":{"start":{"line":291,"column":16},"end":{"line":295,"column":17}},"type":"if","locations":[{"start":{"line":291,"column":16},"end":{"line":295,"column":17}},{"start":{},"end":{}}],"line":291},"43":{"loc":{"start":{"line":304,"column":22},"end":{"line":304,"column":81}},"type":"cond-expr","locations":[{"start":{"line":304,"column":38},"end":{"line":304,"column":76}},{"start":{"line":304,"column":79},"end":{"line":304,"column":81}}],"line":304},"44":{"loc":{"start":{"line":305,"column":24},"end":{"line":305,"column":89}},"type":"cond-expr","locations":[{"start":{"line":305,"column":42},"end":{"line":305,"column":84}},{"start":{"line":305,"column":87},"end":{"line":305,"column":89}}],"line":305},"45":{"loc":{"start":{"line":317,"column":24},"end":{"line":317,"column":89}},"type":"cond-expr","locations":[{"start":{"line":317,"column":42},"end":{"line":317,"column":84}},{"start":{"line":317,"column":87},"end":{"line":317,"column":89}}],"line":317},"46":{"loc":{"start":{"line":350,"column":23},"end":{"line":350,"column":67}},"type":"cond-expr","locations":[{"start":{"line":350,"column":50},"end":{"line":350,"column":58}},{"start":{"line":350,"column":61},"end":{"line":350,"column":67}}],"line":350},"47":{"loc":{"start":{"line":385,"column":12},"end":{"line":387,"column":13}},"type":"if","locations":[{"start":{"line":385,"column":12},"end":{"line":387,"column":13}},{"start":{},"end":{}}],"line":385},"48":{"loc":{"start":{"line":388,"column":26},"end":{"line":388,"column":103}},"type":"cond-expr","locations":[{"start":{"line":388,"column":91},"end":{"line":388,"column":93}},{"start":{"line":388,"column":96},"end":{"line":388,"column":103}}],"line":388},"49":{"loc":{"start":{"line":388,"column":26},"end":{"line":388,"column":88}},"type":"binary-expr","locations":[{"start":{"line":388,"column":26},"end":{"line":388,"column":71}},{"start":{"line":388,"column":75},"end":{"line":388,"column":88}}],"line":388}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0},"f":{"0":1,"1":0},"b":{"0":[1,1,1],"1":[1,0],"2":[1,1],"3":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-utils/markdown-ast/index.ts","sources":["C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-utils/markdown-ast/index.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @ignore\n * BEGIN HEADER\n *\n * Contains:        parseNode\n * CVM-Role:        Utility Function\n * Maintainer:      Hendrik Erz\n * License:         GNU GPL v3\n *\n * Description:     This file contains a converter that can take in a Markdown\n *                  source string and convert it to an Abstract Syntax Tree.\n *                  This file follows the advice of Marijn Haverbeke, who\n *                  mentioned that Lezer trees are not necessarily \"abstract\"\n *                  and hence need to be converted prior to utilizing the tree:\n *\n *                  \"These trees, represented by data structures from the\n *                  @lezer/common package, are more limited than the abstract\n *                  syntax trees you might have seen in other contexts. They are\n *                  not very abstract.\"\n *                  (from: https://lezer.codemirror.net/docs/guide/)\n *\n *                  The utility function runs the Markdown parser as defined for\n *                  the main editor to ensure that every element that the user\n *                  can see in the editor will also end up represented here. The\n *                  syntax tree is primarily used in two different instances\n *                  across the app:\n *\n *                  1. To extract only the text nodes (Readability Mode & spell\n *                     checking)\n *                  2. To \"copy as HTML\" (see markdown-to-html)\n *\n * END HEADER\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseNode = parseNode;\nconst extract_citations_1 = __importDefault(require(\"@common/util/extract-citations\"));\nconst parse_table_node_1 = require(\"./parse-table-node\");\nconst get_whitespace_before_node_1 = require(\"./get-whitespace-before-node\");\nconst generic_text_node_1 = require(\"./generic-text-node\");\nconst parse_children_1 = require(\"./parse-children\");\n/**\n * Parses a single Lezer style SyntaxNode to an ASTNode.\n *\n * @param   {SyntaxNode}  node      The node to convert\n * @param   {string}      markdown  The Markdown source, required to extract the\n *                                  actual text content of the SyntaxNodes,\n *                                  which isn't stored in the nodes themselves.\n *\n * @return  {ASTNode}               The root node of a Markdown AST\n */\nfunction parseNode(node, markdown) {\n    var _a, _b, _c, _d, _e;\n    switch (node.name) {\n        // NOTE: Most nodes are treated as generics (see default case); here we only\n        // define nodes which we can \"compress\" a little bit or make accessible\n        case 'Image':\n        case 'Link': {\n            const alt = node.getChild('LinkLabel');\n            const url = node.getChild('URL');\n            if (url === null) {\n                return {\n                    type: 'Generic',\n                    name: node.name,\n                    from: node.from,\n                    to: node.to,\n                    whitespaceBefore: (0, get_whitespace_before_node_1.getWhitespaceBeforeNode)(node, markdown),\n                    children: [(0, generic_text_node_1.genericTextNode)(node.from, node.to, markdown.substring(node.from, node.to))]\n                };\n            }\n            const astNode = {\n                type: node.name,\n                name: node.name,\n                from: node.from,\n                to: node.to,\n                whitespaceBefore: (0, get_whitespace_before_node_1.getWhitespaceBeforeNode)(node, markdown),\n                // title: genericTextNode(node.from, node.to, markdown.substring(node.from, node.to)), TODO\n                url: markdown.substring(url.from, url.to),\n                alt: alt !== null\n                    ? (0, generic_text_node_1.genericTextNode)(alt.from, alt.to, markdown.substring(alt.from, alt.to))\n                    : (0, generic_text_node_1.genericTextNode)(url.from, url.to, markdown.substring(url.from, url.to))\n            };\n            const marks = node.getChildren('LinkMark');\n            if (alt === null && marks.length >= 2) {\n                // The default Markdown parser doesn't apply \"LinkLabel\" unfortunately.\n                // So instead we have to get whatever is in between the first and second\n                // linkMark.\n                astNode.alt = (0, generic_text_node_1.genericTextNode)(marks[0].to, marks[1].from, markdown.substring(marks[0].to, marks[1].from));\n            } // Else: Somewhat malformed link.\n            return astNode;\n        }\n        case 'URL': {\n            const astNode = {\n                type: 'Link',\n                name: node.name,\n                from: node.from,\n                to: node.to,\n                whitespaceBefore: (0, get_whitespace_before_node_1.getWhitespaceBeforeNode)(node, markdown),\n                // title: genericTextNode(node.from, node.to, markdown.substring(node.from, node.to)), TODO\n                url: markdown.substring(node.from, node.to),\n                alt: (0, generic_text_node_1.genericTextNode)(node.from, node.to, markdown.substring(node.from, node.to))\n            };\n            return astNode;\n        }\n        case 'ATXHeading1':\n        case 'ATXHeading2':\n        case 'ATXHeading3':\n        case 'ATXHeading4':\n        case 'ATXHeading5':\n        case 'ATXHeading6': {\n            const mark = node.getChild('HeaderMark');\n            const level = mark !== null ? mark.to - mark.from : 0;\n            const astNode = {\n                type: 'Heading',\n                name: node.name,\n                from: node.from,\n                to: node.to,\n                whitespaceBefore: (0, get_whitespace_before_node_1.getWhitespaceBeforeNode)(node, markdown),\n                value: (0, generic_text_node_1.genericTextNode)((_a = mark === null || mark === void 0 ? void 0 : mark.to) !== null && _a !== void 0 ? _a : node.from, node.to, markdown.substring((_b = mark === null || mark === void 0 ? void 0 : mark.to) !== null && _b !== void 0 ? _b : node.from, node.to).trim()),\n                level\n            };\n            return astNode;\n        }\n        case 'SetextHeading1':\n        case 'SetextHeading2': {\n            const mark = node.getChild('HeaderMark');\n            const level = mark !== null && markdown.substring(mark.from, mark.to).includes('-') ? 2 : 1;\n            const astNode = {\n                type: 'Heading',\n                name: node.name,\n                from: node.from,\n                to: node.to,\n                whitespaceBefore: (0, get_whitespace_before_node_1.getWhitespaceBeforeNode)(node, markdown),\n                value: (0, generic_text_node_1.genericTextNode)((_c = mark === null || mark === void 0 ? void 0 : mark.to) !== null && _c !== void 0 ? _c : node.from, node.to, markdown.substring(node.from, (_d = mark === null || mark === void 0 ? void 0 : mark.from) !== null && _d !== void 0 ? _d : node.to).trim()),\n                level\n            };\n            return astNode;\n        }\n        case 'Citation': {\n            const astNode = {\n                name: 'Citation',\n                type: 'Citation',\n                value: markdown.substring(node.from, node.to),\n                parsedCitation: (0, extract_citations_1.default)(markdown.substring(node.from, node.to))[0],\n                from: node.from,\n                to: node.to,\n                whitespaceBefore: (0, get_whitespace_before_node_1.getWhitespaceBeforeNode)(node, markdown)\n            };\n            return astNode;\n        }\n        case 'Footnote': {\n            const contents = markdown.substring(node.from + 2, node.to - 1); // [^1] --> 1\n            const astNode = {\n                type: 'Footnote',\n                name: 'Footnote',\n                from: node.from,\n                inline: contents.endsWith('^'),\n                to: node.to,\n                whitespaceBefore: (0, get_whitespace_before_node_1.getWhitespaceBeforeNode)(node, markdown),\n                label: contents.endsWith('^') ? contents.substring(0, contents.length - 1) : contents\n            };\n            return astNode;\n        }\n        case 'FootnoteRef': {\n            const label = node.getChild('FootnoteRefLabel');\n            const body = node.getChild('FootnoteRefBody');\n            const astNode = {\n                type: 'FootnoteRef',\n                name: 'FootnoteRef',\n                from: node.from,\n                to: node.to,\n                whitespaceBefore: (0, get_whitespace_before_node_1.getWhitespaceBeforeNode)(node, markdown),\n                label: label !== null ? markdown.substring(label.from + 2, label.to - 2) : '',\n                children: []\n            };\n            if (body !== null) {\n                return (0, parse_children_1.parseChildren)(astNode, body, markdown);\n            }\n            else {\n                return astNode;\n            }\n        }\n        case 'HighlightContent': {\n            const astNode = {\n                type: 'Highlight',\n                name: 'Highlight',\n                from: node.from,\n                to: node.to,\n                whitespaceBefore: (0, get_whitespace_before_node_1.getWhitespaceBeforeNode)(node, markdown),\n                children: []\n            };\n            return (0, parse_children_1.parseChildren)(astNode, node, markdown);\n        }\n        case 'OrderedList': {\n            const astNode = {\n                type: 'OrderedList',\n                startsAt: 0,\n                delimiter: '.',\n                loose: false, // TODO\n                name: node.name,\n                from: node.from,\n                to: node.to,\n                whitespaceBefore: (0, get_whitespace_before_node_1.getWhitespaceBeforeNode)(node, markdown),\n                items: []\n            };\n            for (const item of node.getChildren('ListItem')) {\n                const listItem = {\n                    type: 'ListItem',\n                    name: 'ListItem',\n                    from: item.from,\n                    to: item.to,\n                    whitespaceBefore: (0, get_whitespace_before_node_1.getWhitespaceBeforeNode)(node, markdown),\n                    children: [],\n                    marker: { from: item.from, to: item.from }\n                };\n                const listMark = item.getChild('ListMark');\n                if (listMark !== null) {\n                    listItem.marker.from = listMark.from;\n                    listItem.marker.to = listMark.to;\n                    const number = parseInt(markdown.substring(listMark.from, listMark.to - 1), 10);\n                    const delim = markdown.substring(listMark.to - 1, listMark.to);\n                    listItem.number = number;\n                    if (astNode.startsAt < 1) {\n                        astNode.startsAt = number;\n                        if (delim === ')' || delim === '.') {\n                            astNode.delimiter = delim;\n                        }\n                    }\n                }\n                // Identify potential task item\n                const task = item.getChild('Task');\n                const taskMarker = task !== null ? task.getChild('TaskMarker') : null;\n                if (taskMarker !== null) {\n                    const text = markdown.substring(taskMarker.from, taskMarker.to);\n                    listItem.checked = text === '[x]';\n                }\n                astNode.items.push((0, parse_children_1.parseChildren)(listItem, item, markdown));\n            }\n            return astNode;\n        }\n        case 'BulletList': {\n            const astNode = {\n                type: 'BulletList',\n                symbol: '-',\n                loose: false, // TODO\n                name: node.name,\n                from: node.from,\n                to: node.to,\n                whitespaceBefore: (0, get_whitespace_before_node_1.getWhitespaceBeforeNode)(node, markdown),\n                items: []\n            };\n            for (const item of node.getChildren('ListItem')) {\n                const listItem = {\n                    type: 'ListItem',\n                    name: 'ListItem',\n                    from: item.from,\n                    to: item.to,\n                    whitespaceBefore: (0, get_whitespace_before_node_1.getWhitespaceBeforeNode)(node, markdown),\n                    children: [],\n                    marker: { from: item.from, to: item.from }\n                };\n                const listMark = item.getChild('ListMark');\n                if (listMark !== null) {\n                    listItem.marker.from = listMark.from;\n                    listItem.marker.to = listMark.to;\n                    const symbol = markdown.substring(listMark.from, listMark.to);\n                    if (symbol === '-' || symbol === '+' || symbol === '*') {\n                        astNode.symbol = symbol;\n                    }\n                }\n                // Identify potential task item\n                const task = item.getChild('Task');\n                const taskMarker = task !== null ? task.getChild('TaskMarker') : null;\n                if (taskMarker !== null) {\n                    const text = markdown.substring(taskMarker.from, taskMarker.to);\n                    listItem.checked = text === '[x]';\n                }\n                astNode.items.push((0, parse_children_1.parseChildren)(listItem, item, markdown));\n            }\n            return astNode;\n        }\n        case 'FencedCode':\n        case 'CodeBlock': {\n            let info = node.getChild('CodeInfo');\n            const mark = node.getChild('CodeMark');\n            if (mark !== null) {\n                const codeMark = markdown.substring(mark.from, mark.to);\n                if (codeMark === '$$') {\n                    // Exchange the (nonexistent) infostring with the double-dollars so\n                    // that consumers can detect that this is MathTex\n                    info = mark;\n                }\n            }\n            const source = node.getChild('CodeText');\n            const astNode = {\n                type: 'FencedCode',\n                name: 'FencedCode',\n                from: node.from,\n                to: node.to,\n                whitespaceBefore: (0, get_whitespace_before_node_1.getWhitespaceBeforeNode)(node, markdown),\n                info: info !== null ? markdown.substring(info.from, info.to) : '',\n                source: source !== null ? markdown.substring(source.from, source.to) : ''\n            };\n            return astNode;\n        }\n        case 'YAMLFrontmatter': {\n            const source = node.getChild('CodeText');\n            const astNode = {\n                type: 'YAMLFrontmatter',\n                name: 'YAMLFrontmatter',\n                from: node.from,\n                to: node.to,\n                whitespaceBefore: (0, get_whitespace_before_node_1.getWhitespaceBeforeNode)(node, markdown),\n                source: source !== null ? markdown.substring(source.from, source.to) : ''\n            };\n            return astNode;\n        }\n        case 'InlineCode': {\n            const [start, end] = node.getChildren('CodeMark');\n            const astNode = {\n                type: 'InlineCode',\n                name: 'InlineCode',\n                from: node.from,\n                to: node.to,\n                whitespaceBefore: (0, get_whitespace_before_node_1.getWhitespaceBeforeNode)(node, markdown),\n                source: markdown.substring(start.to, end.from)\n            };\n            return astNode;\n        }\n        case 'Comment':\n        case 'CommentBlock': {\n            const astNode = {\n                type: 'Comment',\n                name: node.name,\n                from: node.from,\n                to: node.to,\n                whitespaceBefore: (0, get_whitespace_before_node_1.getWhitespaceBeforeNode)(node, markdown),\n                value: markdown.slice(node.from + 4, node.to - 3).trim() // <!-- and -->\n            };\n            return astNode;\n        }\n        case 'Emphasis':\n        case 'StrongEmphasis': {\n            const astNode = {\n                type: 'Emphasis',\n                name: 'Emphasis',\n                which: node.name === 'Emphasis' ? 'italic' : 'bold',\n                from: node.from,\n                to: node.to,\n                whitespaceBefore: (0, get_whitespace_before_node_1.getWhitespaceBeforeNode)(node, markdown),\n                children: []\n            };\n            return (0, parse_children_1.parseChildren)(astNode, node, markdown);\n        }\n        case 'Superscript': {\n            const astNode = {\n                type: 'Superscript',\n                name: 'Superscript',\n                from: node.from,\n                to: node.to,\n                whitespaceBefore: (0, get_whitespace_before_node_1.getWhitespaceBeforeNode)(node, markdown),\n                children: []\n            };\n            return (0, parse_children_1.parseChildren)(astNode, node, markdown);\n        }\n        case 'Subscript': {\n            const astNode = {\n                type: 'Subscript',\n                name: 'Subscript',\n                from: node.from,\n                to: node.to,\n                whitespaceBefore: (0, get_whitespace_before_node_1.getWhitespaceBeforeNode)(node, markdown),\n                children: []\n            };\n            return (0, parse_children_1.parseChildren)(astNode, node, markdown);\n        }\n        case 'Table':\n            // Tables are somewhat cumbersome to convert, so we outsource it to its own function\n            return (0, parse_table_node_1.parseTableNode)(node, markdown);\n        case 'ZknLink': {\n            const content = node.getChild('ZknLinkContent');\n            if (content === null) {\n                throw new Error('Could not parse node ZknLink: No ZknLinkContent node found within children!');\n            }\n            const title = (_e = node.getChild('ZknLinkTitle')) !== null && _e !== void 0 ? _e : content;\n            const astNode = {\n                type: 'ZettelkastenLink',\n                name: 'ZknLink',\n                from: node.from,\n                to: node.to,\n                whitespaceBefore: (0, get_whitespace_before_node_1.getWhitespaceBeforeNode)(node, markdown),\n                value: markdown.substring(content.from, content.to),\n                title: (0, generic_text_node_1.genericTextNode)(title.from, title.to, markdown.substring(title.from, title.to))\n            };\n            return astNode;\n        }\n        case 'ZknTag': {\n            const astNode = {\n                type: 'ZettelkastenTag',\n                name: 'ZknTag',\n                from: node.from,\n                to: node.to,\n                whitespaceBefore: (0, get_whitespace_before_node_1.getWhitespaceBeforeNode)(node, markdown),\n                value: markdown.substring(node.from + 1, node.to)\n            };\n            return astNode;\n        }\n        default: {\n            const astNode = {\n                type: 'Generic',\n                name: node.name,\n                from: node.from,\n                to: node.to,\n                whitespaceBefore: (0, get_whitespace_before_node_1.getWhitespaceBeforeNode)(node, markdown),\n                children: []\n            };\n            return (0, parse_children_1.parseChildren)(astNode, node, markdown);\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzovVXNlcnMvSm9zaCBFL0RvY3VtZW50cy9aZXR0bHItc3dlbmc0MzEvc291cmNlL2NvbW1vbi9tb2R1bGVzL21hcmtkb3duLXV0aWxzL21hcmtkb3duLWFzdC9pbmRleC50cyIsInNvdXJjZXMiOlsiQzovVXNlcnMvSm9zaCBFL0RvY3VtZW50cy9aZXR0bHItc3dlbmc0MzEvc291cmNlL2NvbW1vbi9tb2R1bGVzL21hcmtkb3duLXV0aWxzL21hcmtkb3duLWFzdC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBZ0NHOzs7OztBQWlaSCw4QkFrWUM7QUFqeEJELHVGQUFvRjtBQUVwRix5REFBbUQ7QUFDbkQsNkVBQXNFO0FBQ3RFLDJEQUFxRDtBQUNyRCxxREFBZ0Q7QUFnWWhEOzs7Ozs7Ozs7R0FTRztBQUNILFNBQWdCLFNBQVMsQ0FBRSxJQUFnQixFQUFFLFFBQWdCOztJQUMzRCxRQUFRLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNsQiw0RUFBNEU7UUFDNUUsdUVBQXVFO1FBQ3ZFLEtBQUssT0FBTyxDQUFDO1FBQ2IsS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ1osTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQTtZQUN0QyxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFBO1lBQ2hDLElBQUksR0FBRyxLQUFLLElBQUksRUFBRSxDQUFDO2dCQUNqQixPQUFPO29CQUNMLElBQUksRUFBRSxTQUFTO29CQUNmLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtvQkFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7b0JBQ2YsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFO29CQUNYLGdCQUFnQixFQUFFLElBQUEsb0RBQXVCLEVBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQztvQkFDekQsUUFBUSxFQUFFLENBQUMsSUFBQSxtQ0FBZSxFQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7aUJBQ3hGLENBQUE7WUFDSCxDQUFDO1lBRUQsTUFBTSxPQUFPLEdBQWdCO2dCQUMzQixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7Z0JBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO2dCQUNmLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtnQkFDZixFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUU7Z0JBQ1gsZ0JBQWdCLEVBQUUsSUFBQSxvREFBdUIsRUFBQyxJQUFJLEVBQUUsUUFBUSxDQUFDO2dCQUN6RCwyRkFBMkY7Z0JBQzNGLEdBQUcsRUFBRSxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQztnQkFDekMsR0FBRyxFQUFFLEdBQUcsS0FBSyxJQUFJO29CQUNmLENBQUMsQ0FBQyxJQUFBLG1DQUFlLEVBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7b0JBQ3pFLENBQUMsQ0FBQyxJQUFBLG1DQUFlLEVBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7YUFDNUUsQ0FBQTtZQUVELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUE7WUFFMUMsSUFBSSxHQUFHLEtBQUssSUFBSSxJQUFJLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFLENBQUM7Z0JBQ3RDLHVFQUF1RTtnQkFDdkUsd0VBQXdFO2dCQUN4RSxZQUFZO2dCQUNaLE9BQU8sQ0FBQyxHQUFHLEdBQUcsSUFBQSxtQ0FBZSxFQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7WUFDM0csQ0FBQyxDQUFDLGlDQUFpQztZQUVuQyxPQUFPLE9BQU8sQ0FBQTtRQUNoQixDQUFDO1FBQ0QsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ1gsTUFBTSxPQUFPLEdBQWdCO2dCQUMzQixJQUFJLEVBQUUsTUFBTTtnQkFDWixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7Z0JBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO2dCQUNmLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRTtnQkFDWCxnQkFBZ0IsRUFBRSxJQUFBLG9EQUF1QixFQUFDLElBQUksRUFBRSxRQUFRLENBQUM7Z0JBQ3pELDJGQUEyRjtnQkFDM0YsR0FBRyxFQUFFLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDO2dCQUMzQyxHQUFHLEVBQUUsSUFBQSxtQ0FBZSxFQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQ2pGLENBQUE7WUFDRCxPQUFPLE9BQU8sQ0FBQTtRQUNoQixDQUFDO1FBQ0QsS0FBSyxhQUFhLENBQUM7UUFDbkIsS0FBSyxhQUFhLENBQUM7UUFDbkIsS0FBSyxhQUFhLENBQUM7UUFDbkIsS0FBSyxhQUFhLENBQUM7UUFDbkIsS0FBSyxhQUFhLENBQUM7UUFDbkIsS0FBSyxhQUFhLENBQUMsQ0FBQyxDQUFDO1lBQ25CLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUE7WUFDeEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDckQsTUFBTSxPQUFPLEdBQVk7Z0JBQ3ZCLElBQUksRUFBRSxTQUFTO2dCQUNmLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtnQkFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7Z0JBQ2YsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFO2dCQUNYLGdCQUFnQixFQUFFLElBQUEsb0RBQXVCLEVBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQztnQkFDekQsS0FBSyxFQUFFLElBQUEsbUNBQWUsRUFBQyxNQUFBLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxFQUFFLG1DQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsU0FBUyxDQUFDLE1BQUEsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLEVBQUUsbUNBQUksSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2pILEtBQUs7YUFDTixDQUFBO1lBQ0QsT0FBTyxPQUFPLENBQUE7UUFDaEIsQ0FBQztRQUNELEtBQUssZ0JBQWdCLENBQUM7UUFDdEIsS0FBSyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7WUFDdEIsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQTtZQUN4QyxNQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssSUFBSSxJQUFJLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUMzRixNQUFNLE9BQU8sR0FBWTtnQkFDdkIsSUFBSSxFQUFFLFNBQVM7Z0JBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO2dCQUNmLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtnQkFDZixFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUU7Z0JBQ1gsZ0JBQWdCLEVBQUUsSUFBQSxvREFBdUIsRUFBQyxJQUFJLEVBQUUsUUFBUSxDQUFDO2dCQUN6RCxLQUFLLEVBQUUsSUFBQSxtQ0FBZSxFQUFDLE1BQUEsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLEVBQUUsbUNBQUksSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFBLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxJQUFJLG1DQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDbkgsS0FBSzthQUNOLENBQUE7WUFDRCxPQUFPLE9BQU8sQ0FBQTtRQUNoQixDQUFDO1FBQ0QsS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLE1BQU0sT0FBTyxHQUFhO2dCQUN4QixJQUFJLEVBQUUsVUFBVTtnQkFDaEIsSUFBSSxFQUFFLFVBQVU7Z0JBQ2hCLEtBQUssRUFBRSxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQztnQkFDN0MsY0FBYyxFQUFFLElBQUEsMkJBQWdCLEVBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDM0UsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO2dCQUNmLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRTtnQkFDWCxnQkFBZ0IsRUFBRSxJQUFBLG9EQUF1QixFQUFDLElBQUksRUFBRSxRQUFRLENBQUM7YUFDMUQsQ0FBQTtZQUNELE9BQU8sT0FBTyxDQUFBO1FBQ2hCLENBQUM7UUFDRCxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDaEIsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFBLENBQUMsYUFBYTtZQUM3RSxNQUFNLE9BQU8sR0FBYTtnQkFDeEIsSUFBSSxFQUFFLFVBQVU7Z0JBQ2hCLElBQUksRUFBRSxVQUFVO2dCQUNoQixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7Z0JBQ2YsTUFBTSxFQUFFLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO2dCQUM5QixFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUU7Z0JBQ1gsZ0JBQWdCLEVBQUUsSUFBQSxvREFBdUIsRUFBQyxJQUFJLEVBQUUsUUFBUSxDQUFDO2dCQUN6RCxLQUFLLEVBQUUsUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUTthQUN0RixDQUFBO1lBQ0QsT0FBTyxPQUFPLENBQUE7UUFDaEIsQ0FBQztRQUNELEtBQUssYUFBYSxDQUFDLENBQUMsQ0FBQztZQUNuQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLENBQUE7WUFDL0MsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO1lBQzdDLE1BQU0sT0FBTyxHQUFnQjtnQkFDM0IsSUFBSSxFQUFFLGFBQWE7Z0JBQ25CLElBQUksRUFBRSxhQUFhO2dCQUNuQixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7Z0JBQ2YsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFO2dCQUNYLGdCQUFnQixFQUFFLElBQUEsb0RBQXVCLEVBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQztnQkFDekQsS0FBSyxFQUFFLEtBQUssS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDN0UsUUFBUSxFQUFFLEVBQUU7YUFDYixDQUFBO1lBRUQsSUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFLENBQUM7Z0JBQ2xCLE9BQU8sSUFBQSw4QkFBYSxFQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUE7WUFDL0MsQ0FBQztpQkFBTSxDQUFDO2dCQUNOLE9BQU8sT0FBTyxDQUFBO1lBQ2hCLENBQUM7UUFDSCxDQUFDO1FBQ0QsS0FBSyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7WUFDeEIsTUFBTSxPQUFPLEdBQWM7Z0JBQ3pCLElBQUksRUFBRSxXQUFXO2dCQUNqQixJQUFJLEVBQUUsV0FBVztnQkFDakIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO2dCQUNmLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRTtnQkFDWCxnQkFBZ0IsRUFBRSxJQUFBLG9EQUF1QixFQUFDLElBQUksRUFBRSxRQUFRLENBQUM7Z0JBQ3pELFFBQVEsRUFBRSxFQUFFO2FBQ2IsQ0FBQTtZQUNELE9BQU8sSUFBQSw4QkFBYSxFQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUE7UUFDL0MsQ0FBQztRQUNELEtBQUssYUFBYSxDQUFDLENBQUMsQ0FBQztZQUNuQixNQUFNLE9BQU8sR0FBZ0I7Z0JBQzNCLElBQUksRUFBRSxhQUFhO2dCQUNuQixRQUFRLEVBQUUsQ0FBQztnQkFDWCxTQUFTLEVBQUUsR0FBRztnQkFDZCxLQUFLLEVBQUUsS0FBSyxFQUFFLE9BQU87Z0JBQ3JCLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtnQkFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7Z0JBQ2YsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFO2dCQUNYLGdCQUFnQixFQUFFLElBQUEsb0RBQXVCLEVBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQztnQkFDekQsS0FBSyxFQUFFLEVBQUU7YUFDVixDQUFBO1lBRUQsS0FBSyxNQUFNLElBQUksSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7Z0JBQ2hELE1BQU0sUUFBUSxHQUFhO29CQUN6QixJQUFJLEVBQUUsVUFBVTtvQkFDaEIsSUFBSSxFQUFFLFVBQVU7b0JBQ2hCLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtvQkFDZixFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUU7b0JBQ1gsZ0JBQWdCLEVBQUUsSUFBQSxvREFBdUIsRUFBQyxJQUFJLEVBQUUsUUFBUSxDQUFDO29CQUN6RCxRQUFRLEVBQUUsRUFBRTtvQkFDWixNQUFNLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRTtpQkFDM0MsQ0FBQTtnQkFFRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFBO2dCQUMxQyxJQUFJLFFBQVEsS0FBSyxJQUFJLEVBQUUsQ0FBQztvQkFDdEIsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQTtvQkFDcEMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQTtvQkFFaEMsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO29CQUMvRSxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQTtvQkFDOUQsUUFBUSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7b0JBQ3hCLElBQUksT0FBTyxDQUFDLFFBQVEsR0FBRyxDQUFDLEVBQUUsQ0FBQzt3QkFDekIsT0FBTyxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUE7d0JBQ3pCLElBQUksS0FBSyxLQUFLLEdBQUcsSUFBSSxLQUFLLEtBQUssR0FBRyxFQUFFLENBQUM7NEJBQ25DLE9BQU8sQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFBO3dCQUMzQixDQUFDO29CQUNILENBQUM7Z0JBQ0gsQ0FBQztnQkFFRCwrQkFBK0I7Z0JBQy9CLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUE7Z0JBQ2xDLE1BQU0sVUFBVSxHQUFHLElBQUksS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQTtnQkFDckUsSUFBSSxVQUFVLEtBQUssSUFBSSxFQUFFLENBQUM7b0JBQ3hCLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUE7b0JBQy9ELFFBQVEsQ0FBQyxPQUFPLEdBQUcsSUFBSSxLQUFLLEtBQUssQ0FBQTtnQkFDbkMsQ0FBQztnQkFFRCxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFBLDhCQUFhLEVBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFBO1lBQzdELENBQUM7WUFFRCxPQUFPLE9BQU8sQ0FBQTtRQUNoQixDQUFDO1FBQ0QsS0FBSyxZQUFZLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLE1BQU0sT0FBTyxHQUFlO2dCQUMxQixJQUFJLEVBQUUsWUFBWTtnQkFDbEIsTUFBTSxFQUFFLEdBQUc7Z0JBQ1gsS0FBSyxFQUFFLEtBQUssRUFBRSxPQUFPO2dCQUNyQixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7Z0JBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO2dCQUNmLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRTtnQkFDWCxnQkFBZ0IsRUFBRSxJQUFBLG9EQUF1QixFQUFDLElBQUksRUFBRSxRQUFRLENBQUM7Z0JBQ3pELEtBQUssRUFBRSxFQUFFO2FBQ1YsQ0FBQTtZQUVELEtBQUssTUFBTSxJQUFJLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO2dCQUNoRCxNQUFNLFFBQVEsR0FBYTtvQkFDekIsSUFBSSxFQUFFLFVBQVU7b0JBQ2hCLElBQUksRUFBRSxVQUFVO29CQUNoQixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7b0JBQ2YsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFO29CQUNYLGdCQUFnQixFQUFFLElBQUEsb0RBQXVCLEVBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQztvQkFDekQsUUFBUSxFQUFFLEVBQUU7b0JBQ1osTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUU7aUJBQzNDLENBQUE7Z0JBRUQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQTtnQkFDMUMsSUFBSSxRQUFRLEtBQUssSUFBSSxFQUFFLENBQUM7b0JBQ3RCLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUE7b0JBQ3BDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLFFBQVEsQ0FBQyxFQUFFLENBQUE7b0JBRWhDLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUE7b0JBQzdELElBQUksTUFBTSxLQUFLLEdBQUcsSUFBSSxNQUFNLEtBQUssR0FBRyxJQUFJLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQzt3QkFDdkQsT0FBTyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7b0JBQ3pCLENBQUM7Z0JBQ0gsQ0FBQztnQkFFRCwrQkFBK0I7Z0JBQy9CLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUE7Z0JBQ2xDLE1BQU0sVUFBVSxHQUFHLElBQUksS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQTtnQkFDckUsSUFBSSxVQUFVLEtBQUssSUFBSSxFQUFFLENBQUM7b0JBQ3hCLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUE7b0JBQy9ELFFBQVEsQ0FBQyxPQUFPLEdBQUcsSUFBSSxLQUFLLEtBQUssQ0FBQTtnQkFDbkMsQ0FBQztnQkFFRCxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFBLDhCQUFhLEVBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFBO1lBQzdELENBQUM7WUFFRCxPQUFPLE9BQU8sQ0FBQTtRQUNoQixDQUFDO1FBQ0QsS0FBSyxZQUFZLENBQUM7UUFDbEIsS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ2pCLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUE7WUFDcEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQTtZQUN0QyxJQUFJLElBQUksS0FBSyxJQUFJLEVBQUUsQ0FBQztnQkFDbEIsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtnQkFDdkQsSUFBSSxRQUFRLEtBQUssSUFBSSxFQUFFLENBQUM7b0JBQ3RCLG1FQUFtRTtvQkFDbkUsaURBQWlEO29CQUNqRCxJQUFJLEdBQUcsSUFBSSxDQUFBO2dCQUNiLENBQUM7WUFDSCxDQUFDO1lBQ0QsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQTtZQUN4QyxNQUFNLE9BQU8sR0FBZTtnQkFDMUIsSUFBSSxFQUFFLFlBQVk7Z0JBQ2xCLElBQUksRUFBRSxZQUFZO2dCQUNsQixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7Z0JBQ2YsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFO2dCQUNYLGdCQUFnQixFQUFFLElBQUEsb0RBQXVCLEVBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQztnQkFDekQsSUFBSSxFQUFFLElBQUksS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ2pFLE1BQU0sRUFBRSxNQUFNLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO2FBQzFFLENBQUE7WUFDRCxPQUFPLE9BQU8sQ0FBQTtRQUNoQixDQUFDO1FBQ0QsS0FBSyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7WUFDdkIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQTtZQUN4QyxNQUFNLE9BQU8sR0FBb0I7Z0JBQy9CLElBQUksRUFBRSxpQkFBaUI7Z0JBQ3ZCLElBQUksRUFBRSxpQkFBaUI7Z0JBQ3ZCLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtnQkFDZixFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUU7Z0JBQ1gsZ0JBQWdCLEVBQUUsSUFBQSxvREFBdUIsRUFBQyxJQUFJLEVBQUUsUUFBUSxDQUFDO2dCQUN6RCxNQUFNLEVBQUUsTUFBTSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTthQUMxRSxDQUFBO1lBQ0QsT0FBTyxPQUFPLENBQUE7UUFDaEIsQ0FBQztRQUNELEtBQUssWUFBWSxDQUFDLENBQUMsQ0FBQztZQUNsQixNQUFNLENBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBRSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUE7WUFDbkQsTUFBTSxPQUFPLEdBQWU7Z0JBQzFCLElBQUksRUFBRSxZQUFZO2dCQUNsQixJQUFJLEVBQUUsWUFBWTtnQkFDbEIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO2dCQUNmLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRTtnQkFDWCxnQkFBZ0IsRUFBRSxJQUFBLG9EQUF1QixFQUFDLElBQUksRUFBRSxRQUFRLENBQUM7Z0JBQ3pELE1BQU0sRUFBRSxRQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQzthQUMvQyxDQUFBO1lBQ0QsT0FBTyxPQUFPLENBQUE7UUFDaEIsQ0FBQztRQUNELEtBQUssU0FBUyxDQUFDO1FBQ2YsS0FBSyxjQUFjLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLE1BQU0sT0FBTyxHQUFZO2dCQUN2QixJQUFJLEVBQUUsU0FBUztnQkFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7Z0JBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO2dCQUNmLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRTtnQkFDWCxnQkFBZ0IsRUFBRSxJQUFBLG9EQUF1QixFQUFDLElBQUksRUFBRSxRQUFRLENBQUM7Z0JBQ3pELEtBQUssRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsZUFBZTthQUN6RSxDQUFBO1lBQ0QsT0FBTyxPQUFPLENBQUE7UUFDaEIsQ0FBQztRQUNELEtBQUssVUFBVSxDQUFDO1FBQ2hCLEtBQUssZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLE1BQU0sT0FBTyxHQUFhO2dCQUN4QixJQUFJLEVBQUUsVUFBVTtnQkFDaEIsSUFBSSxFQUFFLFVBQVU7Z0JBQ2hCLEtBQUssRUFBRSxJQUFJLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNO2dCQUNuRCxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7Z0JBQ2YsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFO2dCQUNYLGdCQUFnQixFQUFFLElBQUEsb0RBQXVCLEVBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQztnQkFDekQsUUFBUSxFQUFFLEVBQUU7YUFDYixDQUFBO1lBRUQsT0FBTyxJQUFBLDhCQUFhLEVBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQTtRQUMvQyxDQUFDO1FBQ0QsS0FBSyxhQUFhLENBQUMsQ0FBQyxDQUFDO1lBQ25CLE1BQU0sT0FBTyxHQUFnQjtnQkFDM0IsSUFBSSxFQUFFLGFBQWE7Z0JBQ25CLElBQUksRUFBRSxhQUFhO2dCQUNuQixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7Z0JBQ2YsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFO2dCQUNYLGdCQUFnQixFQUFFLElBQUEsb0RBQXVCLEVBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQztnQkFDekQsUUFBUSxFQUFFLEVBQUU7YUFDYixDQUFBO1lBRUQsT0FBTyxJQUFBLDhCQUFhLEVBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQTtRQUMvQyxDQUFDO1FBQ0QsS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ2pCLE1BQU0sT0FBTyxHQUFjO2dCQUN6QixJQUFJLEVBQUUsV0FBVztnQkFDakIsSUFBSSxFQUFFLFdBQVc7Z0JBQ2pCLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtnQkFDZixFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUU7Z0JBQ1gsZ0JBQWdCLEVBQUUsSUFBQSxvREFBdUIsRUFBQyxJQUFJLEVBQUUsUUFBUSxDQUFDO2dCQUN6RCxRQUFRLEVBQUUsRUFBRTthQUNiLENBQUE7WUFFRCxPQUFPLElBQUEsOEJBQWEsRUFBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBQy9DLENBQUM7UUFDRCxLQUFLLE9BQU87WUFDVixvRkFBb0Y7WUFDcEYsT0FBTyxJQUFBLGlDQUFjLEVBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBQ3ZDLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztZQUNmLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtZQUMvQyxJQUFJLE9BQU8sS0FBSyxJQUFJLEVBQUUsQ0FBQztnQkFDckIsTUFBTSxJQUFJLEtBQUssQ0FBQyw2RUFBNkUsQ0FBQyxDQUFBO1lBQ2hHLENBQUM7WUFDRCxNQUFNLEtBQUssR0FBRyxNQUFBLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLG1DQUFJLE9BQU8sQ0FBQTtZQUN0RCxNQUFNLE9BQU8sR0FBcUI7Z0JBQ2hDLElBQUksRUFBRSxrQkFBa0I7Z0JBQ3hCLElBQUksRUFBRSxTQUFTO2dCQUNmLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtnQkFDZixFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUU7Z0JBQ1gsZ0JBQWdCLEVBQUUsSUFBQSxvREFBdUIsRUFBQyxJQUFJLEVBQUUsUUFBUSxDQUFDO2dCQUN6RCxLQUFLLEVBQUUsUUFBUSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxFQUFFLENBQUM7Z0JBQ25ELEtBQUssRUFBRSxJQUFBLG1DQUFlLEVBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7YUFDdkYsQ0FBQTtZQUNELE9BQU8sT0FBTyxDQUFBO1FBQ2hCLENBQUM7UUFDRCxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDZCxNQUFNLE9BQU8sR0FBb0I7Z0JBQy9CLElBQUksRUFBRSxpQkFBaUI7Z0JBQ3ZCLElBQUksRUFBRSxRQUFRO2dCQUNkLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtnQkFDZixFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUU7Z0JBQ1gsZ0JBQWdCLEVBQUUsSUFBQSxvREFBdUIsRUFBQyxJQUFJLEVBQUUsUUFBUSxDQUFDO2dCQUN6RCxLQUFLLEVBQUUsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDO2FBQ2xELENBQUE7WUFDRCxPQUFPLE9BQU8sQ0FBQTtRQUNoQixDQUFDO1FBQ0QsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNSLE1BQU0sT0FBTyxHQUFnQjtnQkFDM0IsSUFBSSxFQUFFLFNBQVM7Z0JBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO2dCQUNmLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtnQkFDZixFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUU7Z0JBQ1gsZ0JBQWdCLEVBQUUsSUFBQSxvREFBdUIsRUFBQyxJQUFJLEVBQUUsUUFBUSxDQUFDO2dCQUN6RCxRQUFRLEVBQUUsRUFBRTthQUNiLENBQUE7WUFDRCxPQUFPLElBQUEsOEJBQWEsRUFBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBQy9DLENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAaWdub3JlXHJcbiAqIEJFR0lOIEhFQURFUlxyXG4gKlxyXG4gKiBDb250YWluczogICAgICAgIHBhcnNlTm9kZVxyXG4gKiBDVk0tUm9sZTogICAgICAgIFV0aWxpdHkgRnVuY3Rpb25cclxuICogTWFpbnRhaW5lcjogICAgICBIZW5kcmlrIEVyelxyXG4gKiBMaWNlbnNlOiAgICAgICAgIEdOVSBHUEwgdjNcclxuICpcclxuICogRGVzY3JpcHRpb246ICAgICBUaGlzIGZpbGUgY29udGFpbnMgYSBjb252ZXJ0ZXIgdGhhdCBjYW4gdGFrZSBpbiBhIE1hcmtkb3duXHJcbiAqICAgICAgICAgICAgICAgICAgc291cmNlIHN0cmluZyBhbmQgY29udmVydCBpdCB0byBhbiBBYnN0cmFjdCBTeW50YXggVHJlZS5cclxuICogICAgICAgICAgICAgICAgICBUaGlzIGZpbGUgZm9sbG93cyB0aGUgYWR2aWNlIG9mIE1hcmlqbiBIYXZlcmJla2UsIHdob1xyXG4gKiAgICAgICAgICAgICAgICAgIG1lbnRpb25lZCB0aGF0IExlemVyIHRyZWVzIGFyZSBub3QgbmVjZXNzYXJpbHkgXCJhYnN0cmFjdFwiXHJcbiAqICAgICAgICAgICAgICAgICAgYW5kIGhlbmNlIG5lZWQgdG8gYmUgY29udmVydGVkIHByaW9yIHRvIHV0aWxpemluZyB0aGUgdHJlZTpcclxuICpcclxuICogICAgICAgICAgICAgICAgICBcIlRoZXNlIHRyZWVzLCByZXByZXNlbnRlZCBieSBkYXRhIHN0cnVjdHVyZXMgZnJvbSB0aGVcclxuICogICAgICAgICAgICAgICAgICBAbGV6ZXIvY29tbW9uIHBhY2thZ2UsIGFyZSBtb3JlIGxpbWl0ZWQgdGhhbiB0aGUgYWJzdHJhY3RcclxuICogICAgICAgICAgICAgICAgICBzeW50YXggdHJlZXMgeW91IG1pZ2h0IGhhdmUgc2VlbiBpbiBvdGhlciBjb250ZXh0cy4gVGhleSBhcmVcclxuICogICAgICAgICAgICAgICAgICBub3QgdmVyeSBhYnN0cmFjdC5cIlxyXG4gKiAgICAgICAgICAgICAgICAgIChmcm9tOiBodHRwczovL2xlemVyLmNvZGVtaXJyb3IubmV0L2RvY3MvZ3VpZGUvKVxyXG4gKlxyXG4gKiAgICAgICAgICAgICAgICAgIFRoZSB1dGlsaXR5IGZ1bmN0aW9uIHJ1bnMgdGhlIE1hcmtkb3duIHBhcnNlciBhcyBkZWZpbmVkIGZvclxyXG4gKiAgICAgICAgICAgICAgICAgIHRoZSBtYWluIGVkaXRvciB0byBlbnN1cmUgdGhhdCBldmVyeSBlbGVtZW50IHRoYXQgdGhlIHVzZXJcclxuICogICAgICAgICAgICAgICAgICBjYW4gc2VlIGluIHRoZSBlZGl0b3Igd2lsbCBhbHNvIGVuZCB1cCByZXByZXNlbnRlZCBoZXJlLiBUaGVcclxuICogICAgICAgICAgICAgICAgICBzeW50YXggdHJlZSBpcyBwcmltYXJpbHkgdXNlZCBpbiB0d28gZGlmZmVyZW50IGluc3RhbmNlc1xyXG4gKiAgICAgICAgICAgICAgICAgIGFjcm9zcyB0aGUgYXBwOlxyXG4gKlxyXG4gKiAgICAgICAgICAgICAgICAgIDEuIFRvIGV4dHJhY3Qgb25seSB0aGUgdGV4dCBub2RlcyAoUmVhZGFiaWxpdHkgTW9kZSAmIHNwZWxsXHJcbiAqICAgICAgICAgICAgICAgICAgICAgY2hlY2tpbmcpXHJcbiAqICAgICAgICAgICAgICAgICAgMi4gVG8gXCJjb3B5IGFzIEhUTUxcIiAoc2VlIG1hcmtkb3duLXRvLWh0bWwpXHJcbiAqXHJcbiAqIEVORCBIRUFERVJcclxuICovXHJcblxyXG5pbXBvcnQgZXh0cmFjdENpdGF0aW9ucywgeyB0eXBlIENpdGVQb3NpdGlvbiB9IGZyb20gJ0Bjb21tb24vdXRpbC9leHRyYWN0LWNpdGF0aW9ucydcclxuaW1wb3J0IHsgdHlwZSBTeW50YXhOb2RlIH0gZnJvbSAnQGxlemVyL2NvbW1vbidcclxuaW1wb3J0IHsgcGFyc2VUYWJsZU5vZGUgfSBmcm9tICcuL3BhcnNlLXRhYmxlLW5vZGUnXHJcbmltcG9ydCB7IGdldFdoaXRlc3BhY2VCZWZvcmVOb2RlIH0gZnJvbSAnLi9nZXQtd2hpdGVzcGFjZS1iZWZvcmUtbm9kZSdcclxuaW1wb3J0IHsgZ2VuZXJpY1RleHROb2RlIH0gZnJvbSAnLi9nZW5lcmljLXRleHQtbm9kZSdcclxuaW1wb3J0IHsgcGFyc2VDaGlsZHJlbiB9IGZyb20gJy4vcGFyc2UtY2hpbGRyZW4nXHJcblxyXG4vKipcclxuICogQmFzaWMgaW5mbyBldmVyeSBBU1ROb2RlIG5lZWRzIHRvIHByb3ZpZGVcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgTUROb2RlIHtcclxuICAvKipcclxuICAgKiBUaGUgbm9kZS5uYW1lIHByb3BlcnR5IChtYXkgZGlmZmVyIGZyb20gdGhlIHR5cGU7IHNpZ25pZmljYW50IG1haW5seSBmb3JcclxuICAgKiBnZW5lcmljcylcclxuICAgKi9cclxuICBuYW1lOiBzdHJpbmdcclxuICAvKipcclxuICAgKiBUaGUgc3RhcnQgb2Zmc2V0IG9mIHRoaXMgbm9kZSBpbiB0aGUgb3JpZ2luYWwgc291cmNlXHJcbiAgICovXHJcbiAgZnJvbTogbnVtYmVyXHJcbiAgLyoqXHJcbiAgICogVGhlIGVuZCBvZmZzZXQgb2YgdGhpcyBub2RlIGluIHRoZSBvcmlnaW5hbCBzb3VyY2VcclxuICAgKi9cclxuICB0bzogbnVtYmVyXHJcbiAgLyoqXHJcbiAgICogVGhpcyBwcm9wZXJ0eSBjb250YWlucyB0aGUgd2hpdGVzcGFjZSBiZWZvcmUgdGhpcyBub2RlOyByZXF1aXJlZCB0b1xyXG4gICAqIGRldGVybWluZSBhcHByb3ByaWF0ZSBzaWduaWZpY2FudCB3aGl0ZXNwYWNlIHBvcnRpb25zIGZvciBzb21lIGVsZW1lbnRzXHJcbiAgICogdXBvbiBjb252ZXJ0aW5nIHRvIEhUTUwuXHJcbiAgICovXHJcbiAgd2hpdGVzcGFjZUJlZm9yZTogc3RyaW5nXHJcbiAgLyoqXHJcbiAgICogQ2FuIGJlIHVzZWQgdG8gc3RvcmUgYXJiaXRyYXJ5IGF0dHJpYnV0ZXMgKGUuZy4gUGFuZG9jLXN0eWxlIGF0dHJpYnV0ZXNcclxuICAgKiBzdWNoIGFzIHsuY2xhc3NOYW1lfSlcclxuICAgKi9cclxuICBhdHRyaWJ1dGVzPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPlxyXG59XHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBhIGZvb3Rub3RlICh0aGUgaW5kaWNhdG9yIHdpdGhpbiB0aGUgdGV4dCBpdHNlbGYsIG5vdCB0aGVcclxuICogcmVmZXJlbmNlKS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgRm9vdG5vdGUgZXh0ZW5kcyBNRE5vZGUge1xyXG4gIHR5cGU6ICdGb290bm90ZSdcclxuICAvKipcclxuICAgKiBJZiB0aGlzIGlzIHRydWUsIHRoaXMgbWVhbnMgdGhhdCB0aGUgbGFiZWwgaXMgYWN0dWFsbHkgdGhlIGZvb3Rub3RlJ3NcclxuICAgKiBjb250ZXh0LCB3aGVyZWFzIGxhYmVsIHdpbGwgYmUgdGhlIGZvb3Rub3RlIHJlZiBudW1iZXIgaWYgaXRzIGZhbHNlLlxyXG4gICAqL1xyXG4gIGlubGluZTogYm9vbGVhblxyXG4gIC8qKlxyXG4gICAqIFRoZSBsYWJlbCBvZiB0aGUgZm9vdG5vdGUgKHNhbnMgdGhlIGZvcm1hdHRpbmcsIGkuZS4gW14xXSAtPiAxKVxyXG4gICAqL1xyXG4gIGxhYmVsOiBzdHJpbmdcclxufVxyXG5cclxuLyoqXHJcbiAqIEEgZm9vdG5vdGUgcmVmZXJlbmNlLCBjb21wbGV0ZSB3aXRoIGxhYmVsIGFuZCBmb290bm90ZSBib2R5LlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBGb290bm90ZVJlZiBleHRlbmRzIE1ETm9kZSB7XHJcbiAgdHlwZTogJ0Zvb3Rub3RlUmVmJ1xyXG4gIC8qKlxyXG4gICAqIFRoZSBsYWJlbCBvZiB0aGUgZm9vdG5vdGUgKHNhbnMgdGhlIGZvcm1hdHRpbmcsIGkuZS4gW14xXTogLT4gMSlcclxuICAgKi9cclxuICBsYWJlbDogc3RyaW5nXHJcbiAgLyoqXHJcbiAgICogQSBsaXN0IG9mIGNoaWxkcmVuIHJlcHJlc2VudGluZyB0aGUgZm9vdG5vdGUncyBib2R5XHJcbiAgICovXHJcbiAgY2hpbGRyZW46IEFTVE5vZGVbXVxyXG59XHJcblxyXG4vKipcclxuICogRWl0aGVyIGEgbGluayBvciBhbiBpbWFnZSwgc2luY2UgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGVzZSB0d28gbm9kZXNcclxuICogY29uc2lzdHMgb2YgYSBzaW5nbGUgY2hhcmFjdGVyLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBMaW5rT3JJbWFnZSBleHRlbmRzIE1ETm9kZSB7XHJcbiAgdHlwZTogJ0xpbmsnfCdJbWFnZSdcclxuICAvKipcclxuICAgKiBUaGUgVVJMIG9mIHRoZSBsaW5rIG9yIGltYWdlXHJcbiAgICovXHJcbiAgdXJsOiBzdHJpbmdcclxuICAvKipcclxuICAgKiBBTFQgdGV4dCBvZiB0aGUgbGluayBvciBpbWFnZSAoaS5lLiB3aGF0J3Mgd3JpdHRlbiBpbiBzcXVhcmUgYnJhY2tldHMpXHJcbiAgICovXHJcbiAgYWx0OiBUZXh0Tm9kZVxyXG4gIC8qKlxyXG4gICAqIE9wdGlvbmFsIHRpdGxlIHRleHQgKGkuZS4gd2hhdCBjYW4gYmUgYWRkZWQgYWZ0ZXIgdGhlIFVSTCBpbiBxdW90ZXMpXHJcbiAgICovXHJcbiAgdGl0bGU/OiBUZXh0Tm9kZVxyXG59XHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBhIEhlYWRpbmcuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEhlYWRpbmcgZXh0ZW5kcyBNRE5vZGUge1xyXG4gIHR5cGU6ICdIZWFkaW5nJ1xyXG4gIC8qKlxyXG4gICAqIFRoZSBoZWFkaW5nJ3MgY29udGVudFxyXG4gICAqL1xyXG4gIHZhbHVlOiBUZXh0Tm9kZVxyXG4gIC8qKlxyXG4gICAqIExldmVsIGZyb20gMS02XHJcbiAgICovXHJcbiAgbGV2ZWw6IG51bWJlclxyXG59XHJcblxyXG4vKipcclxuICogQSBjaXRhdGlvbiBlbGVtZW50XHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIENpdGF0aW9uIGV4dGVuZHMgTUROb2RlIHtcclxuICB0eXBlOiAnQ2l0YXRpb24nXHJcbiAgLyoqXHJcbiAgICogVGhlIHVucGFyc2VkLCByYXcgY2l0YXRpb24gY29kZVxyXG4gICAqL1xyXG4gIHZhbHVlOiBzdHJpbmdcclxuICAvKipcclxuICAgKiBUaGUgcGFyc2VkIGNpdGF0aW9uIGNvZGUgdGhhdCBjYW4gYmUgdXNlZCB0byByZW5kZXIgdGhlIGNpdGF0aW9uXHJcbiAgICovXHJcbiAgcGFyc2VkQ2l0YXRpb246IENpdGVQb3NpdGlvblxyXG59XHJcblxyXG4vKipcclxuICogQSBoaWdobGlnaHQsIGUuZy4sIGVuY2Fwc3VsYXRlZCA9PWluIGVxdWFsaXR5IHNpZ25zPT1cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSGlnaGxpZ2h0IGV4dGVuZHMgTUROb2RlIHtcclxuICB0eXBlOiAnSGlnaGxpZ2h0J1xyXG4gIC8qKlxyXG4gICAqIFNpbmNlIGl0J3MgYSByZWd1bGFyIGlubGluZSBlbGVtZW50LCBpdCBjYW4gaGF2ZSBjaGlsZHJlblxyXG4gICAqL1xyXG4gIGNoaWxkcmVuOiBBU1ROb2RlW11cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTdXBlcnNjcmlwdCBleHRlbmRzIE1ETm9kZSB7XHJcbiAgdHlwZTogJ1N1cGVyc2NyaXB0J1xyXG4gIGNoaWxkcmVuOiBBU1ROb2RlW11cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTdWJzY3JpcHQgZXh0ZW5kcyBNRE5vZGUge1xyXG4gIHR5cGU6ICdTdWJzY3JpcHQnXHJcbiAgY2hpbGRyZW46IEFTVE5vZGVbXVxyXG59XHJcblxyXG4vKipcclxuICogQSBzaW5nbGUgbGlzdCBpdGVtLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBMaXN0SXRlbSBleHRlbmRzIE1ETm9kZSB7XHJcbiAgdHlwZTogJ0xpc3RJdGVtJ1xyXG4gIC8qKlxyXG4gICAqIEFuIG9wdGlvbmFsIHByb3BlcnR5LiBJZiBpdCBleGlzdHMsIGl0IGlzIGEgdGFzayBpdGVtLCBhbmQgdGhlIHByb3BlcnR5XHJcbiAgICogaW5kaWNhdGVzIHdoZXRoZXIgaXQgaXMgY2hlY2tlZCBvciBub3QuXHJcbiAgICovXHJcbiAgY2hlY2tlZD86IGJvb2xlYW5cclxuICAvKipcclxuICAgKiBBbiBvcHRpb25hbCBwcm9wZXJ0eS4gSXQgaXMgc2V0IG9uIG9yZGVyZWQgbGlzdCBpdGVtcyBhbmQgaW5kaWNhdGVzIHRoZVxyXG4gICAqIG51bWJlciB0aGF0IHdhcyB1c2VkIGZvciB0aGlzIGl0ZW0gaW4gdGhlIE1hcmtkb3duIHNvdXJjZS4gU2hvdWxkIGJlXHJcbiAgICogaWdub3JlZCBieSBjb252ZXJ0ZXJzIHRoYXQgdHJhbnNmb3JtIHRoZSBsaXN0IGludG8gSFRNTC5cclxuICAgKi9cclxuICBudW1iZXI/OiBudW1iZXJcclxuICAvKipcclxuICAgKiBBIHByb3BlcnR5IHRoYXQgaW5jbHVkZXMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGxpc3QgaXRlbSBtYXJrZXIuXHJcbiAgICovXHJcbiAgbWFya2VyOiB7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBzdGFydCBvZiB0aGUgbGlzdCBtYXJrZXIuXHJcbiAgICAgKi9cclxuICAgIGZyb206IG51bWJlclxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgZW5kIG9mIHRoZSBsaXN0IG1hcmtlci5cclxuICAgICAqL1xyXG4gICAgdG86IG51bWJlclxyXG4gIH1cclxuICAvKipcclxuICAgKiBBIGxpc3QgaXRlbSBjYW4gY29udGFpbiBhbiBhcmJpdHJhcnkgYW1vdW50IG9mIGNoaWxkIG5vZGVzLiBBZGRpbmcgXCJMaXN0XCJcclxuICAgKiBhcyBhbiBleHBsaWNpdCBjaGlsZCB0byBzaWduaWZ5IHRoYXQgbmVzdGVkIGxpc3RzIGFyZSBjaGlsZHJlbiBvZiBhbiBpdGVtLlxyXG4gICAqL1xyXG4gIGNoaWxkcmVuOiBBcnJheTxPcmRlcmVkTGlzdHxCdWxsZXRMaXN0fEFTVE5vZGU+XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIGFuIG9yZGVyZWQgbGlzdC5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgT3JkZXJlZExpc3QgZXh0ZW5kcyBNRE5vZGUge1xyXG4gIHR5cGU6ICdPcmRlcmVkTGlzdCdcclxuICAvKipcclxuICAgKiBBdCB3aGF0IG51bWJlciB0aGUgbGlzdCBzdGFydHMgKGRlZmF1bHQ6IDEpXHJcbiAgICovXHJcbiAgc3RhcnRzQXQ6IG51bWJlclxyXG4gIC8qKlxyXG4gICAqIFRoZSBkZWxpbWl0ZXIgdXNlZCBieSB0aGlzIGxpc3QsIGNhbiBiZSBlaXRoZXIgKSBvciAuXHJcbiAgICovXHJcbiAgZGVsaW1pdGVyOiAnKSd8Jy4nXHJcbiAgLyoqXHJcbiAgICogV2hldGhlciB0aGlzIGxpc3QgaXMgbG9vc2UgKGluIHRoYXQgY2FzZSwgSFRNTCBvdXRwdXQgc2hvdWxkIHdyYXAgdGhlIGxpc3RcclxuICAgKiBpdGVtJ3MgY29udGVudHMgaW4gcGFyYWdyYXBocylcclxuICAgKi9cclxuICBsb29zZTogYm9vbGVhblxyXG4gIC8qKlxyXG4gICAqIEEgc2V0IG9mIGxpc3QgaXRlbXNcclxuICAgKi9cclxuICBpdGVtczogTGlzdEl0ZW1bXVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEJ1bGxldExpc3QgZXh0ZW5kcyBNRE5vZGUge1xyXG4gIHR5cGU6ICdCdWxsZXRMaXN0J1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzeW1ib2wgdGhpcyBsaXN0IHVzZXNcclxuICAgKi9cclxuICBzeW1ib2w6ICcqJ3wnLSd8JysnXHJcbiAgLyoqXHJcbiAgICogV2hldGhlciB0aGlzIGxpc3QgaXMgbG9vc2UgKGluIHRoYXQgY2FzZSwgSFRNTCBvdXRwdXQgc2hvdWxkIHdyYXAgdGhlIGxpc3RcclxuICAgKiBpdGVtJ3MgY29udGVudHMgaW4gcGFyYWdyYXBocylcclxuICAgKi9cclxuICBsb29zZTogYm9vbGVhblxyXG4gIC8qKlxyXG4gICAqIEEgc2V0IG9mIGxpc3QgaXRlbXNcclxuICAgKi9cclxuICBpdGVtczogTGlzdEl0ZW1bXVxyXG59XHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBhIGZlbmNlZCBjb2RlLiBOT1RFIHRoYXQgQ29kZUJsb2NrcyBhcmUgYWxzbyB0cmVhdGVkIGFzIEZlbmNlZENvZGUuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEZlbmNlZENvZGUgZXh0ZW5kcyBNRE5vZGUge1xyXG4gIHR5cGU6ICdGZW5jZWRDb2RlJ1xyXG4gIC8qKlxyXG4gICAqIFRoZSBpbmZvIHN0cmluZyAoY2FuIGJlIGFuIGVtcHR5IHN0cmluZywgZS5nLiwgZm9yIGluZGVudGVkIGNvZGUpXHJcbiAgICovXHJcbiAgaW5mbzogc3RyaW5nXHJcbiAgLyoqXHJcbiAgICogVGhlIHZlcmJhdGltIHNvdXJjZSBjb2RlLiAoTm90IHJlcHJlc2VudGVkIGFzIGEgVGV4dE5vZGUgc2luY2Ugd2hpdGVzcGFjZVxyXG4gICAqIGlzIHNpZ25pZmljYW50IGFuZCBpdCBzaG91bGRuJ3QgY291bnQgdG93YXJkcyB3b3JkIGNvdW50cywgZXRjLilcclxuICAgKi9cclxuICBzb3VyY2U6IHN0cmluZ1xyXG59XHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBpbmxpbmUgY29kZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSW5saW5lQ29kZSBleHRlbmRzIE1ETm9kZSB7XHJcbiAgdHlwZTogJ0lubGluZUNvZGUnXHJcbiAgLyoqXHJcbiAgICogVGhlIHZlcmJhdGltIHNvdXJjZSBjb2RlLiAoTm90IHJlcHJlc2VudGVkIGFzIGEgVGV4dE5vZGUgc2luY2Ugd2hpdGVzcGFjZVxyXG4gICAqIGlzIHNpZ25pZmljYW50IGFuZCBpdCBzaG91bGRuJ3QgY291bnQgdG93YXJkcyB3b3JkIGNvdW50cywgZXRjLilcclxuICAgKi9cclxuICBzb3VyY2U6IHN0cmluZ1xyXG59XHJcblxyXG4vKipcclxuICogQW4gZW1waGFzaXMgbm9kZSAoaXRhbGljIG9yIGJvbGQpLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBFbXBoYXNpcyBleHRlbmRzIE1ETm9kZSB7XHJcbiAgdHlwZTogJ0VtcGhhc2lzJ1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0eXBlIG9mIGVtcGhhc2lzIC0tIGl0YWxpYyBvciBib2xkXHJcbiAgICovXHJcbiAgd2hpY2g6ICdpdGFsaWMnfCdib2xkJ1xyXG4gIC8qKlxyXG4gICAqIFRoZSBjaGlsZHJlbiBvZiB0aGlzIG5vZGVcclxuICAgKi9cclxuICBjaGlsZHJlbjogQVNUTm9kZVtdXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGlzIG5vZGUgcmVwcmVzZW50cyBhIFlBTUwgZnJvbnRtYXR0ZXIuIEl0IHNoYXJlcyBhIGxvdCB3aXRoIHRoZSBGZW5jZWRDb2RlXHJcbiAqIHR5cGUsIGkuZS4gdGhlIFlBTUwgY29kZSB3aWxsIG5vdCBiZSBwYXJzZWQgaW50byBhbiBvYmplY3QuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFlBTUxGcm9udG1hdHRlciBleHRlbmRzIE1ETm9kZSB7XHJcbiAgdHlwZTogJ1lBTUxGcm9udG1hdHRlcidcclxuICAvKipcclxuICAgKiBUaGUgdmVyYmF0aW0gWUFNTCBzb3VyY2UuXHJcbiAgICovXHJcbiAgc291cmNlOiBzdHJpbmdcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYSBzaW5nbGUgdGFibGUgY2VsbFxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBUYWJsZUNlbGwgZXh0ZW5kcyBNRE5vZGUge1xyXG4gIHR5cGU6ICdUYWJsZUNlbGwnXHJcbiAgLyoqXHJcbiAgICogVGhlIHRleHQgY29udGVudCBvZiB0aGUgY2VsbCBUT0RPOiBBcmJpdHJhcnkgY2hpbGRyZW4hXHJcbiAgICovXHJcbiAgY2hpbGRyZW46IEFTVE5vZGVbXVxyXG59XHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBhIHRhYmxlIHJvdy5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGFibGVSb3cgZXh0ZW5kcyBNRE5vZGUge1xyXG4gIHR5cGU6ICdUYWJsZVJvdydcclxuICAvKipcclxuICAgKiBUaGlzIGlzIHNldCB0byB0cnVlIGlmIHRoZSByb3cgaXMgYSBoZWFkZXIuXHJcbiAgICovXHJcbiAgaXNIZWFkZXJPckZvb3RlcjogYm9vbGVhblxyXG4gIC8qKlxyXG4gICAqIEEgbGlzdCBvZiBjZWxscyB3aXRoaW4gdGhpcyByb3dcclxuICAgKi9cclxuICBjZWxsczogVGFibGVDZWxsW11cclxufVxyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYSB0YWJsZSBlbGVtZW50LlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBUYWJsZSBleHRlbmRzIE1ETm9kZSB7XHJcbiAgdHlwZTogJ1RhYmxlJ1xyXG4gIC8qKlxyXG4gICAqIEEgbGlzdCBvZiByb3dzIG9mIHRoaXMgdGFibGVcclxuICAgKi9cclxuICByb3dzOiBUYWJsZVJvd1tdXHJcbiAgLyoqXHJcbiAgICogQSBsaXN0IG9mIGNvbHVtbiBhbGlnbm1lbnRzIGluIHRoZSB0YWJsZS4gTWF5IGJlIHVuZGVmaW5lZDsgdGhlIGRlZmF1bHQgaXNcclxuICAgKiBmb3IgYWxsIGNvbHVtbnMgdG8gYmUgbGVmdC1hbGlnbmVkLlxyXG4gICAqL1xyXG4gIGFsaWdubWVudD86IEFycmF5PCdsZWZ0J3wnY2VudGVyJ3wncmlnaHQnPlxyXG4gIC8qKlxyXG4gICAqIFRoaXMgcHJvcGVydHkgY2FuIG9wdGlvbmFsbHkgY29udGFpbiB0aGUgdGFibGUgdHlwZSBpbiB0aGUgc291cmNlLlxyXG4gICAqL1xyXG4gIHRhYmxlVHlwZT86ICdncmlkJ3wncGlwZSdcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYSBaZXR0ZWxrYXN0ZW5MaW5rIChgW1tTb21lIGZpbGUubWRdXWApXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFpldHRlbGthc3RlbkxpbmsgZXh0ZW5kcyBNRE5vZGUge1xyXG4gIHR5cGU6ICdaZXR0ZWxrYXN0ZW5MaW5rJ1xyXG4gIC8qKlxyXG4gICAqIENvbnRhaW5zIHRoZSByYXcgY29udGVudHMgb2YgdGhlIGxpbmtcclxuICAgKi9cclxuICB2YWx1ZTogc3RyaW5nXHJcbiAgLyoqXHJcbiAgICogVGhlIGxpbmsgdGl0bGU7IG1heSBiZSB0aGUgc2FtZSBhcyB2YWx1ZVxyXG4gICAqL1xyXG4gIHRpdGxlOiBUZXh0Tm9kZVxyXG59XHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBhIHRhZyAoYCNzb21lLXRhZ2ApXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFpldHRlbGthc3RlblRhZyBleHRlbmRzIE1ETm9kZSB7XHJcbiAgdHlwZTogJ1pldHRlbGthc3RlblRhZydcclxuICAvKipcclxuICAgKiBDb250YWlucyB0aGUgcmF3IGNvbnRlbnRzIG9mIHRoZSB0YWdcclxuICAgKi9cclxuICB2YWx1ZTogc3RyaW5nXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29tbWVudCBleHRlbmRzIE1ETm9kZSB7XHJcbiAgdHlwZTogJ0NvbW1lbnQnXHJcbiAgLyoqXHJcbiAgICogQ29udGFpbnMgdGhlIHJhdyBjb250ZW50cyBvZiB0aGUgY29tbWVudFxyXG4gICAqL1xyXG4gIHZhbHVlOiBzdHJpbmdcclxufVxyXG5cclxuLyoqXHJcbiAqIEEgZ2VuZXJpYyB0ZXh0IG5vZGUgdGhhdCBjYW4gcmVwcmVzZW50IGEgc3RyaW5nIG9mIGNvbnRlbnQuIE1vc3Qgbm9kZXNcclxuICogY29udGFpbiBhdCBsZWFzdCBvbmUgVGV4dE5vZGUgYXMgaXRzIGNvbnRlbnQgKGUuZy4gZW1waGFzaXMpLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBUZXh0Tm9kZSBleHRlbmRzIE1ETm9kZSB7XHJcbiAgdHlwZTogJ1RleHQnXHJcbiAgLyoqXHJcbiAgICogVGhlIHN0cmluZyB2YWx1ZSBvZiB0aGUgdGV4dCBub2RlLlxyXG4gICAqL1xyXG4gIHZhbHVlOiBzdHJpbmdcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoaXMgZ2VuZXJpYyBub2RlIHJlcHJlc2VudHMgYW55IExlemVyIG5vZGUgdGhhdCBoYXMgbm8gc3BlY2lmaWMgcm9sZSAob3IgY2FuXHJcbiAqIGJlIGhhbmRsZWQgd2l0aG91dCBhZGRpdGlvbmFsIGNhcmUpLiBUaGlzIGVuc3VyZXMgdGhhdCBuZXcgbm9kZXMgd2lsbCBhbHdheXNcclxuICogZW5kIHVwIGluIHRoZSByZXN1bHRpbmcgQVNULCBldmVuIGlmIHdlIGZvcmdvdCB0byBhZGQgdGhlIG5vZGUgc3BlY2lmaWNhbGx5LlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBHZW5lcmljTm9kZSBleHRlbmRzIE1ETm9kZSB7XHJcbiAgdHlwZTogJ0dlbmVyaWMnXHJcbiAgLyoqXHJcbiAgICogRWFjaCBnZW5lcmljIG5vZGUgbWF5IGhhdmUgY2hpbGRyZW5cclxuICAgKi9cclxuICBjaGlsZHJlbjogQVNUTm9kZVtdXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbnkgbm9kZSB0aGF0IGNhbiBiZSBwYXJ0IG9mIHRoZSBBU1QgaXMgYW4gQVNUTm9kZS5cclxuICovXHJcbmV4cG9ydCB0eXBlIEFTVE5vZGUgPSBDb21tZW50IHwgRm9vdG5vdGUgfCBGb290bm90ZVJlZiB8IExpbmtPckltYWdlIHwgVGV4dE5vZGVcclxufCBIZWFkaW5nIHwgQ2l0YXRpb24gfCBIaWdobGlnaHQgfCBTdXBlcnNjcmlwdCB8IFN1YnNjcmlwdCB8IE9yZGVyZWRMaXN0XHJcbnwgQnVsbGV0TGlzdCB8IExpc3RJdGVtIHwgR2VuZXJpY05vZGUgfCBGZW5jZWRDb2RlIHwgSW5saW5lQ29kZSB8IFlBTUxGcm9udG1hdHRlclxyXG58IEVtcGhhc2lzIHwgVGFibGUgfCBUYWJsZUNlbGwgfCBUYWJsZVJvdyB8IFpldHRlbGthc3RlbkxpbmsgfCBaZXR0ZWxrYXN0ZW5UYWdcclxuLyoqXHJcbiAqIEV4dHJhY3QgdGhlIFwidHlwZVwiIHByb3BlcnRpZXMgZnJvbSB0aGUgQVNUTm9kZXMgdGhhdCBjYW4gZGlmZmVyZW50aWF0ZSB0aGVzZS5cclxuICovXHJcbmV4cG9ydCB0eXBlIEFTVE5vZGVUeXBlID0gQVNUTm9kZVsndHlwZSddXHJcblxyXG4vKipcclxuICogUGFyc2VzIGEgc2luZ2xlIExlemVyIHN0eWxlIFN5bnRheE5vZGUgdG8gYW4gQVNUTm9kZS5cclxuICpcclxuICogQHBhcmFtICAge1N5bnRheE5vZGV9ICBub2RlICAgICAgVGhlIG5vZGUgdG8gY29udmVydFxyXG4gKiBAcGFyYW0gICB7c3RyaW5nfSAgICAgIG1hcmtkb3duICBUaGUgTWFya2Rvd24gc291cmNlLCByZXF1aXJlZCB0byBleHRyYWN0IHRoZVxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3R1YWwgdGV4dCBjb250ZW50IG9mIHRoZSBTeW50YXhOb2RlcyxcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpY2ggaXNuJ3Qgc3RvcmVkIGluIHRoZSBub2RlcyB0aGVtc2VsdmVzLlxyXG4gKlxyXG4gKiBAcmV0dXJuICB7QVNUTm9kZX0gICAgICAgICAgICAgICBUaGUgcm9vdCBub2RlIG9mIGEgTWFya2Rvd24gQVNUXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VOb2RlIChub2RlOiBTeW50YXhOb2RlLCBtYXJrZG93bjogc3RyaW5nKTogQVNUTm9kZSB7XHJcbiAgc3dpdGNoIChub2RlLm5hbWUpIHtcclxuICAgIC8vIE5PVEU6IE1vc3Qgbm9kZXMgYXJlIHRyZWF0ZWQgYXMgZ2VuZXJpY3MgKHNlZSBkZWZhdWx0IGNhc2UpOyBoZXJlIHdlIG9ubHlcclxuICAgIC8vIGRlZmluZSBub2RlcyB3aGljaCB3ZSBjYW4gXCJjb21wcmVzc1wiIGEgbGl0dGxlIGJpdCBvciBtYWtlIGFjY2Vzc2libGVcclxuICAgIGNhc2UgJ0ltYWdlJzpcclxuICAgIGNhc2UgJ0xpbmsnOiB7XHJcbiAgICAgIGNvbnN0IGFsdCA9IG5vZGUuZ2V0Q2hpbGQoJ0xpbmtMYWJlbCcpXHJcbiAgICAgIGNvbnN0IHVybCA9IG5vZGUuZ2V0Q2hpbGQoJ1VSTCcpXHJcbiAgICAgIGlmICh1cmwgPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgdHlwZTogJ0dlbmVyaWMnLFxyXG4gICAgICAgICAgbmFtZTogbm9kZS5uYW1lLFxyXG4gICAgICAgICAgZnJvbTogbm9kZS5mcm9tLFxyXG4gICAgICAgICAgdG86IG5vZGUudG8sXHJcbiAgICAgICAgICB3aGl0ZXNwYWNlQmVmb3JlOiBnZXRXaGl0ZXNwYWNlQmVmb3JlTm9kZShub2RlLCBtYXJrZG93biksXHJcbiAgICAgICAgICBjaGlsZHJlbjogW2dlbmVyaWNUZXh0Tm9kZShub2RlLmZyb20sIG5vZGUudG8sIG1hcmtkb3duLnN1YnN0cmluZyhub2RlLmZyb20sIG5vZGUudG8pKV1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGFzdE5vZGU6IExpbmtPckltYWdlID0ge1xyXG4gICAgICAgIHR5cGU6IG5vZGUubmFtZSxcclxuICAgICAgICBuYW1lOiBub2RlLm5hbWUsXHJcbiAgICAgICAgZnJvbTogbm9kZS5mcm9tLFxyXG4gICAgICAgIHRvOiBub2RlLnRvLFxyXG4gICAgICAgIHdoaXRlc3BhY2VCZWZvcmU6IGdldFdoaXRlc3BhY2VCZWZvcmVOb2RlKG5vZGUsIG1hcmtkb3duKSxcclxuICAgICAgICAvLyB0aXRsZTogZ2VuZXJpY1RleHROb2RlKG5vZGUuZnJvbSwgbm9kZS50bywgbWFya2Rvd24uc3Vic3RyaW5nKG5vZGUuZnJvbSwgbm9kZS50bykpLCBUT0RPXHJcbiAgICAgICAgdXJsOiBtYXJrZG93bi5zdWJzdHJpbmcodXJsLmZyb20sIHVybC50byksXHJcbiAgICAgICAgYWx0OiBhbHQgIT09IG51bGxcclxuICAgICAgICAgID8gZ2VuZXJpY1RleHROb2RlKGFsdC5mcm9tLCBhbHQudG8sIG1hcmtkb3duLnN1YnN0cmluZyhhbHQuZnJvbSwgYWx0LnRvKSlcclxuICAgICAgICAgIDogZ2VuZXJpY1RleHROb2RlKHVybC5mcm9tLCB1cmwudG8sIG1hcmtkb3duLnN1YnN0cmluZyh1cmwuZnJvbSwgdXJsLnRvKSlcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgbWFya3MgPSBub2RlLmdldENoaWxkcmVuKCdMaW5rTWFyaycpXHJcblxyXG4gICAgICBpZiAoYWx0ID09PSBudWxsICYmIG1hcmtzLmxlbmd0aCA+PSAyKSB7XHJcbiAgICAgICAgLy8gVGhlIGRlZmF1bHQgTWFya2Rvd24gcGFyc2VyIGRvZXNuJ3QgYXBwbHkgXCJMaW5rTGFiZWxcIiB1bmZvcnR1bmF0ZWx5LlxyXG4gICAgICAgIC8vIFNvIGluc3RlYWQgd2UgaGF2ZSB0byBnZXQgd2hhdGV2ZXIgaXMgaW4gYmV0d2VlbiB0aGUgZmlyc3QgYW5kIHNlY29uZFxyXG4gICAgICAgIC8vIGxpbmtNYXJrLlxyXG4gICAgICAgIGFzdE5vZGUuYWx0ID0gZ2VuZXJpY1RleHROb2RlKG1hcmtzWzBdLnRvLCBtYXJrc1sxXS5mcm9tLCBtYXJrZG93bi5zdWJzdHJpbmcobWFya3NbMF0udG8sIG1hcmtzWzFdLmZyb20pKVxyXG4gICAgICB9IC8vIEVsc2U6IFNvbWV3aGF0IG1hbGZvcm1lZCBsaW5rLlxyXG5cclxuICAgICAgcmV0dXJuIGFzdE5vZGVcclxuICAgIH1cclxuICAgIGNhc2UgJ1VSTCc6IHtcclxuICAgICAgY29uc3QgYXN0Tm9kZTogTGlua09ySW1hZ2UgPSB7XHJcbiAgICAgICAgdHlwZTogJ0xpbmsnLFxyXG4gICAgICAgIG5hbWU6IG5vZGUubmFtZSxcclxuICAgICAgICBmcm9tOiBub2RlLmZyb20sXHJcbiAgICAgICAgdG86IG5vZGUudG8sXHJcbiAgICAgICAgd2hpdGVzcGFjZUJlZm9yZTogZ2V0V2hpdGVzcGFjZUJlZm9yZU5vZGUobm9kZSwgbWFya2Rvd24pLFxyXG4gICAgICAgIC8vIHRpdGxlOiBnZW5lcmljVGV4dE5vZGUobm9kZS5mcm9tLCBub2RlLnRvLCBtYXJrZG93bi5zdWJzdHJpbmcobm9kZS5mcm9tLCBub2RlLnRvKSksIFRPRE9cclxuICAgICAgICB1cmw6IG1hcmtkb3duLnN1YnN0cmluZyhub2RlLmZyb20sIG5vZGUudG8pLFxyXG4gICAgICAgIGFsdDogZ2VuZXJpY1RleHROb2RlKG5vZGUuZnJvbSwgbm9kZS50bywgbWFya2Rvd24uc3Vic3RyaW5nKG5vZGUuZnJvbSwgbm9kZS50bykpXHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGFzdE5vZGVcclxuICAgIH1cclxuICAgIGNhc2UgJ0FUWEhlYWRpbmcxJzpcclxuICAgIGNhc2UgJ0FUWEhlYWRpbmcyJzpcclxuICAgIGNhc2UgJ0FUWEhlYWRpbmczJzpcclxuICAgIGNhc2UgJ0FUWEhlYWRpbmc0JzpcclxuICAgIGNhc2UgJ0FUWEhlYWRpbmc1JzpcclxuICAgIGNhc2UgJ0FUWEhlYWRpbmc2Jzoge1xyXG4gICAgICBjb25zdCBtYXJrID0gbm9kZS5nZXRDaGlsZCgnSGVhZGVyTWFyaycpXHJcbiAgICAgIGNvbnN0IGxldmVsID0gbWFyayAhPT0gbnVsbCA/IG1hcmsudG8gLSBtYXJrLmZyb20gOiAwXHJcbiAgICAgIGNvbnN0IGFzdE5vZGU6IEhlYWRpbmcgPSB7XHJcbiAgICAgICAgdHlwZTogJ0hlYWRpbmcnLFxyXG4gICAgICAgIG5hbWU6IG5vZGUubmFtZSxcclxuICAgICAgICBmcm9tOiBub2RlLmZyb20sXHJcbiAgICAgICAgdG86IG5vZGUudG8sXHJcbiAgICAgICAgd2hpdGVzcGFjZUJlZm9yZTogZ2V0V2hpdGVzcGFjZUJlZm9yZU5vZGUobm9kZSwgbWFya2Rvd24pLFxyXG4gICAgICAgIHZhbHVlOiBnZW5lcmljVGV4dE5vZGUobWFyaz8udG8gPz8gbm9kZS5mcm9tLCBub2RlLnRvLCBtYXJrZG93bi5zdWJzdHJpbmcobWFyaz8udG8gPz8gbm9kZS5mcm9tLCBub2RlLnRvKS50cmltKCkpLFxyXG4gICAgICAgIGxldmVsXHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGFzdE5vZGVcclxuICAgIH1cclxuICAgIGNhc2UgJ1NldGV4dEhlYWRpbmcxJzpcclxuICAgIGNhc2UgJ1NldGV4dEhlYWRpbmcyJzoge1xyXG4gICAgICBjb25zdCBtYXJrID0gbm9kZS5nZXRDaGlsZCgnSGVhZGVyTWFyaycpXHJcbiAgICAgIGNvbnN0IGxldmVsID0gbWFyayAhPT0gbnVsbCAmJiBtYXJrZG93bi5zdWJzdHJpbmcobWFyay5mcm9tLCBtYXJrLnRvKS5pbmNsdWRlcygnLScpID8gMiA6IDFcclxuICAgICAgY29uc3QgYXN0Tm9kZTogSGVhZGluZyA9IHtcclxuICAgICAgICB0eXBlOiAnSGVhZGluZycsXHJcbiAgICAgICAgbmFtZTogbm9kZS5uYW1lLFxyXG4gICAgICAgIGZyb206IG5vZGUuZnJvbSxcclxuICAgICAgICB0bzogbm9kZS50byxcclxuICAgICAgICB3aGl0ZXNwYWNlQmVmb3JlOiBnZXRXaGl0ZXNwYWNlQmVmb3JlTm9kZShub2RlLCBtYXJrZG93biksXHJcbiAgICAgICAgdmFsdWU6IGdlbmVyaWNUZXh0Tm9kZShtYXJrPy50byA/PyBub2RlLmZyb20sIG5vZGUudG8sIG1hcmtkb3duLnN1YnN0cmluZyhub2RlLmZyb20sIG1hcms/LmZyb20gPz8gbm9kZS50bykudHJpbSgpKSxcclxuICAgICAgICBsZXZlbFxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBhc3ROb2RlXHJcbiAgICB9XHJcbiAgICBjYXNlICdDaXRhdGlvbic6IHtcclxuICAgICAgY29uc3QgYXN0Tm9kZTogQ2l0YXRpb24gPSB7XHJcbiAgICAgICAgbmFtZTogJ0NpdGF0aW9uJyxcclxuICAgICAgICB0eXBlOiAnQ2l0YXRpb24nLFxyXG4gICAgICAgIHZhbHVlOiBtYXJrZG93bi5zdWJzdHJpbmcobm9kZS5mcm9tLCBub2RlLnRvKSxcclxuICAgICAgICBwYXJzZWRDaXRhdGlvbjogZXh0cmFjdENpdGF0aW9ucyhtYXJrZG93bi5zdWJzdHJpbmcobm9kZS5mcm9tLCBub2RlLnRvKSlbMF0sXHJcbiAgICAgICAgZnJvbTogbm9kZS5mcm9tLFxyXG4gICAgICAgIHRvOiBub2RlLnRvLFxyXG4gICAgICAgIHdoaXRlc3BhY2VCZWZvcmU6IGdldFdoaXRlc3BhY2VCZWZvcmVOb2RlKG5vZGUsIG1hcmtkb3duKVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBhc3ROb2RlXHJcbiAgICB9XHJcbiAgICBjYXNlICdGb290bm90ZSc6IHtcclxuICAgICAgY29uc3QgY29udGVudHMgPSBtYXJrZG93bi5zdWJzdHJpbmcobm9kZS5mcm9tICsgMiwgbm9kZS50byAtIDEpIC8vIFteMV0gLS0+IDFcclxuICAgICAgY29uc3QgYXN0Tm9kZTogRm9vdG5vdGUgPSB7XHJcbiAgICAgICAgdHlwZTogJ0Zvb3Rub3RlJyxcclxuICAgICAgICBuYW1lOiAnRm9vdG5vdGUnLFxyXG4gICAgICAgIGZyb206IG5vZGUuZnJvbSxcclxuICAgICAgICBpbmxpbmU6IGNvbnRlbnRzLmVuZHNXaXRoKCdeJyksXHJcbiAgICAgICAgdG86IG5vZGUudG8sXHJcbiAgICAgICAgd2hpdGVzcGFjZUJlZm9yZTogZ2V0V2hpdGVzcGFjZUJlZm9yZU5vZGUobm9kZSwgbWFya2Rvd24pLFxyXG4gICAgICAgIGxhYmVsOiBjb250ZW50cy5lbmRzV2l0aCgnXicpID8gY29udGVudHMuc3Vic3RyaW5nKDAsIGNvbnRlbnRzLmxlbmd0aCAtIDEpIDogY29udGVudHNcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gYXN0Tm9kZVxyXG4gICAgfVxyXG4gICAgY2FzZSAnRm9vdG5vdGVSZWYnOiB7XHJcbiAgICAgIGNvbnN0IGxhYmVsID0gbm9kZS5nZXRDaGlsZCgnRm9vdG5vdGVSZWZMYWJlbCcpXHJcbiAgICAgIGNvbnN0IGJvZHkgPSBub2RlLmdldENoaWxkKCdGb290bm90ZVJlZkJvZHknKVxyXG4gICAgICBjb25zdCBhc3ROb2RlOiBGb290bm90ZVJlZiA9IHtcclxuICAgICAgICB0eXBlOiAnRm9vdG5vdGVSZWYnLFxyXG4gICAgICAgIG5hbWU6ICdGb290bm90ZVJlZicsXHJcbiAgICAgICAgZnJvbTogbm9kZS5mcm9tLFxyXG4gICAgICAgIHRvOiBub2RlLnRvLFxyXG4gICAgICAgIHdoaXRlc3BhY2VCZWZvcmU6IGdldFdoaXRlc3BhY2VCZWZvcmVOb2RlKG5vZGUsIG1hcmtkb3duKSxcclxuICAgICAgICBsYWJlbDogbGFiZWwgIT09IG51bGwgPyBtYXJrZG93bi5zdWJzdHJpbmcobGFiZWwuZnJvbSArIDIsIGxhYmVsLnRvIC0gMikgOiAnJyxcclxuICAgICAgICBjaGlsZHJlbjogW11cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGJvZHkgIT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gcGFyc2VDaGlsZHJlbihhc3ROb2RlLCBib2R5LCBtYXJrZG93bilcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gYXN0Tm9kZVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXNlICdIaWdobGlnaHRDb250ZW50Jzoge1xyXG4gICAgICBjb25zdCBhc3ROb2RlOiBIaWdobGlnaHQgPSB7XHJcbiAgICAgICAgdHlwZTogJ0hpZ2hsaWdodCcsXHJcbiAgICAgICAgbmFtZTogJ0hpZ2hsaWdodCcsXHJcbiAgICAgICAgZnJvbTogbm9kZS5mcm9tLFxyXG4gICAgICAgIHRvOiBub2RlLnRvLFxyXG4gICAgICAgIHdoaXRlc3BhY2VCZWZvcmU6IGdldFdoaXRlc3BhY2VCZWZvcmVOb2RlKG5vZGUsIG1hcmtkb3duKSxcclxuICAgICAgICBjaGlsZHJlbjogW11cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gcGFyc2VDaGlsZHJlbihhc3ROb2RlLCBub2RlLCBtYXJrZG93bilcclxuICAgIH1cclxuICAgIGNhc2UgJ09yZGVyZWRMaXN0Jzoge1xyXG4gICAgICBjb25zdCBhc3ROb2RlOiBPcmRlcmVkTGlzdCA9IHtcclxuICAgICAgICB0eXBlOiAnT3JkZXJlZExpc3QnLFxyXG4gICAgICAgIHN0YXJ0c0F0OiAwLFxyXG4gICAgICAgIGRlbGltaXRlcjogJy4nLFxyXG4gICAgICAgIGxvb3NlOiBmYWxzZSwgLy8gVE9ET1xyXG4gICAgICAgIG5hbWU6IG5vZGUubmFtZSxcclxuICAgICAgICBmcm9tOiBub2RlLmZyb20sXHJcbiAgICAgICAgdG86IG5vZGUudG8sXHJcbiAgICAgICAgd2hpdGVzcGFjZUJlZm9yZTogZ2V0V2hpdGVzcGFjZUJlZm9yZU5vZGUobm9kZSwgbWFya2Rvd24pLFxyXG4gICAgICAgIGl0ZW1zOiBbXVxyXG4gICAgICB9XHJcblxyXG4gICAgICBmb3IgKGNvbnN0IGl0ZW0gb2Ygbm9kZS5nZXRDaGlsZHJlbignTGlzdEl0ZW0nKSkge1xyXG4gICAgICAgIGNvbnN0IGxpc3RJdGVtOiBMaXN0SXRlbSA9IHtcclxuICAgICAgICAgIHR5cGU6ICdMaXN0SXRlbScsXHJcbiAgICAgICAgICBuYW1lOiAnTGlzdEl0ZW0nLFxyXG4gICAgICAgICAgZnJvbTogaXRlbS5mcm9tLFxyXG4gICAgICAgICAgdG86IGl0ZW0udG8sXHJcbiAgICAgICAgICB3aGl0ZXNwYWNlQmVmb3JlOiBnZXRXaGl0ZXNwYWNlQmVmb3JlTm9kZShub2RlLCBtYXJrZG93biksXHJcbiAgICAgICAgICBjaGlsZHJlbjogW10sXHJcbiAgICAgICAgICBtYXJrZXI6IHsgZnJvbTogaXRlbS5mcm9tLCB0bzogaXRlbS5mcm9tIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGxpc3RNYXJrID0gaXRlbS5nZXRDaGlsZCgnTGlzdE1hcmsnKVxyXG4gICAgICAgIGlmIChsaXN0TWFyayAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgbGlzdEl0ZW0ubWFya2VyLmZyb20gPSBsaXN0TWFyay5mcm9tXHJcbiAgICAgICAgICBsaXN0SXRlbS5tYXJrZXIudG8gPSBsaXN0TWFyay50b1xyXG5cclxuICAgICAgICAgIGNvbnN0IG51bWJlciA9IHBhcnNlSW50KG1hcmtkb3duLnN1YnN0cmluZyhsaXN0TWFyay5mcm9tLCBsaXN0TWFyay50byAtIDEpLCAxMClcclxuICAgICAgICAgIGNvbnN0IGRlbGltID0gbWFya2Rvd24uc3Vic3RyaW5nKGxpc3RNYXJrLnRvIC0gMSwgbGlzdE1hcmsudG8pXHJcbiAgICAgICAgICBsaXN0SXRlbS5udW1iZXIgPSBudW1iZXJcclxuICAgICAgICAgIGlmIChhc3ROb2RlLnN0YXJ0c0F0IDwgMSkge1xyXG4gICAgICAgICAgICBhc3ROb2RlLnN0YXJ0c0F0ID0gbnVtYmVyXHJcbiAgICAgICAgICAgIGlmIChkZWxpbSA9PT0gJyknIHx8IGRlbGltID09PSAnLicpIHtcclxuICAgICAgICAgICAgICBhc3ROb2RlLmRlbGltaXRlciA9IGRlbGltXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElkZW50aWZ5IHBvdGVudGlhbCB0YXNrIGl0ZW1cclxuICAgICAgICBjb25zdCB0YXNrID0gaXRlbS5nZXRDaGlsZCgnVGFzaycpXHJcbiAgICAgICAgY29uc3QgdGFza01hcmtlciA9IHRhc2sgIT09IG51bGwgPyB0YXNrLmdldENoaWxkKCdUYXNrTWFya2VyJykgOiBudWxsXHJcbiAgICAgICAgaWYgKHRhc2tNYXJrZXIgIT09IG51bGwpIHtcclxuICAgICAgICAgIGNvbnN0IHRleHQgPSBtYXJrZG93bi5zdWJzdHJpbmcodGFza01hcmtlci5mcm9tLCB0YXNrTWFya2VyLnRvKVxyXG4gICAgICAgICAgbGlzdEl0ZW0uY2hlY2tlZCA9IHRleHQgPT09ICdbeF0nXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhc3ROb2RlLml0ZW1zLnB1c2gocGFyc2VDaGlsZHJlbihsaXN0SXRlbSwgaXRlbSwgbWFya2Rvd24pKVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gYXN0Tm9kZVxyXG4gICAgfVxyXG4gICAgY2FzZSAnQnVsbGV0TGlzdCc6IHtcclxuICAgICAgY29uc3QgYXN0Tm9kZTogQnVsbGV0TGlzdCA9IHtcclxuICAgICAgICB0eXBlOiAnQnVsbGV0TGlzdCcsXHJcbiAgICAgICAgc3ltYm9sOiAnLScsXHJcbiAgICAgICAgbG9vc2U6IGZhbHNlLCAvLyBUT0RPXHJcbiAgICAgICAgbmFtZTogbm9kZS5uYW1lLFxyXG4gICAgICAgIGZyb206IG5vZGUuZnJvbSxcclxuICAgICAgICB0bzogbm9kZS50byxcclxuICAgICAgICB3aGl0ZXNwYWNlQmVmb3JlOiBnZXRXaGl0ZXNwYWNlQmVmb3JlTm9kZShub2RlLCBtYXJrZG93biksXHJcbiAgICAgICAgaXRlbXM6IFtdXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBub2RlLmdldENoaWxkcmVuKCdMaXN0SXRlbScpKSB7XHJcbiAgICAgICAgY29uc3QgbGlzdEl0ZW06IExpc3RJdGVtID0ge1xyXG4gICAgICAgICAgdHlwZTogJ0xpc3RJdGVtJyxcclxuICAgICAgICAgIG5hbWU6ICdMaXN0SXRlbScsXHJcbiAgICAgICAgICBmcm9tOiBpdGVtLmZyb20sXHJcbiAgICAgICAgICB0bzogaXRlbS50byxcclxuICAgICAgICAgIHdoaXRlc3BhY2VCZWZvcmU6IGdldFdoaXRlc3BhY2VCZWZvcmVOb2RlKG5vZGUsIG1hcmtkb3duKSxcclxuICAgICAgICAgIGNoaWxkcmVuOiBbXSxcclxuICAgICAgICAgIG1hcmtlcjogeyBmcm9tOiBpdGVtLmZyb20sIHRvOiBpdGVtLmZyb20gfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgbGlzdE1hcmsgPSBpdGVtLmdldENoaWxkKCdMaXN0TWFyaycpXHJcbiAgICAgICAgaWYgKGxpc3RNYXJrICE9PSBudWxsKSB7XHJcbiAgICAgICAgICBsaXN0SXRlbS5tYXJrZXIuZnJvbSA9IGxpc3RNYXJrLmZyb21cclxuICAgICAgICAgIGxpc3RJdGVtLm1hcmtlci50byA9IGxpc3RNYXJrLnRvXHJcblxyXG4gICAgICAgICAgY29uc3Qgc3ltYm9sID0gbWFya2Rvd24uc3Vic3RyaW5nKGxpc3RNYXJrLmZyb20sIGxpc3RNYXJrLnRvKVxyXG4gICAgICAgICAgaWYgKHN5bWJvbCA9PT0gJy0nIHx8IHN5bWJvbCA9PT0gJysnIHx8IHN5bWJvbCA9PT0gJyonKSB7XHJcbiAgICAgICAgICAgIGFzdE5vZGUuc3ltYm9sID0gc3ltYm9sXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJZGVudGlmeSBwb3RlbnRpYWwgdGFzayBpdGVtXHJcbiAgICAgICAgY29uc3QgdGFzayA9IGl0ZW0uZ2V0Q2hpbGQoJ1Rhc2snKVxyXG4gICAgICAgIGNvbnN0IHRhc2tNYXJrZXIgPSB0YXNrICE9PSBudWxsID8gdGFzay5nZXRDaGlsZCgnVGFza01hcmtlcicpIDogbnVsbFxyXG4gICAgICAgIGlmICh0YXNrTWFya2VyICE9PSBudWxsKSB7XHJcbiAgICAgICAgICBjb25zdCB0ZXh0ID0gbWFya2Rvd24uc3Vic3RyaW5nKHRhc2tNYXJrZXIuZnJvbSwgdGFza01hcmtlci50bylcclxuICAgICAgICAgIGxpc3RJdGVtLmNoZWNrZWQgPSB0ZXh0ID09PSAnW3hdJ1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXN0Tm9kZS5pdGVtcy5wdXNoKHBhcnNlQ2hpbGRyZW4obGlzdEl0ZW0sIGl0ZW0sIG1hcmtkb3duKSlcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGFzdE5vZGVcclxuICAgIH1cclxuICAgIGNhc2UgJ0ZlbmNlZENvZGUnOlxyXG4gICAgY2FzZSAnQ29kZUJsb2NrJzoge1xyXG4gICAgICBsZXQgaW5mbyA9IG5vZGUuZ2V0Q2hpbGQoJ0NvZGVJbmZvJylcclxuICAgICAgY29uc3QgbWFyayA9IG5vZGUuZ2V0Q2hpbGQoJ0NvZGVNYXJrJylcclxuICAgICAgaWYgKG1hcmsgIT09IG51bGwpIHtcclxuICAgICAgICBjb25zdCBjb2RlTWFyayA9IG1hcmtkb3duLnN1YnN0cmluZyhtYXJrLmZyb20sIG1hcmsudG8pXHJcbiAgICAgICAgaWYgKGNvZGVNYXJrID09PSAnJCQnKSB7XHJcbiAgICAgICAgICAvLyBFeGNoYW5nZSB0aGUgKG5vbmV4aXN0ZW50KSBpbmZvc3RyaW5nIHdpdGggdGhlIGRvdWJsZS1kb2xsYXJzIHNvXHJcbiAgICAgICAgICAvLyB0aGF0IGNvbnN1bWVycyBjYW4gZGV0ZWN0IHRoYXQgdGhpcyBpcyBNYXRoVGV4XHJcbiAgICAgICAgICBpbmZvID0gbWFya1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBjb25zdCBzb3VyY2UgPSBub2RlLmdldENoaWxkKCdDb2RlVGV4dCcpXHJcbiAgICAgIGNvbnN0IGFzdE5vZGU6IEZlbmNlZENvZGUgPSB7XHJcbiAgICAgICAgdHlwZTogJ0ZlbmNlZENvZGUnLFxyXG4gICAgICAgIG5hbWU6ICdGZW5jZWRDb2RlJyxcclxuICAgICAgICBmcm9tOiBub2RlLmZyb20sXHJcbiAgICAgICAgdG86IG5vZGUudG8sXHJcbiAgICAgICAgd2hpdGVzcGFjZUJlZm9yZTogZ2V0V2hpdGVzcGFjZUJlZm9yZU5vZGUobm9kZSwgbWFya2Rvd24pLFxyXG4gICAgICAgIGluZm86IGluZm8gIT09IG51bGwgPyBtYXJrZG93bi5zdWJzdHJpbmcoaW5mby5mcm9tLCBpbmZvLnRvKSA6ICcnLFxyXG4gICAgICAgIHNvdXJjZTogc291cmNlICE9PSBudWxsID8gbWFya2Rvd24uc3Vic3RyaW5nKHNvdXJjZS5mcm9tLCBzb3VyY2UudG8pIDogJydcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gYXN0Tm9kZVxyXG4gICAgfVxyXG4gICAgY2FzZSAnWUFNTEZyb250bWF0dGVyJzoge1xyXG4gICAgICBjb25zdCBzb3VyY2UgPSBub2RlLmdldENoaWxkKCdDb2RlVGV4dCcpXHJcbiAgICAgIGNvbnN0IGFzdE5vZGU6IFlBTUxGcm9udG1hdHRlciA9IHtcclxuICAgICAgICB0eXBlOiAnWUFNTEZyb250bWF0dGVyJyxcclxuICAgICAgICBuYW1lOiAnWUFNTEZyb250bWF0dGVyJyxcclxuICAgICAgICBmcm9tOiBub2RlLmZyb20sXHJcbiAgICAgICAgdG86IG5vZGUudG8sXHJcbiAgICAgICAgd2hpdGVzcGFjZUJlZm9yZTogZ2V0V2hpdGVzcGFjZUJlZm9yZU5vZGUobm9kZSwgbWFya2Rvd24pLFxyXG4gICAgICAgIHNvdXJjZTogc291cmNlICE9PSBudWxsID8gbWFya2Rvd24uc3Vic3RyaW5nKHNvdXJjZS5mcm9tLCBzb3VyY2UudG8pIDogJydcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gYXN0Tm9kZVxyXG4gICAgfVxyXG4gICAgY2FzZSAnSW5saW5lQ29kZSc6IHtcclxuICAgICAgY29uc3QgWyBzdGFydCwgZW5kIF0gPSBub2RlLmdldENoaWxkcmVuKCdDb2RlTWFyaycpXHJcbiAgICAgIGNvbnN0IGFzdE5vZGU6IElubGluZUNvZGUgPSB7XHJcbiAgICAgICAgdHlwZTogJ0lubGluZUNvZGUnLFxyXG4gICAgICAgIG5hbWU6ICdJbmxpbmVDb2RlJyxcclxuICAgICAgICBmcm9tOiBub2RlLmZyb20sXHJcbiAgICAgICAgdG86IG5vZGUudG8sXHJcbiAgICAgICAgd2hpdGVzcGFjZUJlZm9yZTogZ2V0V2hpdGVzcGFjZUJlZm9yZU5vZGUobm9kZSwgbWFya2Rvd24pLFxyXG4gICAgICAgIHNvdXJjZTogbWFya2Rvd24uc3Vic3RyaW5nKHN0YXJ0LnRvLCBlbmQuZnJvbSlcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gYXN0Tm9kZVxyXG4gICAgfVxyXG4gICAgY2FzZSAnQ29tbWVudCc6XHJcbiAgICBjYXNlICdDb21tZW50QmxvY2snOiB7XHJcbiAgICAgIGNvbnN0IGFzdE5vZGU6IENvbW1lbnQgPSB7XHJcbiAgICAgICAgdHlwZTogJ0NvbW1lbnQnLFxyXG4gICAgICAgIG5hbWU6IG5vZGUubmFtZSxcclxuICAgICAgICBmcm9tOiBub2RlLmZyb20sXHJcbiAgICAgICAgdG86IG5vZGUudG8sXHJcbiAgICAgICAgd2hpdGVzcGFjZUJlZm9yZTogZ2V0V2hpdGVzcGFjZUJlZm9yZU5vZGUobm9kZSwgbWFya2Rvd24pLFxyXG4gICAgICAgIHZhbHVlOiBtYXJrZG93bi5zbGljZShub2RlLmZyb20gKyA0LCBub2RlLnRvIC0gMykudHJpbSgpIC8vIDwhLS0gYW5kIC0tPlxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBhc3ROb2RlXHJcbiAgICB9XHJcbiAgICBjYXNlICdFbXBoYXNpcyc6XHJcbiAgICBjYXNlICdTdHJvbmdFbXBoYXNpcyc6IHtcclxuICAgICAgY29uc3QgYXN0Tm9kZTogRW1waGFzaXMgPSB7XHJcbiAgICAgICAgdHlwZTogJ0VtcGhhc2lzJyxcclxuICAgICAgICBuYW1lOiAnRW1waGFzaXMnLFxyXG4gICAgICAgIHdoaWNoOiBub2RlLm5hbWUgPT09ICdFbXBoYXNpcycgPyAnaXRhbGljJyA6ICdib2xkJyxcclxuICAgICAgICBmcm9tOiBub2RlLmZyb20sXHJcbiAgICAgICAgdG86IG5vZGUudG8sXHJcbiAgICAgICAgd2hpdGVzcGFjZUJlZm9yZTogZ2V0V2hpdGVzcGFjZUJlZm9yZU5vZGUobm9kZSwgbWFya2Rvd24pLFxyXG4gICAgICAgIGNoaWxkcmVuOiBbXVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gcGFyc2VDaGlsZHJlbihhc3ROb2RlLCBub2RlLCBtYXJrZG93bilcclxuICAgIH1cclxuICAgIGNhc2UgJ1N1cGVyc2NyaXB0Jzoge1xyXG4gICAgICBjb25zdCBhc3ROb2RlOiBTdXBlcnNjcmlwdCA9IHtcclxuICAgICAgICB0eXBlOiAnU3VwZXJzY3JpcHQnLFxyXG4gICAgICAgIG5hbWU6ICdTdXBlcnNjcmlwdCcsXHJcbiAgICAgICAgZnJvbTogbm9kZS5mcm9tLFxyXG4gICAgICAgIHRvOiBub2RlLnRvLFxyXG4gICAgICAgIHdoaXRlc3BhY2VCZWZvcmU6IGdldFdoaXRlc3BhY2VCZWZvcmVOb2RlKG5vZGUsIG1hcmtkb3duKSxcclxuICAgICAgICBjaGlsZHJlbjogW11cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHBhcnNlQ2hpbGRyZW4oYXN0Tm9kZSwgbm9kZSwgbWFya2Rvd24pXHJcbiAgICB9XHJcbiAgICBjYXNlICdTdWJzY3JpcHQnOiB7XHJcbiAgICAgIGNvbnN0IGFzdE5vZGU6IFN1YnNjcmlwdCA9IHtcclxuICAgICAgICB0eXBlOiAnU3Vic2NyaXB0JyxcclxuICAgICAgICBuYW1lOiAnU3Vic2NyaXB0JyxcclxuICAgICAgICBmcm9tOiBub2RlLmZyb20sXHJcbiAgICAgICAgdG86IG5vZGUudG8sXHJcbiAgICAgICAgd2hpdGVzcGFjZUJlZm9yZTogZ2V0V2hpdGVzcGFjZUJlZm9yZU5vZGUobm9kZSwgbWFya2Rvd24pLFxyXG4gICAgICAgIGNoaWxkcmVuOiBbXVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gcGFyc2VDaGlsZHJlbihhc3ROb2RlLCBub2RlLCBtYXJrZG93bilcclxuICAgIH1cclxuICAgIGNhc2UgJ1RhYmxlJzpcclxuICAgICAgLy8gVGFibGVzIGFyZSBzb21ld2hhdCBjdW1iZXJzb21lIHRvIGNvbnZlcnQsIHNvIHdlIG91dHNvdXJjZSBpdCB0byBpdHMgb3duIGZ1bmN0aW9uXHJcbiAgICAgIHJldHVybiBwYXJzZVRhYmxlTm9kZShub2RlLCBtYXJrZG93bilcclxuICAgIGNhc2UgJ1prbkxpbmsnOiB7XHJcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSBub2RlLmdldENoaWxkKCdaa25MaW5rQ29udGVudCcpXHJcbiAgICAgIGlmIChjb250ZW50ID09PSBudWxsKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgcGFyc2Ugbm9kZSBaa25MaW5rOiBObyBaa25MaW5rQ29udGVudCBub2RlIGZvdW5kIHdpdGhpbiBjaGlsZHJlbiEnKVxyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IHRpdGxlID0gbm9kZS5nZXRDaGlsZCgnWmtuTGlua1RpdGxlJykgPz8gY29udGVudFxyXG4gICAgICBjb25zdCBhc3ROb2RlOiBaZXR0ZWxrYXN0ZW5MaW5rID0ge1xyXG4gICAgICAgIHR5cGU6ICdaZXR0ZWxrYXN0ZW5MaW5rJyxcclxuICAgICAgICBuYW1lOiAnWmtuTGluaycsXHJcbiAgICAgICAgZnJvbTogbm9kZS5mcm9tLFxyXG4gICAgICAgIHRvOiBub2RlLnRvLFxyXG4gICAgICAgIHdoaXRlc3BhY2VCZWZvcmU6IGdldFdoaXRlc3BhY2VCZWZvcmVOb2RlKG5vZGUsIG1hcmtkb3duKSxcclxuICAgICAgICB2YWx1ZTogbWFya2Rvd24uc3Vic3RyaW5nKGNvbnRlbnQuZnJvbSwgY29udGVudC50byksXHJcbiAgICAgICAgdGl0bGU6IGdlbmVyaWNUZXh0Tm9kZSh0aXRsZS5mcm9tLCB0aXRsZS50bywgbWFya2Rvd24uc3Vic3RyaW5nKHRpdGxlLmZyb20sIHRpdGxlLnRvKSlcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gYXN0Tm9kZVxyXG4gICAgfVxyXG4gICAgY2FzZSAnWmtuVGFnJzoge1xyXG4gICAgICBjb25zdCBhc3ROb2RlOiBaZXR0ZWxrYXN0ZW5UYWcgPSB7XHJcbiAgICAgICAgdHlwZTogJ1pldHRlbGthc3RlblRhZycsXHJcbiAgICAgICAgbmFtZTogJ1prblRhZycsXHJcbiAgICAgICAgZnJvbTogbm9kZS5mcm9tLFxyXG4gICAgICAgIHRvOiBub2RlLnRvLFxyXG4gICAgICAgIHdoaXRlc3BhY2VCZWZvcmU6IGdldFdoaXRlc3BhY2VCZWZvcmVOb2RlKG5vZGUsIG1hcmtkb3duKSxcclxuICAgICAgICB2YWx1ZTogbWFya2Rvd24uc3Vic3RyaW5nKG5vZGUuZnJvbSArIDEsIG5vZGUudG8pXHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGFzdE5vZGVcclxuICAgIH1cclxuICAgIGRlZmF1bHQ6IHtcclxuICAgICAgY29uc3QgYXN0Tm9kZTogR2VuZXJpY05vZGUgPSB7XHJcbiAgICAgICAgdHlwZTogJ0dlbmVyaWMnLFxyXG4gICAgICAgIG5hbWU6IG5vZGUubmFtZSxcclxuICAgICAgICBmcm9tOiBub2RlLmZyb20sXHJcbiAgICAgICAgdG86IG5vZGUudG8sXHJcbiAgICAgICAgd2hpdGVzcGFjZUJlZm9yZTogZ2V0V2hpdGVzcGFjZUJlZm9yZU5vZGUobm9kZSwgbWFya2Rvd24pLFxyXG4gICAgICAgIGNoaWxkcmVuOiBbXVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBwYXJzZUNoaWxkcmVuKGFzdE5vZGUsIG5vZGUsIG1hcmtkb3duKVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0="]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"fd987ac6aabb9f1f9b058682665ef2c07c455727","contentHash":"adc8daaae1c2aea6a47ce7583a0a1e9a91b19b0b2004a682c60ed3b1255b21c0"},"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-utils\\markdown-ast\\parse-table-node.ts":{"path":"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-utils\\markdown-ast\\parse-table-node.ts","statementMap":{"0":{"start":{"line":18,"column":0},"end":{"line":18,"column":62}},"1":{"start":{"line":19,"column":0},"end":{"line":19,"column":40}},"2":{"start":{"line":20,"column":37},"end":{"line":20,"column":76}},"3":{"start":{"line":21,"column":25},"end":{"line":21,"column":52}},"4":{"start":{"line":22,"column":28},"end":{"line":22,"column":58}},"5":{"start":{"line":32,"column":20},"end":{"line":39,"column":5}},"6":{"start":{"line":40,"column":19},"end":{"line":40,"column":50}},"7":{"start":{"line":41,"column":17},"end":{"line":41,"column":45}},"8":{"start":{"line":46,"column":4},"end":{"line":80,"column":5}},"9":{"start":{"line":47,"column":8},"end":{"line":49,"column":9}},"10":{"start":{"line":48,"column":12},"end":{"line":48,"column":21}},"11":{"start":{"line":51,"column":8},"end":{"line":56,"column":9}},"12":{"start":{"line":52,"column":12},"end":{"line":52,"column":39}},"13":{"start":{"line":55,"column":12},"end":{"line":55,"column":39}},"14":{"start":{"line":58,"column":25},"end":{"line":58,"column":55}},"15":{"start":{"line":59,"column":8},"end":{"line":78,"column":11}},"16":{"start":{"line":61,"column":25},"end":{"line":61,"column":37}},"17":{"start":{"line":63,"column":12},"end":{"line":65,"column":13}},"18":{"start":{"line":64,"column":16},"end":{"line":64,"column":35}},"19":{"start":{"line":66,"column":12},"end":{"line":68,"column":13}},"20":{"start":{"line":67,"column":16},"end":{"line":67,"column":49}},"21":{"start":{"line":69,"column":12},"end":{"line":77,"column":13}},"22":{"start":{"line":70,"column":16},"end":{"line":70,"column":32}},"23":{"start":{"line":72,"column":17},"end":{"line":77,"column":13}},"24":{"start":{"line":73,"column":16},"end":{"line":73,"column":31}},"25":{"start":{"line":76,"column":16},"end":{"line":76,"column":30}},"26":{"start":{"line":79,"column":8},"end":{"line":79,"column":14}},"27":{"start":{"line":82,"column":4},"end":{"line":154,"column":5}},"28":{"start":{"line":83,"column":24},"end":{"line":91,"column":9}},"29":{"start":{"line":98,"column":19},"end":{"line":98,"column":33}},"30":{"start":{"line":99,"column":23},"end":{"line":99,"column":28}},"31":{"start":{"line":100,"column":8},"end":{"line":140,"column":9}},"32":{"start":{"line":101,"column":12},"end":{"line":138,"column":13}},"33":{"start":{"line":102,"column":16},"end":{"line":102,"column":32}},"34":{"start":{"line":104,"column":17},"end":{"line":138,"column":13}},"35":{"start":{"line":106,"column":29},"end":{"line":106,"column":45}},"36":{"start":{"line":107,"column":33},"end":{"line":117,"column":17}},"37":{"start":{"line":118,"column":16},"end":{"line":118,"column":45}},"38":{"start":{"line":119,"column":16},"end":{"line":119,"column":33}},"39":{"start":{"line":121,"column":17},"end":{"line":138,"column":13}},"40":{"start":{"line":123,"column":33},"end":{"line":130,"column":17}},"41":{"start":{"line":131,"column":16},"end":{"line":131,"column":78}},"42":{"start":{"line":132,"column":16},"end":{"line":132,"column":45}},"43":{"start":{"line":133,"column":16},"end":{"line":133,"column":33}},"44":{"start":{"line":136,"column":16},"end":{"line":136,"column":105}},"45":{"start":{"line":137,"column":16},"end":{"line":137,"column":33}},"46":{"start":{"line":139,"column":12},"end":{"line":139,"column":36}},"47":{"start":{"line":145,"column":8},"end":{"line":152,"column":9}},"48":{"start":{"line":146,"column":12},"end":{"line":151,"column":13}},"49":{"start":{"line":148,"column":16},"end":{"line":148,"column":85}},"50":{"start":{"line":149,"column":16},"end":{"line":149,"column":47}},"51":{"start":{"line":150,"column":16},"end":{"line":150,"column":35}},"52":{"start":{"line":153,"column":8},"end":{"line":153,"column":35}},"53":{"start":{"line":155,"column":4},"end":{"line":155,"column":19}}},"fnMap":{"0":{"name":"parseTableNode","decl":{"start":{"line":31,"column":9},"end":{"line":31,"column":23}},"loc":{"start":{"line":31,"column":40},"end":{"line":156,"column":1}},"line":31},"1":{"name":"(anonymous_1)","decl":{"start":{"line":61,"column":20},"end":{"line":61,"column":21}},"loc":{"start":{"line":61,"column":25},"end":{"line":61,"column":37}},"line":61},"2":{"name":"(anonymous_2)","decl":{"start":{"line":62,"column":17},"end":{"line":62,"column":18}},"loc":{"start":{"line":62,"column":22},"end":{"line":78,"column":9}},"line":62}},"branchMap":{"0":{"loc":{"start":{"line":47,"column":8},"end":{"line":49,"column":9}},"type":"if","locations":[{"start":{"line":47,"column":8},"end":{"line":49,"column":9}},{"start":{},"end":{}}],"line":47},"1":{"loc":{"start":{"line":51,"column":8},"end":{"line":56,"column":9}},"type":"if","locations":[{"start":{"line":51,"column":8},"end":{"line":56,"column":9}},{"start":{"line":54,"column":13},"end":{"line":56,"column":9}}],"line":51},"2":{"loc":{"start":{"line":58,"column":25},"end":{"line":58,"column":55}},"type":"cond-expr","locations":[{"start":{"line":58,"column":46},"end":{"line":58,"column":49}},{"start":{"line":58,"column":52},"end":{"line":58,"column":55}}],"line":58},"3":{"loc":{"start":{"line":63,"column":12},"end":{"line":65,"column":13}},"type":"if","locations":[{"start":{"line":63,"column":12},"end":{"line":65,"column":13}},{"start":{},"end":{}}],"line":63},"4":{"loc":{"start":{"line":66,"column":12},"end":{"line":68,"column":13}},"type":"if","locations":[{"start":{"line":66,"column":12},"end":{"line":68,"column":13}},{"start":{},"end":{}}],"line":66},"5":{"loc":{"start":{"line":69,"column":12},"end":{"line":77,"column":13}},"type":"if","locations":[{"start":{"line":69,"column":12},"end":{"line":77,"column":13}},{"start":{"line":72,"column":17},"end":{"line":77,"column":13}}],"line":69},"6":{"loc":{"start":{"line":69,"column":16},"end":{"line":69,"column":52}},"type":"binary-expr","locations":[{"start":{"line":69,"column":16},"end":{"line":69,"column":33}},{"start":{"line":69,"column":37},"end":{"line":69,"column":52}}],"line":69},"7":{"loc":{"start":{"line":72,"column":17},"end":{"line":77,"column":13}},"type":"if","locations":[{"start":{"line":72,"column":17},"end":{"line":77,"column":13}},{"start":{"line":75,"column":17},"end":{"line":77,"column":13}}],"line":72},"8":{"loc":{"start":{"line":101,"column":12},"end":{"line":138,"column":13}},"type":"if","locations":[{"start":{"line":101,"column":12},"end":{"line":138,"column":13}},{"start":{"line":104,"column":17},"end":{"line":138,"column":13}}],"line":101},"9":{"loc":{"start":{"line":101,"column":16},"end":{"line":101,"column":59}},"type":"binary-expr","locations":[{"start":{"line":101,"column":16},"end":{"line":101,"column":46}},{"start":{"line":101,"column":50},"end":{"line":101,"column":59}}],"line":101},"10":{"loc":{"start":{"line":104,"column":17},"end":{"line":138,"column":13}},"type":"if","locations":[{"start":{"line":104,"column":17},"end":{"line":138,"column":13}},{"start":{"line":121,"column":17},"end":{"line":138,"column":13}}],"line":104},"11":{"loc":{"start":{"line":104,"column":21},"end":{"line":104,"column":63}},"type":"binary-expr","locations":[{"start":{"line":104,"column":21},"end":{"line":104,"column":51}},{"start":{"line":104,"column":55},"end":{"line":104,"column":63}}],"line":104},"12":{"loc":{"start":{"line":121,"column":17},"end":{"line":138,"column":13}},"type":"if","locations":[{"start":{"line":121,"column":17},"end":{"line":138,"column":13}},{"start":{"line":135,"column":17},"end":{"line":138,"column":13}}],"line":121},"13":{"loc":{"start":{"line":146,"column":12},"end":{"line":151,"column":13}},"type":"if","locations":[{"start":{"line":146,"column":12},"end":{"line":151,"column":13}},{"start":{},"end":{}}],"line":146},"14":{"loc":{"start":{"line":146,"column":16},"end":{"line":147,"column":98}},"type":"binary-expr","locations":[{"start":{"line":146,"column":16},"end":{"line":146,"column":44}},{"start":{"line":146,"column":48},"end":{"line":146,"column":76}},{"start":{"line":147,"column":16},"end":{"line":147,"column":52}},{"start":{"line":147,"column":56},"end":{"line":147,"column":98}}],"line":146}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0},"f":{"0":0,"1":0,"2":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0,0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-utils/markdown-ast/parse-table-node.ts","sources":["C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-utils/markdown-ast/parse-table-node.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @ignore\n * BEGIN HEADER\n *\n * Contains:        parseTableNode\n * CVM-Role:        Utility\n * Maintainer:      Hendrik Erz\n * License:         GNU GPL v3\n *\n * Description:     Since table node parsing is very complex as the\n *                  corresponding lezer parser is intentionally \"dumb\" (likely\n *                  to increase parser speed), parsing tables requires a lot of\n *                  code which is why this function has been externalized.\n *\n * END HEADER\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseTableNode = parseTableNode;\nconst get_whitespace_before_node_1 = require(\"./get-whitespace-before-node\");\nconst parse_children_1 = require(\"./parse-children\");\nconst generic_text_node_1 = require(\"./generic-text-node\");\n/**\n * Parses a SyntaxNode of name \"Table\"\n *\n * @param   {SyntaxNode}  node      The node to parse\n * @param   {string}      markdown  The original Markdown source\n *\n * @return  {Table}                 The parsed Table AST node\n */\nfunction parseTableNode(node, markdown) {\n    const astNode = {\n        type: 'Table',\n        name: 'Table',\n        from: node.from,\n        to: node.to,\n        whitespaceBefore: (0, get_whitespace_before_node_1.getWhitespaceBeforeNode)(node, markdown),\n        rows: []\n    };\n    const header = node.getChildren('TableHeader');\n    const rows = node.getChildren('TableRow');\n    // The parser cannot reliably extract the table delimiters, but we need\n    // those for the column alignment. Thus, we need to see if we can find the\n    // header row (pipe tables) or a delimiter row (grid tables) in order to\n    // determine the column alignments.\n    for (const line of markdown.substring(node.from, node.to).split('\\n')) {\n        if (!/^[|+:-]+$/.test(line)) {\n            continue;\n        }\n        // Gotcha.\n        if (line.includes('|')) {\n            astNode.tableType = 'pipe';\n        }\n        else {\n            astNode.tableType = 'grid';\n        }\n        // The plus indicates a special Pandoc-type of pipe table\n        const splitter = line.includes('+') ? '+' : '|';\n        astNode.alignment = line.split(splitter)\n            // NOTE: |-|-| will result in ['', '-', '-', ''] -> filter out\n            .filter(c => c.length > 0)\n            .map(c => {\n            if (c.startsWith('|')) {\n                c = c.substring(1);\n            }\n            if (c.endsWith('|')) {\n                c = c.substring(0, c.length - 1);\n            }\n            if (c.startsWith(':') && c.endsWith(':')) {\n                return 'center';\n            }\n            else if (c.endsWith(':')) {\n                return 'right';\n            }\n            else {\n                return 'left';\n            }\n        });\n        break;\n    } // Else: Couldn't determine either column alignment nor table type\n    // Now, transform the rows.\n    for (const row of [...header, ...rows]) {\n        const rowNode = {\n            type: 'TableRow',\n            name: row.name,\n            from: row.from,\n            to: row.to,\n            whitespaceBefore: '',\n            isHeaderOrFooter: row.name === 'TableHeader',\n            cells: []\n        };\n        // NOTE: The Lezer parser intentionally does not emit TableCell nodes for\n        // empty cells, so we cannot fully rely on the existence of table cells. See:\n        // https://github.com/lezer-parser/markdown/issues/23\n        // Thus, we have to manually move through the line one by one. If a\n        // TableDelimiter is followed by another TableDelimiter, we know that there\n        // is an empty cell in between.\n        let next = row.firstChild;\n        let wasDelim = false;\n        while (next !== null) {\n            if (next.name === 'TableDelimiter' && !wasDelim) {\n                wasDelim = true;\n            }\n            else if (next.name === 'TableDelimiter' && wasDelim) {\n                // Last iteration was a TableDelimiter, and now again --> Empty cell\n                const prev = next.prevSibling;\n                const cellNode = {\n                    type: 'TableCell',\n                    name: 'TableCell',\n                    from: prev.to,\n                    to: next.from,\n                    whitespaceBefore: '',\n                    // Has no real children; here we basically just account for any whitespace\n                    children: [\n                        (0, generic_text_node_1.genericTextNode)(prev.to, next.from, markdown.slice(prev.to, next.from))\n                    ]\n                };\n                rowNode.cells.push(cellNode);\n                wasDelim = false;\n            }\n            else if (next.name === 'TableCell') {\n                // Functional table cell\n                const cellNode = {\n                    type: 'TableCell',\n                    name: 'TableCell',\n                    from: next.from,\n                    to: next.to,\n                    whitespaceBefore: '',\n                    children: []\n                };\n                (0, parse_children_1.parseChildren)(cellNode, next, markdown);\n                rowNode.cells.push(cellNode);\n                wasDelim = false;\n            }\n            else {\n                console.warn(`Could not fully parse Table node: Unexpected node \"${next.name}\" in row.`);\n                wasDelim = false;\n            }\n            next = next.nextSibling;\n        }\n        // Special case handling: The Lezer parser unfortunately is a bit sloppy\n        // when it comes to grid table parsing and often includes the delimiting\n        // pipes between cells as part of the TableCell nodes. Here we account for\n        // that and remove that pipe if applicable.\n        for (const cellNode of rowNode.cells) {\n            if (astNode.tableType === 'grid' && cellNode.children.length > 0 &&\n                cellNode.children[0].type === 'Text' && cellNode.children[0].value.startsWith('|')) {\n                cellNode.children[0].value = cellNode.children[0].value.substring(1);\n                cellNode.children[0].from += 1;\n                cellNode.from += 1;\n            }\n        }\n        astNode.rows.push(rowNode);\n    }\n    return astNode;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"04aa05bf3ea5912023e996cab2318d37ffdf6751","contentHash":"244bfceaa08015848168d284b1c98d20b15fd4218a7c3fc891b609f27ff5be0b"},"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-utils\\markdown-ast\\get-whitespace-before-node.ts":{"path":"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-utils\\markdown-ast\\get-whitespace-before-node.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":58}},"2":{"start":{"line":29,"column":4},"end":{"line":41,"column":5}},"3":{"start":{"line":30,"column":28},"end":{"line":30,"column":78}},"4":{"start":{"line":31,"column":31},"end":{"line":31,"column":58}},"5":{"start":{"line":32,"column":8},"end":{"line":32,"column":64}},"6":{"start":{"line":34,"column":9},"end":{"line":41,"column":5}},"7":{"start":{"line":35,"column":28},"end":{"line":35,"column":75}},"8":{"start":{"line":36,"column":31},"end":{"line":36,"column":58}},"9":{"start":{"line":37,"column":8},"end":{"line":37,"column":64}},"10":{"start":{"line":40,"column":8},"end":{"line":40,"column":18}}},"fnMap":{"0":{"name":"getWhitespaceBeforeNode","decl":{"start":{"line":28,"column":9},"end":{"line":28,"column":32}},"loc":{"start":{"line":28,"column":49},"end":{"line":42,"column":1}},"line":28}},"branchMap":{"0":{"loc":{"start":{"line":29,"column":4},"end":{"line":41,"column":5}},"type":"if","locations":[{"start":{"line":29,"column":4},"end":{"line":41,"column":5}},{"start":{"line":34,"column":9},"end":{"line":41,"column":5}}],"line":29},"1":{"loc":{"start":{"line":32,"column":15},"end":{"line":32,"column":63}},"type":"cond-expr","locations":[{"start":{"line":32,"column":41},"end":{"line":32,"column":58}},{"start":{"line":32,"column":61},"end":{"line":32,"column":63}}],"line":32},"2":{"loc":{"start":{"line":34,"column":9},"end":{"line":41,"column":5}},"type":"if","locations":[{"start":{"line":34,"column":9},"end":{"line":41,"column":5}},{"start":{"line":39,"column":9},"end":{"line":41,"column":5}}],"line":34},"3":{"loc":{"start":{"line":37,"column":15},"end":{"line":37,"column":63}},"type":"cond-expr","locations":[{"start":{"line":37,"column":41},"end":{"line":37,"column":58}},{"start":{"line":37,"column":61},"end":{"line":37,"column":63}}],"line":37}},"s":{"0":1,"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"f":{"0":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-utils/markdown-ast/get-whitespace-before-node.ts","sources":["C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-utils/markdown-ast/get-whitespace-before-node.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb;;;;;;;;;;;;;;GAcG;AACH,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9D,OAAO,CAAC,uBAAuB,GAAG,uBAAuB,CAAC;AAC1D;;;;;;;;GAQG;AACH,SAAS,uBAAuB,CAAC,IAAI,EAAE,QAAQ;IAC3C,IAAI,IAAI,CAAC,WAAW,KAAK,IAAI,EAAE,CAAC;QAC5B,MAAM,WAAW,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QACvE,MAAM,cAAc,GAAG,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,oBAAoB;QACxE,OAAO,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAC5D,CAAC;SACI,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,EAAE,CAAC;QAC5B,MAAM,WAAW,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QACpE,MAAM,cAAc,GAAG,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,oBAAoB;QACxE,OAAO,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAC5D,CAAC;SACI,CAAC;QACF,OAAO,EAAE,CAAC;IACd,CAAC;AACL,CAAC","sourcesContent":["\"use strict\";\n/**\n * @ignore\n * BEGIN HEADER\n *\n * Contains:        getWhitespaceBeforeNode\n * CVM-Role:        Utility\n * Maintainer:      Hendrik Erz\n * License:         GNU GPL v3\n *\n * Description:     Takes a SyntaxNode and returns any whitespace that preceeds\n *                  the node. This is important since whitespace can be\n *                  significant; especially when building HTML.\n *\n * END HEADER\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getWhitespaceBeforeNode = getWhitespaceBeforeNode;\n/**\n * Extracts any amount of whitespace (\\t\\s\\n\\r\\f\\v, etc.) that occurs before\n * this node.\n *\n * @param   {SyntaxNode}  node      The node to extract whitespace for\n * @param   {string}      markdown  The Markdown source to extract the whitespace\n *\n * @return  {string}                The whitespace string\n */\nfunction getWhitespaceBeforeNode(node, markdown) {\n    if (node.prevSibling !== null) {\n        const sliceBefore = markdown.substring(node.prevSibling.to, node.from);\n        const onlyWhitespace = /(\\s*)$/m.exec(sliceBefore); // NOTE the \"m\" flag\n        return onlyWhitespace !== null ? onlyWhitespace[1] : '';\n    }\n    else if (node.parent !== null) {\n        const sliceBefore = markdown.substring(node.parent.from, node.from);\n        const onlyWhitespace = /(\\s*)$/m.exec(sliceBefore); // NOTE the \"m\" flag\n        return onlyWhitespace !== null ? onlyWhitespace[1] : '';\n    }\n    else {\n        return '';\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzovVXNlcnMvSm9zaCBFL0RvY3VtZW50cy9aZXR0bHItc3dlbmc0MzEvc291cmNlL2NvbW1vbi9tb2R1bGVzL21hcmtkb3duLXV0aWxzL21hcmtkb3duLWFzdC9nZXQtd2hpdGVzcGFjZS1iZWZvcmUtbm9kZS50cyIsInNvdXJjZXMiOlsiQzovVXNlcnMvSm9zaCBFL0RvY3VtZW50cy9aZXR0bHItc3dlbmc0MzEvc291cmNlL2NvbW1vbi9tb2R1bGVzL21hcmtkb3duLXV0aWxzL21hcmtkb3duLWFzdC9nZXQtd2hpdGVzcGFjZS1iZWZvcmUtbm9kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7O0dBY0c7O0FBYUgsMERBWUM7QUFyQkQ7Ozs7Ozs7O0dBUUc7QUFDSCxTQUFnQix1QkFBdUIsQ0FBRSxJQUFnQixFQUFFLFFBQWdCO0lBQ3pFLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxJQUFJLEVBQUUsQ0FBQztRQUM5QixNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUN0RSxNQUFNLGNBQWMsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBLENBQUMsb0JBQW9CO1FBQ3ZFLE9BQU8sY0FBYyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUE7SUFDekQsQ0FBQztTQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxJQUFJLEVBQUUsQ0FBQztRQUNoQyxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNuRSxNQUFNLGNBQWMsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBLENBQUMsb0JBQW9CO1FBQ3ZFLE9BQU8sY0FBYyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUE7SUFDekQsQ0FBQztTQUFNLENBQUM7UUFDTixPQUFPLEVBQUUsQ0FBQTtJQUNYLENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBpZ25vcmVcclxuICogQkVHSU4gSEVBREVSXHJcbiAqXHJcbiAqIENvbnRhaW5zOiAgICAgICAgZ2V0V2hpdGVzcGFjZUJlZm9yZU5vZGVcclxuICogQ1ZNLVJvbGU6ICAgICAgICBVdGlsaXR5XHJcbiAqIE1haW50YWluZXI6ICAgICAgSGVuZHJpayBFcnpcclxuICogTGljZW5zZTogICAgICAgICBHTlUgR1BMIHYzXHJcbiAqXHJcbiAqIERlc2NyaXB0aW9uOiAgICAgVGFrZXMgYSBTeW50YXhOb2RlIGFuZCByZXR1cm5zIGFueSB3aGl0ZXNwYWNlIHRoYXQgcHJlY2VlZHNcclxuICogICAgICAgICAgICAgICAgICB0aGUgbm9kZS4gVGhpcyBpcyBpbXBvcnRhbnQgc2luY2Ugd2hpdGVzcGFjZSBjYW4gYmVcclxuICogICAgICAgICAgICAgICAgICBzaWduaWZpY2FudDsgZXNwZWNpYWxseSB3aGVuIGJ1aWxkaW5nIEhUTUwuXHJcbiAqXHJcbiAqIEVORCBIRUFERVJcclxuICovXHJcblxyXG5pbXBvcnQgeyB0eXBlIFN5bnRheE5vZGUgfSBmcm9tICdAbGV6ZXIvY29tbW9uJ1xyXG5cclxuLyoqXHJcbiAqIEV4dHJhY3RzIGFueSBhbW91bnQgb2Ygd2hpdGVzcGFjZSAoXFx0XFxzXFxuXFxyXFxmXFx2LCBldGMuKSB0aGF0IG9jY3VycyBiZWZvcmVcclxuICogdGhpcyBub2RlLlxyXG4gKlxyXG4gKiBAcGFyYW0gICB7U3ludGF4Tm9kZX0gIG5vZGUgICAgICBUaGUgbm9kZSB0byBleHRyYWN0IHdoaXRlc3BhY2UgZm9yXHJcbiAqIEBwYXJhbSAgIHtzdHJpbmd9ICAgICAgbWFya2Rvd24gIFRoZSBNYXJrZG93biBzb3VyY2UgdG8gZXh0cmFjdCB0aGUgd2hpdGVzcGFjZVxyXG4gKlxyXG4gKiBAcmV0dXJuICB7c3RyaW5nfSAgICAgICAgICAgICAgICBUaGUgd2hpdGVzcGFjZSBzdHJpbmdcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRXaGl0ZXNwYWNlQmVmb3JlTm9kZSAobm9kZTogU3ludGF4Tm9kZSwgbWFya2Rvd246IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgaWYgKG5vZGUucHJldlNpYmxpbmcgIT09IG51bGwpIHtcclxuICAgIGNvbnN0IHNsaWNlQmVmb3JlID0gbWFya2Rvd24uc3Vic3RyaW5nKG5vZGUucHJldlNpYmxpbmcudG8sIG5vZGUuZnJvbSlcclxuICAgIGNvbnN0IG9ubHlXaGl0ZXNwYWNlID0gLyhcXHMqKSQvbS5leGVjKHNsaWNlQmVmb3JlKSAvLyBOT1RFIHRoZSBcIm1cIiBmbGFnXHJcbiAgICByZXR1cm4gb25seVdoaXRlc3BhY2UgIT09IG51bGwgPyBvbmx5V2hpdGVzcGFjZVsxXSA6ICcnXHJcbiAgfSBlbHNlIGlmIChub2RlLnBhcmVudCAhPT0gbnVsbCkge1xyXG4gICAgY29uc3Qgc2xpY2VCZWZvcmUgPSBtYXJrZG93bi5zdWJzdHJpbmcobm9kZS5wYXJlbnQuZnJvbSwgbm9kZS5mcm9tKVxyXG4gICAgY29uc3Qgb25seVdoaXRlc3BhY2UgPSAvKFxccyopJC9tLmV4ZWMoc2xpY2VCZWZvcmUpIC8vIE5PVEUgdGhlIFwibVwiIGZsYWdcclxuICAgIHJldHVybiBvbmx5V2hpdGVzcGFjZSAhPT0gbnVsbCA/IG9ubHlXaGl0ZXNwYWNlWzFdIDogJydcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuICcnXHJcbiAgfVxyXG59XHJcbiJdfQ=="]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"e2face5f510b105c35dd750af67f1fedce12660b","contentHash":"45e65336f3f1d500e3332e7b81d8feacd27c06b3eeeef73bd1cdad158de9b978"},"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-utils\\markdown-ast\\parse-children.ts":{"path":"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-utils\\markdown-ast\\parse-children.ts","statementMap":{"0":{"start":{"line":16,"column":0},"end":{"line":16,"column":62}},"1":{"start":{"line":17,"column":0},"end":{"line":17,"column":38}},"2":{"start":{"line":18,"column":23},"end":{"line":18,"column":49}},"3":{"start":{"line":19,"column":37},"end":{"line":19,"column":76}},"4":{"start":{"line":20,"column":28},"end":{"line":20,"column":58}},"5":{"start":{"line":29,"column":20},"end":{"line":44,"column":1}},"6":{"start":{"line":56,"column":4},"end":{"line":58,"column":5}},"7":{"start":{"line":57,"column":8},"end":{"line":57,"column":29}},"8":{"start":{"line":59,"column":22},"end":{"line":59,"column":68}},"9":{"start":{"line":60,"column":26},"end":{"line":60,"column":48}},"10":{"start":{"line":62,"column":4},"end":{"line":84,"column":5}},"11":{"start":{"line":63,"column":8},"end":{"line":83,"column":9}},"12":{"start":{"line":65,"column":12},"end":{"line":70,"column":13}},"13":{"start":{"line":66,"column":16},"end":{"line":66,"column":89}},"14":{"start":{"line":69,"column":16},"end":{"line":69,"column":61}},"15":{"start":{"line":72,"column":13},"end":{"line":83,"column":9}},"16":{"start":{"line":74,"column":12},"end":{"line":74,"column":54}},"17":{"start":{"line":76,"column":13},"end":{"line":83,"column":9}},"18":{"start":{"line":79,"column":26},"end":{"line":79,"column":46}},"19":{"start":{"line":80,"column":12},"end":{"line":82,"column":13}},"20":{"start":{"line":81,"column":16},"end":{"line":81,"column":51}},"21":{"start":{"line":85,"column":4},"end":{"line":85,"column":25}},"22":{"start":{"line":97,"column":4},"end":{"line":103,"column":5}},"23":{"start":{"line":98,"column":8},"end":{"line":101,"column":9}},"24":{"start":{"line":99,"column":29},"end":{"line":99,"column":204}},"25":{"start":{"line":100,"column":12},"end":{"line":100,"column":42}},"26":{"start":{"line":102,"column":8},"end":{"line":102,"column":23}},"27":{"start":{"line":104,"column":4},"end":{"line":104,"column":26}},"28":{"start":{"line":105,"column":23},"end":{"line":105,"column":38}},"29":{"start":{"line":106,"column":23},"end":{"line":106,"column":32}},"30":{"start":{"line":107,"column":4},"end":{"line":131,"column":5}},"31":{"start":{"line":111,"column":8},"end":{"line":117,"column":9}},"32":{"start":{"line":112,"column":24},"end":{"line":112,"column":75}},"33":{"start":{"line":113,"column":35},"end":{"line":113,"column":54}},"34":{"start":{"line":114,"column":37},"end":{"line":114,"column":85}},"35":{"start":{"line":115,"column":29},"end":{"line":115,"column":160}},"36":{"start":{"line":116,"column":12},"end":{"line":116,"column":44}},"37":{"start":{"line":118,"column":8},"end":{"line":128,"column":9}},"38":{"start":{"line":124,"column":12},"end":{"line":124,"column":96}},"39":{"start":{"line":127,"column":12},"end":{"line":127,"column":89}},"40":{"start":{"line":129,"column":8},"end":{"line":129,"column":39}},"41":{"start":{"line":130,"column":8},"end":{"line":130,"column":48}},"42":{"start":{"line":132,"column":4},"end":{"line":136,"column":5}},"43":{"start":{"line":134,"column":25},"end":{"line":134,"column":131}},"44":{"start":{"line":135,"column":8},"end":{"line":135,"column":40}},"45":{"start":{"line":137,"column":4},"end":{"line":137,"column":19}}},"fnMap":{"0":{"name":"parseAttributeNode","decl":{"start":{"line":55,"column":9},"end":{"line":55,"column":27}},"loc":{"start":{"line":55,"column":64},"end":{"line":86,"column":1}},"line":55},"1":{"name":"parseChildren","decl":{"start":{"line":96,"column":9},"end":{"line":96,"column":22}},"loc":{"start":{"line":96,"column":48},"end":{"line":138,"column":1}},"line":96}},"branchMap":{"0":{"loc":{"start":{"line":55,"column":28},"end":{"line":55,"column":46}},"type":"default-arg","locations":[{"start":{"line":55,"column":44},"end":{"line":55,"column":46}}],"line":55},"1":{"loc":{"start":{"line":56,"column":4},"end":{"line":58,"column":5}},"type":"if","locations":[{"start":{"line":56,"column":4},"end":{"line":58,"column":5}},{"start":{},"end":{}}],"line":56},"2":{"loc":{"start":{"line":63,"column":8},"end":{"line":83,"column":9}},"type":"if","locations":[{"start":{"line":63,"column":8},"end":{"line":83,"column":9}},{"start":{"line":72,"column":13},"end":{"line":83,"column":9}}],"line":63},"3":{"loc":{"start":{"line":65,"column":12},"end":{"line":70,"column":13}},"type":"if","locations":[{"start":{"line":65,"column":12},"end":{"line":70,"column":13}},{"start":{"line":68,"column":17},"end":{"line":70,"column":13}}],"line":65},"4":{"loc":{"start":{"line":72,"column":13},"end":{"line":83,"column":9}},"type":"if","locations":[{"start":{"line":72,"column":13},"end":{"line":83,"column":9}},{"start":{"line":76,"column":13},"end":{"line":83,"column":9}}],"line":72},"5":{"loc":{"start":{"line":72,"column":17},"end":{"line":72,"column":70}},"type":"binary-expr","locations":[{"start":{"line":72,"column":17},"end":{"line":72,"column":42}},{"start":{"line":72,"column":46},"end":{"line":72,"column":70}}],"line":72},"6":{"loc":{"start":{"line":76,"column":13},"end":{"line":83,"column":9}},"type":"if","locations":[{"start":{"line":76,"column":13},"end":{"line":83,"column":9}},{"start":{},"end":{}}],"line":76},"7":{"loc":{"start":{"line":80,"column":12},"end":{"line":82,"column":13}},"type":"if","locations":[{"start":{"line":80,"column":12},"end":{"line":82,"column":13}},{"start":{},"end":{}}],"line":80},"8":{"loc":{"start":{"line":97,"column":4},"end":{"line":103,"column":5}},"type":"if","locations":[{"start":{"line":97,"column":4},"end":{"line":103,"column":5}},{"start":{},"end":{}}],"line":97},"9":{"loc":{"start":{"line":98,"column":8},"end":{"line":101,"column":9}},"type":"if","locations":[{"start":{"line":98,"column":8},"end":{"line":101,"column":9}},{"start":{},"end":{}}],"line":98},"10":{"loc":{"start":{"line":111,"column":8},"end":{"line":117,"column":9}},"type":"if","locations":[{"start":{"line":111,"column":8},"end":{"line":117,"column":9}},{"start":{},"end":{}}],"line":111},"11":{"loc":{"start":{"line":111,"column":12},"end":{"line":111,"column":80}},"type":"binary-expr","locations":[{"start":{"line":111,"column":12},"end":{"line":111,"column":44}},{"start":{"line":111,"column":48},"end":{"line":111,"column":80}}],"line":111},"12":{"loc":{"start":{"line":114,"column":37},"end":{"line":114,"column":85}},"type":"cond-expr","locations":[{"start":{"line":114,"column":63},"end":{"line":114,"column":80}},{"start":{"line":114,"column":83},"end":{"line":114,"column":85}}],"line":114},"13":{"loc":{"start":{"line":118,"column":8},"end":{"line":128,"column":9}},"type":"if","locations":[{"start":{"line":118,"column":8},"end":{"line":128,"column":9}},{"start":{"line":126,"column":13},"end":{"line":128,"column":9}}],"line":118},"14":{"loc":{"start":{"line":132,"column":4},"end":{"line":136,"column":5}},"type":"if","locations":[{"start":{"line":132,"column":4},"end":{"line":136,"column":5}},{"start":{},"end":{}}],"line":132},"15":{"loc":{"start":{"line":132,"column":8},"end":{"line":132,"column":66}},"type":"binary-expr","locations":[{"start":{"line":132,"column":8},"end":{"line":132,"column":30}},{"start":{"line":132,"column":34},"end":{"line":132,"column":66}}],"line":132}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0},"f":{"0":0,"1":0},"b":{"0":[0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-utils/markdown-ast/parse-children.ts","sources":["C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-utils/markdown-ast/parse-children.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb;;;;;;;;;;;;;GAaG;AACH,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9D,OAAO,CAAC,aAAa,GAAG,aAAa,CAAC;AACtC,MAAM,cAAc,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAClD,MAAM,4BAA4B,GAAG,OAAO,CAAC,8BAA8B,CAAC,CAAC;AAC7E,MAAM,mBAAmB,GAAG,OAAO,CAAC,qBAAqB,CAAC,CAAC;AAC3D;;;;;;;GAOG;AACH,MAAM,WAAW,GAAG;IAChB,YAAY;IACZ,UAAU;IACV,cAAc;IACd,iBAAiB;IACjB,eAAe;IACf,eAAe;IACf,WAAW;IACX,UAAU;IACV,sBAAsB;IACtB,oBAAoB;IACpB,UAAU;IACV,MAAM;IACN,UAAU;IACV,iBAAiB;CACpB,CAAC;AACF;;;;;;;;;GASG;AACH,SAAS,kBAAkB,CAAC,aAAa,GAAG,EAAE,EAAE,IAAI,EAAE,QAAQ;IAC1D,IAAI,IAAI,CAAC,IAAI,KAAK,iBAAiB,EAAE,CAAC;QAClC,OAAO,aAAa,CAAC;IACzB,CAAC;IACD,MAAM,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,EAAE,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,iBAAiB;IACnF,MAAM,aAAa,GAAG,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC7C,kEAAkE;IAClE,KAAK,MAAM,SAAS,IAAI,aAAa,EAAE,CAAC;QACpC,IAAI,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC;YAC5B,eAAe;YACf,IAAI,OAAO,IAAI,aAAa,EAAE,CAAC;gBAC3B,aAAa,CAAC,KAAK,GAAG,aAAa,CAAC,KAAK,GAAG,GAAG,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YAC7E,CAAC;iBACI,CAAC;gBACF,aAAa,CAAC,KAAK,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACjD,CAAC;QACL,CAAC;aACI,IAAI,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,aAAa,CAAC,EAAE,CAAC;YAC7D,oDAAoD;YACpD,aAAa,CAAC,EAAE,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAC9C,CAAC;aACI,IAAI,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;YAC/B,sEAAsE;YACtE,gBAAgB;YAChB,MAAM,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACnC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACrB,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACvC,CAAC,CAAC,gBAAgB;QACtB,CAAC;IACL,CAAC;IACD,OAAO,aAAa,CAAC;AACzB,CAAC;AACD;;;;;;;;GAQG;AACH,SAAS,aAAa,CAAC,OAAO,EAAE,IAAI,EAAE,QAAQ;IAC1C,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI,EAAE,CAAC;QAC3B,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;YACnC,MAAM,QAAQ,GAAG,CAAC,CAAC,EAAE,mBAAmB,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,4BAA4B,CAAC,uBAAuB,CAAC,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;YACjM,OAAO,CAAC,QAAQ,GAAG,CAAC,QAAQ,CAAC,CAAC;QAClC,CAAC;QACD,OAAO,OAAO,CAAC,CAAC,aAAa;IACjC,CAAC;IACD,OAAO,CAAC,QAAQ,GAAG,EAAE,CAAC;IACtB,IAAI,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC;IACnC,IAAI,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC;IAC7B,OAAO,YAAY,KAAK,IAAI,EAAE,CAAC;QAC3B,4EAA4E;QAC5E,0EAA0E;QAC1E,yCAAyC;QACzC,IAAI,YAAY,CAAC,IAAI,GAAG,YAAY,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;YACvE,MAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,YAAY,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;YAChE,MAAM,cAAc,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC3C,MAAM,gBAAgB,GAAG,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YAC1E,MAAM,QAAQ,GAAG,CAAC,CAAC,EAAE,mBAAmB,CAAC,eAAe,CAAC,CAAC,YAAY,EAAE,YAAY,CAAC,IAAI,EAAE,GAAG,CAAC,SAAS,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAAE,gBAAgB,CAAC,CAAC;YACrJ,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACpC,CAAC;QACD,IAAI,YAAY,CAAC,IAAI,KAAK,iBAAiB,EAAE,CAAC;YAC1C,yDAAyD;YACzD,yEAAyE;YACzE,wEAAwE;YACxE,2EAA2E;YAC3E,4DAA4D;YAC5D,OAAO,CAAC,UAAU,GAAG,kBAAkB,CAAC,OAAO,CAAC,UAAU,EAAE,YAAY,EAAE,QAAQ,CAAC,CAAC;QACxF,CAAC;aACI,CAAC;YACF,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,cAAc,CAAC,SAAS,CAAC,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC,CAAC;QACjF,CAAC;QACD,YAAY,GAAG,YAAY,CAAC,EAAE,CAAC,CAAC,gDAAgD;QAChF,YAAY,GAAG,YAAY,CAAC,WAAW,CAAC;IAC5C,CAAC;IACD,IAAI,YAAY,GAAG,IAAI,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;QAC7D,sBAAsB;QACtB,MAAM,QAAQ,GAAG,CAAC,CAAC,EAAE,mBAAmB,CAAC,eAAe,CAAC,CAAC,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE,QAAQ,CAAC,SAAS,CAAC,YAAY,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5H,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACpC,CAAC;IACD,OAAO,OAAO,CAAC;AACnB,CAAC","sourcesContent":["\"use strict\";\n/**\n * @ignore\n * BEGIN HEADER\n *\n * Contains:        parseChildren AST module\n * CVM-Role:        Utility\n * Maintainer:      Hendrik Erz\n * License:         GNU GPL v3\n *\n * Description:     Utility function for the AST parser that parses the children\n *                  of a semi-parsed AST node.\n *\n * END HEADER\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseChildren = parseChildren;\nconst markdown_ast_1 = require(\"../markdown-ast\");\nconst get_whitespace_before_node_1 = require(\"./get-whitespace-before-node\");\nconst generic_text_node_1 = require(\"./generic-text-node\");\n/**\n * This list contains all Node names that do not themselves have any content.\n * These are either purely formatting nodes (such as heading marks or link\n * marks) who can be reconstructed without the verbatim value, as well as larger\n * container nodes (whose contents is represented via their children).\n *\n * @var {string[]}\n */\nconst EMPTY_NODES = [\n    'HeaderMark',\n    'CodeMark',\n    'EmphasisMark',\n    'SuperscriptMark',\n    'SubscriptMark',\n    'HighlightMark',\n    'QuoteMark',\n    'ListMark',\n    'YAMLFrontmatterStart',\n    'YAMLFrontmatterEnd',\n    'Document',\n    'List',\n    'ListItem',\n    'PandocAttribute'\n];\n/**\n * Parses an attribute node (PandocAttribute), according to the Pandoc rules\n * (mostly). cf.: https://pandoc.org/MANUAL.html#extension-attributes\n *\n * @param   {Record<string, string>}  oldAttributes  Attribute nodes are merged.\n * @param   {SyntaxNode}              node           The SyntaxNode\n * @param   {string}                  markdown       The original markdown\n *\n * @return  {Record<string, string>}                 A map of the attributes\n */\nfunction parseAttributeNode(oldAttributes = {}, node, markdown) {\n    if (node.name !== 'PandocAttribute') {\n        return oldAttributes;\n    }\n    const rawString = markdown.substring(node.from + 1, node.to - 1); // Remove { and }\n    const rawAttributes = rawString.split(/\\s+/);\n    // General syntax: {#identifier .class .class key=value key=value}\n    for (const attribute of rawAttributes) {\n        if (attribute.startsWith('.')) {\n            // It's a class\n            if ('class' in oldAttributes) {\n                oldAttributes.class = oldAttributes.class + ' ' + attribute.substring(1);\n            }\n            else {\n                oldAttributes.class = attribute.substring(1);\n            }\n        }\n        else if (attribute.startsWith('#') && !('id' in oldAttributes)) {\n            // It's an ID, but only the *first* one found counts\n            oldAttributes.id = attribute.substring(1);\n        }\n        else if (attribute.includes('=')) {\n            // It's a key=value attribute. NOTE: Later generic attributes override\n            // earlier ones!\n            const parts = attribute.split('=');\n            if (parts.length === 2) {\n                oldAttributes[parts[0]] = parts[1];\n            } // Else: Invalid\n        }\n    }\n    return oldAttributes;\n}\n/**\n * Parses the children of ASTNodes who can have children.\n *\n * @param   {T}           astNode   The AST node that must support children\n * @param   {SyntaxNode}  node      The original Lezer SyntaxNode\n * @param   {string}      markdown  The Markdown source\n *\n * @return  {T}                     Returns the same astNode with children.\n */\nfunction parseChildren(astNode, node, markdown) {\n    if (node.firstChild === null) {\n        if (!EMPTY_NODES.includes(node.name)) {\n            const textNode = (0, generic_text_node_1.genericTextNode)(node.from, node.to, markdown.substring(node.from, node.to), (0, get_whitespace_before_node_1.getWhitespaceBeforeNode)(node, markdown));\n            astNode.children = [textNode];\n        }\n        return astNode; // We're done\n    }\n    astNode.children = [];\n    let currentChild = node.firstChild;\n    let currentIndex = node.from;\n    while (currentChild !== null) {\n        // NOTE: We have to account for \"gaps\" where a node has children that do not\n        // completely cover the node's contents. In that case, we have to add text\n        // nodes that just contain those strings.\n        if (currentChild.from > currentIndex && !EMPTY_NODES.includes(node.name)) {\n            const gap = markdown.substring(currentIndex, currentChild.from);\n            const onlyWhitespace = /^(\\s*)/m.exec(gap);\n            const whitespaceBefore = onlyWhitespace !== null ? onlyWhitespace[1] : '';\n            const textNode = (0, generic_text_node_1.genericTextNode)(currentIndex, currentChild.from, gap.substring(whitespaceBefore.length), whitespaceBefore);\n            astNode.children.push(textNode);\n        }\n        if (currentChild.name === 'PandocAttribute') {\n            // PandocAttribute nodes should never show up in the tree\n            // TODO: This assumes that the PandocAttribute should apply to the parent\n            // node, but often (e.g., for images) they belong to the previous child!\n            // TODO: Check what the *previous* child was, and if it can have attributes\n            // Docs: https://pandoc.org/MANUAL.html#extension-attributes\n            astNode.attributes = parseAttributeNode(astNode.attributes, currentChild, markdown);\n        }\n        else {\n            astNode.children.push((0, markdown_ast_1.parseNode)(currentChild, markdown));\n        }\n        currentIndex = currentChild.to; // Must happen before the nextSibling assignment\n        currentChild = currentChild.nextSibling;\n    }\n    if (currentIndex < node.to && !EMPTY_NODES.includes(node.name)) {\n        // One final text node\n        const textNode = (0, generic_text_node_1.genericTextNode)(currentIndex, node.to, markdown.substring(currentIndex, node.to));\n        astNode.children.push(textNode);\n    }\n    return astNode;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"411d36828096eecd56cfe3ee601c327f6a3e8990","contentHash":"b7bab998d19c1b602e74061e681a6ee829c23afec08341d5acd7c8b3fdb2e375"},"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-utils\\markdown-ast\\generic-text-node.ts":{"path":"C:\\Users\\Josh E\\Documents\\Zettlr-sweng431\\source\\common\\modules\\markdown-utils\\markdown-ast\\generic-text-node.ts","statementMap":{"0":{"start":{"line":16,"column":0},"end":{"line":16,"column":62}},"1":{"start":{"line":17,"column":0},"end":{"line":17,"column":42}},"2":{"start":{"line":30,"column":4},"end":{"line":30,"column":77}}},"fnMap":{"0":{"name":"genericTextNode","decl":{"start":{"line":29,"column":9},"end":{"line":29,"column":24}},"loc":{"start":{"line":29,"column":65},"end":{"line":31,"column":1}},"line":29}},"branchMap":{"0":{"loc":{"start":{"line":29,"column":42},"end":{"line":29,"column":63}},"type":"default-arg","locations":[{"start":{"line":29,"column":61},"end":{"line":29,"column":63}}],"line":29}},"s":{"0":1,"1":1,"2":0},"f":{"0":0},"b":{"0":[0]},"inputSourceMap":{"version":3,"file":"C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-utils/markdown-ast/generic-text-node.ts","sources":["C:/Users/Josh E/Documents/Zettlr-sweng431/source/common/modules/markdown-utils/markdown-ast/generic-text-node.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb;;;;;;;;;;;;;GAaG;AACH,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9D,OAAO,CAAC,eAAe,GAAG,eAAe,CAAC;AAC1C;;;;;;;;;;GAUG;AACH,SAAS,eAAe,CAAC,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,gBAAgB,GAAG,EAAE;IAC3D,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,gBAAgB,EAAE,CAAC;AAC7E,CAAC","sourcesContent":["\"use strict\";\n/**\n * @ignore\n * BEGIN HEADER\n *\n * Contains:        genericTextNode\n * CVM-Role:        Utility\n * Maintainer:      Hendrik Erz\n * License:         GNU GPL v3\n *\n * Description:     A simple function that wraps a piece of plain text into an\n *                  ASTNode.\n *\n * END HEADER\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.genericTextNode = genericTextNode;\n/**\n * Creates a generic text node; this is used to represent textual contents of\n * SyntaxNodes.\n *\n * @param   {number}    from              The absolute start offset\n * @param   {number}    to                The absolute end offset\n * @param   {string}    value             The actual text\n * @param   {string}    whitespaceBefore  Potential whitespace before the node\n *\n * @return  {TextNode}                    The rendered TextNode\n */\nfunction genericTextNode(from, to, value, whitespaceBefore = '') {\n    return { type: 'Text', name: 'text', from, to, value, whitespaceBefore };\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzovVXNlcnMvSm9zaCBFL0RvY3VtZW50cy9aZXR0bHItc3dlbmc0MzEvc291cmNlL2NvbW1vbi9tb2R1bGVzL21hcmtkb3duLXV0aWxzL21hcmtkb3duLWFzdC9nZW5lcmljLXRleHQtbm9kZS50cyIsInNvdXJjZXMiOlsiQzovVXNlcnMvSm9zaCBFL0RvY3VtZW50cy9aZXR0bHItc3dlbmc0MzEvc291cmNlL2NvbW1vbi9tb2R1bGVzL21hcmtkb3duLXV0aWxzL21hcmtkb3duLWFzdC9nZW5lcmljLXRleHQtbm9kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7R0FhRzs7QUFlSCwwQ0FFQztBQWJEOzs7Ozs7Ozs7O0dBVUc7QUFDSCxTQUFnQixlQUFlLENBQUUsSUFBWSxFQUFFLEVBQVUsRUFBRSxLQUFhLEVBQUUsZ0JBQWdCLEdBQUcsRUFBRTtJQUM3RixPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLGdCQUFnQixFQUFFLENBQUE7QUFDMUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAaWdub3JlXHJcbiAqIEJFR0lOIEhFQURFUlxyXG4gKlxyXG4gKiBDb250YWluczogICAgICAgIGdlbmVyaWNUZXh0Tm9kZVxyXG4gKiBDVk0tUm9sZTogICAgICAgIFV0aWxpdHlcclxuICogTWFpbnRhaW5lcjogICAgICBIZW5kcmlrIEVyelxyXG4gKiBMaWNlbnNlOiAgICAgICAgIEdOVSBHUEwgdjNcclxuICpcclxuICogRGVzY3JpcHRpb246ICAgICBBIHNpbXBsZSBmdW5jdGlvbiB0aGF0IHdyYXBzIGEgcGllY2Ugb2YgcGxhaW4gdGV4dCBpbnRvIGFuXHJcbiAqICAgICAgICAgICAgICAgICAgQVNUTm9kZS5cclxuICpcclxuICogRU5EIEhFQURFUlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IHR5cGUgVGV4dE5vZGUgfSBmcm9tICcuLi9tYXJrZG93bi1hc3QnXHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIGdlbmVyaWMgdGV4dCBub2RlOyB0aGlzIGlzIHVzZWQgdG8gcmVwcmVzZW50IHRleHR1YWwgY29udGVudHMgb2ZcclxuICogU3ludGF4Tm9kZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSAgIHtudW1iZXJ9ICAgIGZyb20gICAgICAgICAgICAgIFRoZSBhYnNvbHV0ZSBzdGFydCBvZmZzZXRcclxuICogQHBhcmFtICAge251bWJlcn0gICAgdG8gICAgICAgICAgICAgICAgVGhlIGFic29sdXRlIGVuZCBvZmZzZXRcclxuICogQHBhcmFtICAge3N0cmluZ30gICAgdmFsdWUgICAgICAgICAgICAgVGhlIGFjdHVhbCB0ZXh0XHJcbiAqIEBwYXJhbSAgIHtzdHJpbmd9ICAgIHdoaXRlc3BhY2VCZWZvcmUgIFBvdGVudGlhbCB3aGl0ZXNwYWNlIGJlZm9yZSB0aGUgbm9kZVxyXG4gKlxyXG4gKiBAcmV0dXJuICB7VGV4dE5vZGV9ICAgICAgICAgICAgICAgICAgICBUaGUgcmVuZGVyZWQgVGV4dE5vZGVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmljVGV4dE5vZGUgKGZyb206IG51bWJlciwgdG86IG51bWJlciwgdmFsdWU6IHN0cmluZywgd2hpdGVzcGFjZUJlZm9yZSA9ICcnKTogVGV4dE5vZGUge1xyXG4gIHJldHVybiB7IHR5cGU6ICdUZXh0JywgbmFtZTogJ3RleHQnLCBmcm9tLCB0bywgdmFsdWUsIHdoaXRlc3BhY2VCZWZvcmUgfVxyXG59XHJcbiJdfQ=="]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"31410c33e640a4f577971d32cdf7be25a679e9e8","contentHash":"6f90159f907fd972a8536d9a62716a429eb52bd03daaf48329a58c87a82188e3"}}